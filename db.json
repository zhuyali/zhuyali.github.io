{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1510579336000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1510579336000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1510579336000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1510579336000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1510579336000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1510579336000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1510579336000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1510579336000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1510579336000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1510579336000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1510579336000},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1510579336000},{"_id":"themes/next/README.md","hash":"529d53dfa97678f8ce4c95620b26e61154162a29","modified":1510579336000},{"_id":"themes/next/_config.yml","hash":"b111dded2d34f7d25181ab738e1c71fffcd56dbf","modified":1521683788000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1510579336000},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1510579336000},{"_id":"source/_posts/CSS居中定位的魔法.md","hash":"a0bc75e86799530d9261d17e572c1c1160a46d04","modified":1517377439561},{"_id":"source/_posts/CSS魔法篇之布局实践.md","hash":"984b70419bf2cd047c4ae93158b6b3cccb28eee3","modified":1520425235656},{"_id":"source/_posts/CSS魔法篇之flex布局.md","hash":"b2d517e66c53effe1e3255583dd3c6ea23fab9c2","modified":1520413845039},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515218589391},{"_id":"source/_posts/CSS魔法篇之清除浮动.md","hash":"b366e5fe4570f3a9cc9986188e9846896d0de507","modified":1519654629000},{"_id":"source/_posts/HTTP杂烩-一.md","hash":"0a26864fe6e8cc9e42906641889617b2bac0f77d","modified":1518409333742},{"_id":"source/_posts/JavaScript高级程序回顾-二-——请求资源的那些事儿.md","hash":"0602ffd7fe55a5dd31380568c046ccd0e5cfc14c","modified":1516242296000},{"_id":"source/_posts/Mac下的Hadoop2-7-3环境配置.md","hash":"4275d5f934ec2e802f85e5bf7479a11ef9c617d0","modified":1516082670000},{"_id":"source/_posts/JS设计模式之工厂模式.md","hash":"dfdad5951375f9dbf9f35e68d3fccc70182e35c9","modified":1516104905000},{"_id":"source/_posts/关于-MVC，MVP-和-MVVM-的一些理解.md","hash":"849e2e58a849b1136daee36058a09e5b803ffcea","modified":1515476087000},{"_id":"source/_posts/JavaScript高级程序回顾-一-——JS的发展历程.md","hash":"eb8461b06bc3db013f059817c36bc9df8e35641c","modified":1515476092515},{"_id":"source/_posts/Promise的一些尝试.md","hash":"0850ec919dc520eb22052571fe01d52b85d7c733","modified":1520257115000},{"_id":"source/_posts/异步编程通用解决方案.md","hash":"d2c2db27baf0d8ce0b0328d05c88051a5f484fb3","modified":1521640472575},{"_id":"source/_posts/吓唬人的闭包.md","hash":"6f9fcf0241db148b4fa1f31cd40e39357e482a5d","modified":1516002511000},{"_id":"source/_posts/飘忽不定的-this.md","hash":"0e51f730b700044a4efa85491b430b49fdb00106","modified":1515749326711},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1510579336000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1510579336000},{"_id":"source/about/index.md","hash":"79eaa37f516a7eea69f46c8887b072915dc2449e","modified":1522156917808},{"_id":"source/_posts/面向对象的JS.md","hash":"1646b7d5c91951f369a9c00001a46ce1c3d72da9","modified":1516010027928},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1510579320000},{"_id":"themes/next/.git/index","hash":"fb368c10b8a048330fca1ac98888c319cb07e94d","modified":1521682768392},{"_id":"source/_posts/高级技巧.md","hash":"344457cdafb2780acbc802bf15f5d0668b03b1c8","modified":1521632299997},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1510579336000},{"_id":"themes/next/.git/packed-refs","hash":"9d29a8e4f61747ca4478d7d80980001d1f0689f4","modified":1510579336000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1510579336000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1510579336000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1510579336000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1510579336000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1510579336000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1510579336000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1510579336000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1510579336000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1510579336000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1510579336000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1510579336000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1510579336000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1510579336000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1510579336000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1510579336000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1510579336000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1510579336000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1510579336000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1510579336000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1510579336000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1510579336000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1510579336000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1510579336000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1510579336000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1510579336000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1510579336000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1510579336000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1510579336000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1510579336000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1510579336000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1510579336000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1510579320000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1510579320000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1510579320000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1510579320000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1510579320000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1510579320000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1510579320000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1510579320000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1510579320000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1510579320000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1510579320000},{"_id":"themes/next/.git/logs/HEAD","hash":"223f79971458e27052794a69afc819d1c36e370d","modified":1510579336000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1510579336000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1510579336000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1510579336000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1510579336000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1510579336000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1510579336000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1510579336000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1510579336000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1510579336000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1521682766609},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1510579336000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1510579336000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1510579336000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1510579336000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1510579336000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1510579336000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1510579336000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1510579336000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1510579336000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1510579336000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1510579336000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1510579336000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1510579336000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1510579336000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1510579336000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1510579336000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1510579336000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1510579336000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1510579336000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1510579336000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1510579336000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1510579336000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1510579336000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1510579336000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1510579336000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1510579336000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1510579336000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1510579336000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1510579336000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1510579336000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1510579336000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1510579336000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1510579336000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1510579336000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1510579336000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1510579336000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510579336000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1510579336000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1510579336000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510579336000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1510579336000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1510579336000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1510579336000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510579336000},{"_id":"themes/next/.git/refs/heads/master","hash":"0cadb401e901309811e8fd2e4b95e3aea1b35635","modified":1510579336000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1510579336000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1510579336000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1510579336000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1510579336000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1510579336000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1510579336000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1510579336000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1510579336000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1510579336000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1510579336000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1510579336000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1510579336000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4617daf810f42b3f3908a40f246538cb1e5970da","modified":1510579336000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1510579336000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1510579336000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1510579336000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1510579336000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1510579336000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1510579336000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1510579336000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1510579336000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1510579336000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1510579336000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1510579336000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1510579336000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0e035c101764eca526e41bc7aead043ec27dcf7b","modified":1515336328000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1510579336000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1510579336000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1510579336000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1510579336000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1510579336000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1510579336000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1510579336000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1510579336000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1510579336000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1510579336000},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1510579336000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1510579336000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1510579336000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1510579336000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1510579336000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1510579336000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1510579336000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1510579336000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1510579336000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1510579336000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1510579336000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1510579336000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1510579336000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1510579336000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1510579336000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1510579336000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1510579336000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1510579336000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1510579336000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1510579336000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1510579336000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1510579336000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1510579336000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1510579336000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1510579336000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1510579336000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1510579336000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1510579336000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"223f79971458e27052794a69afc819d1c36e370d","modified":1510579336000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1510579336000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1510579336000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1510579336000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1510579336000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1510579336000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1510579336000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1510579336000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1510579336000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1510579336000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1510579336000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1510579336000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1510579336000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1510579336000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1510579336000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1510579336000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1510579336000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"223f79971458e27052794a69afc819d1c36e370d","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1510579336000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1510579336000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1510579336000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1510579336000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1510579336000},{"_id":"themes/next/.git/objects/pack/pack-65c31e365b44a95e58ee43c405a8b1f3bf8841ad.idx","hash":"7a3517cfa812ba8522d8c0ffdc85e4e943b4ba6e","modified":1510579336000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1510579336000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1510579336000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1510579336000},{"_id":"themes/next/.git/objects/pack/pack-65c31e365b44a95e58ee43c405a8b1f3bf8841ad.pack","hash":"f8576be459c1c76286ce53b058160505a9829fe0","modified":1510579336000},{"_id":"public/archives/page/2/index.html","hash":"e3b43d92c1a1166dee9686a025d1315cbb1e9f13","modified":1522156930824},{"_id":"public/archives/2017/index.html","hash":"5eacdd6c45e710aedaf4d6b0afb1d33369ec1a9f","modified":1522156930824},{"_id":"public/archives/2017/11/index.html","hash":"90fee3d35e587408ddc4fe093462bd9add8e35e3","modified":1522156930824},{"_id":"public/archives/2017/12/index.html","hash":"da1cf8dd04b3e9d25513869768d05ca5a9709c4f","modified":1522156930824},{"_id":"public/archives/2018/page/2/index.html","hash":"f81cb10a4756a597ab8b4de0c09207898b543ddb","modified":1522156930825},{"_id":"public/archives/2018/02/index.html","hash":"87b588ba5a0d1f3e439d330aa083d3a91f408d1a","modified":1522156930825},{"_id":"public/archives/2018/03/index.html","hash":"b13d7369919b3358e52158f10277099a4d933e39","modified":1522156930825},{"_id":"public/about/index.html","hash":"d82758840bd110d4573526f1eb738622d25ee443","modified":1522156930825},{"_id":"public/2018/03/07/CSS魔法篇之布局实践/index.html","hash":"ca59e7e210dd20223af850e01666bd009f6e9155","modified":1522156930825},{"_id":"public/2018/03/07/CSS魔法篇之flex布局/index.html","hash":"4358c0c39cd5ea6e11ae570b97162abf07af63e1","modified":1522156930825},{"_id":"public/2018/03/05/Promise的一些尝试/index.html","hash":"37339f83a4ae2d8bc493a51207caf7f2a9cdf68c","modified":1522156930825},{"_id":"public/2018/02/26/异步编程通用解决方案/index.html","hash":"d732d78feb2ded5c7f7847350f21ad569caa95d2","modified":1522156930825},{"_id":"public/2018/01/31/CSS魔法篇之清除浮动/index.html","hash":"a8023df322e99d8ae0c7121efd0c8d61b363403e","modified":1522156930825},{"_id":"public/2018/01/16/JS设计模式之工厂模式/index.html","hash":"358395814129202ddc524bf8874eb203dbdeca74","modified":1522156930825},{"_id":"public/2018/01/15/高级技巧/index.html","hash":"efad57c1f22ee9d1bb3d2feafe1e887f5e43c1c7","modified":1522156930826},{"_id":"public/2018/01/12/面向对象的JS/index.html","hash":"b0c691b801ae91b6409d550c68916c937f7f4ccf","modified":1522156930826},{"_id":"public/2018/01/11/飘忽不定的-this/index.html","hash":"0f1151bd0b66200e16c43c6eaccde7911da80dcc","modified":1522156930826},{"_id":"public/2018/01/09/吓唬人的闭包/index.html","hash":"27fd826cd1a601036886a27e9d14e64c4adf2505","modified":1522156930826},{"_id":"public/2018/01/09/JavaScript高级程序回顾-二-——请求资源的那些事儿/index.html","hash":"5eee41a861b78f2278de89ce1ad30ac68a3fbcac","modified":1522156930826},{"_id":"public/2018/01/08/HTTP杂烩-一/index.html","hash":"ea27fe6e080f8df7a05b59389d3c862da4ba8f86","modified":1522156930826},{"_id":"public/2018/01/08/JavaScript高级程序回顾-一-——JS的发展历程/index.html","hash":"269f9c2ed677b8dd790e5e2d9e249e1161de0602","modified":1522156930826},{"_id":"public/2017/12/19/Mac下的Hadoop2-7-3环境配置/index.html","hash":"a3e012a384cb694f156b4550c697573353cb53d8","modified":1522156930826},{"_id":"public/2017/11/27/关于-MVC，MVP-和-MVVM-的一些理解/index.html","hash":"8aa372798a8a257b600bce47a5bd076287e7d4cc","modified":1522156930826},{"_id":"public/2017/11/15/CSS居中定位的魔法/index.html","hash":"eb5fc64e96d02fccc80ca86b9f60078f5d488602","modified":1522156930826},{"_id":"public/archives/index.html","hash":"7521973e1c16cb0b1e43e540a7067f5edff60bde","modified":1522156930827},{"_id":"public/archives/2018/index.html","hash":"719993f06c8879b2b800c7a4a1162f3a449b9a81","modified":1522156930827},{"_id":"public/archives/2018/01/index.html","hash":"4f36227d4ebf721ec5f1b0a630f1271e65a36e93","modified":1522156930827},{"_id":"public/index.html","hash":"0388af1e60d06ae36660b940f5bd13ddfc74e0cc","modified":1522156930827},{"_id":"public/page/2/index.html","hash":"f7c75d61d513953e01b624e20bf6449ce6447cc8","modified":1522156930827},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1522156930844},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522156930844},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522156930844},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1522156930844},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1522156930844},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1522156930844},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1522156930844},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1522156930844},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1522156930844},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1522156930844},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522156930845},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522156930845},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522156930845},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1522156930845},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522156930845},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1522156930845},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1522156930845},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522156930845},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1522156930845},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1522156930845},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1522156930845},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1522156930845},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1522156930845},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1522156930846},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1522156930846},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1522156930846},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1522156930846},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1522156930846},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1522156930846},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1522156930846},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1522156930846},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1522156930847},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1522156930847},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522156931595},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522156931602},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1522156931614},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1522156931615},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1522156931615},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1522156931615},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1522156931615},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1522156931615},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1522156931615},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1522156931615},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1522156931615},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1522156931616},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1522156931616},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1522156931616},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1522156931616},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1522156931616},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1522156931616},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1522156931616},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1522156931616},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1522156931617},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1522156931617},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1522156931617},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1522156931617},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1522156931617},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1522156931617},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522156931617},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522156931617},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522156931617},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522156931618},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522156931619},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1522156931619},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1522156931619},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1522156931619},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1522156931619},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1522156931619},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1522156931619},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1522156931619},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1522156931619},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1522156931619},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1522156931620},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1522156931620},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1522156931620},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1522156931620},{"_id":"public/css/main.css","hash":"6ff95cd3039bf58be1115fea70c2dde29085bc05","modified":1522156931620},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1522156931620},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1522156931620},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1522156931620},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1522156931620},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1522156931620},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1522156931621},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1522156931621},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1522156931621},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1522156931621},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1522156931621},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1522156931621},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1522156931621},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1522156931621},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1522156931622},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1522156931622},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1522156931622},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1522156931622},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1522156931622},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1522156931622},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1522156931622},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1522156931623},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522156931623},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1522156931623},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1522156931639}],"Category":[],"Data":[],"Page":[{"date":"2018-01-07T11:19:27.000Z","_content":"\n## 关于博主\n一名具有文艺梦的程序猿，还是学生党，未来希望成为一名前端工作者~\n\n## 关于博客\n记录一些学习过程中的想法，分享一些学习心得~\n\n## 联系方式\n- Github: https://github.com/zhuyali\n- 微博: @一只大阿瓜\n\n## 作品集\n- #### 应用类\n\n<style>\n  .icon {\n    width: 150px;\n    height: 150px;\n    border-radius: 100%;\n  }\n  .work {\n    float: left;\n    width: 450px;\n    padding-top: 15px;\n  }\n  .intro {\n    display: inline-block;\n    width: 250px;\n    padding-left: 20px;\n    vertical-align: top;\n  }\n  .works {\n    overflow: hidden;\n  }\n  .title {\n    color: #0366d6;\n    text-decoration: none;\n    border: none;\n    font-size: 22px;\n    font-weight: 600;\n  }\n  .title:hover {\n    color: #0366d6;\n    text-decoration: underline;\n  }\n</style>\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/28126942?s=200&v=4\" /><div class=\"intro\"><a class=\"title\" href=\"https://github.com/open-catlog\">open-catlog</a><div class=\"brief\">一款使用 koa+mongo+react 搭建的监控系统，主要针对PV，UV，Tomcat，Nginx，MySQL还有一些操作系统基本信息进行监控。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars2.githubusercontent.com/u/9766938?s=200&v=4\" /><div class=\"intro\"><a class=\"title\">feedit</a><div class=\"brief\">一款个人订阅系统。包含四个模块：<a href=\"https://github.com/zhuyali/feedit_chrome\">Chrome插件</a>，<a href=\"https://github.com/zhuyali/Feedit_android\">Android端</a>，<a href=\"https://github.com/zhuyali/feedit_iOS\">iOS端</a>，<a href=\"https://github.com/zhuyali/feedit\">服务端</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://zhuyali.github.io/imusic/assets/images/Music-icon.png\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/imusic/\">imusic</a><div class=\"brief\">一款本地音乐播放器，还有对应的<a href=\"https://github.com/zhuyali/imusic-react\"> React 版本</a>和<a href=\"https://github.com/zhuyali/imusic-vue\"> Vue 版本</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342177506&di=e9ed8180b3301d6b23e6668275bd4fa8&imgtype=0&src=http%3A%2F%2Fimg.25pp.com%2Fuploadfile%2Fsoft%2Fimages%2F2014%2F0910%2F20140910113414610.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/todoList/\">todoList</a><div class=\"brief\">习惯记 todoList 的福音，可以帮助我合理规划时间。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342648992&di=bec0e85fd3b55e2ceb8a99ba04174e97&imgtype=0&src=http%3A%2F%2Fis5.mzstatic.com%2Fimage%2Fthumb%2FPurple122%2Fv4%2F34%2F95%2F80%2F34958089-1d33-a766-84f8-f060a85728ca%2Fsource%2F512x512bb.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/training/snake/index.html\">贪吃蛇</a><div class=\"brief\">在线版贪吃蛇游戏，可以自定义地图大小哦~</div></div></div>\n\n<div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=554385299,1198250608&fm=27&gp=0.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/Cellular-Automation/\">细胞自动机</a><div class=\"brief\">在线版细胞自动机，难度虽然不大，不过还是蛮好玩的~</div></div></div></div>\n\n- #### 组件类\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515343144597&di=a1b3eb4811563e8f64117498d9b502c3&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F19%2F03%2F20%2F1656ece7cf410a9.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-tree/\">d3-tree</a><div class=\"brief\">用于树状结构的生成，可带有图片和文字。该组件被 Macaca Reporter 项目使用。</div></div></div></div>\n\n- #### 文档类\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/1562726?s=200&v=4\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-doc/\">d3-doc</a><div class=\"brief\">d3.js文档翻译，可视化工作者可以借鉴参考，主要是业余时间进行翻译，未完待续~</div></div></div></div>\n","source":"about/index.md","raw":"---\ndate: 2018-01-07 19:19:27\n---\n\n## 关于博主\n一名具有文艺梦的程序猿，还是学生党，未来希望成为一名前端工作者~\n\n## 关于博客\n记录一些学习过程中的想法，分享一些学习心得~\n\n## 联系方式\n- Github: https://github.com/zhuyali\n- 微博: @一只大阿瓜\n\n## 作品集\n- #### 应用类\n\n<style>\n  .icon {\n    width: 150px;\n    height: 150px;\n    border-radius: 100%;\n  }\n  .work {\n    float: left;\n    width: 450px;\n    padding-top: 15px;\n  }\n  .intro {\n    display: inline-block;\n    width: 250px;\n    padding-left: 20px;\n    vertical-align: top;\n  }\n  .works {\n    overflow: hidden;\n  }\n  .title {\n    color: #0366d6;\n    text-decoration: none;\n    border: none;\n    font-size: 22px;\n    font-weight: 600;\n  }\n  .title:hover {\n    color: #0366d6;\n    text-decoration: underline;\n  }\n</style>\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/28126942?s=200&v=4\" /><div class=\"intro\"><a class=\"title\" href=\"https://github.com/open-catlog\">open-catlog</a><div class=\"brief\">一款使用 koa+mongo+react 搭建的监控系统，主要针对PV，UV，Tomcat，Nginx，MySQL还有一些操作系统基本信息进行监控。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars2.githubusercontent.com/u/9766938?s=200&v=4\" /><div class=\"intro\"><a class=\"title\">feedit</a><div class=\"brief\">一款个人订阅系统。包含四个模块：<a href=\"https://github.com/zhuyali/feedit_chrome\">Chrome插件</a>，<a href=\"https://github.com/zhuyali/Feedit_android\">Android端</a>，<a href=\"https://github.com/zhuyali/feedit_iOS\">iOS端</a>，<a href=\"https://github.com/zhuyali/feedit\">服务端</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://zhuyali.github.io/imusic/assets/images/Music-icon.png\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/imusic/\">imusic</a><div class=\"brief\">一款本地音乐播放器，还有对应的<a href=\"https://github.com/zhuyali/imusic-react\"> React 版本</a>和<a href=\"https://github.com/zhuyali/imusic-vue\"> Vue 版本</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342177506&di=e9ed8180b3301d6b23e6668275bd4fa8&imgtype=0&src=http%3A%2F%2Fimg.25pp.com%2Fuploadfile%2Fsoft%2Fimages%2F2014%2F0910%2F20140910113414610.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/todoList/\">todoList</a><div class=\"brief\">习惯记 todoList 的福音，可以帮助我合理规划时间。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342648992&di=bec0e85fd3b55e2ceb8a99ba04174e97&imgtype=0&src=http%3A%2F%2Fis5.mzstatic.com%2Fimage%2Fthumb%2FPurple122%2Fv4%2F34%2F95%2F80%2F34958089-1d33-a766-84f8-f060a85728ca%2Fsource%2F512x512bb.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/training/snake/index.html\">贪吃蛇</a><div class=\"brief\">在线版贪吃蛇游戏，可以自定义地图大小哦~</div></div></div>\n\n<div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=554385299,1198250608&fm=27&gp=0.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/Cellular-Automation/\">细胞自动机</a><div class=\"brief\">在线版细胞自动机，难度虽然不大，不过还是蛮好玩的~</div></div></div></div>\n\n- #### 组件类\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515343144597&di=a1b3eb4811563e8f64117498d9b502c3&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F19%2F03%2F20%2F1656ece7cf410a9.jpg\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-tree/\">d3-tree</a><div class=\"brief\">用于树状结构的生成，可带有图片和文字。该组件被 Macaca Reporter 项目使用。</div></div></div></div>\n\n- #### 文档类\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/1562726?s=200&v=4\" /><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-doc/\">d3-doc</a><div class=\"brief\">d3.js文档翻译，可视化工作者可以借鉴参考，主要是业余时间进行翻译，未完待续~</div></div></div></div>\n","updated":"2018-03-27T13:21:57.808Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjf9oxmd10001vxslgtq9c98f","content":"<h2 id=\"关于博主\"><a href=\"#关于博主\" class=\"headerlink\" title=\"关于博主\"></a>关于博主</h2><p>一名具有文艺梦的程序猿，还是学生党，未来希望成为一名前端工作者~</p>\n<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><p>记录一些学习过程中的想法，分享一些学习心得~</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>Github: <a href=\"https://github.com/zhuyali\" target=\"_blank\" rel=\"external\">https://github.com/zhuyali</a></li>\n<li>微博: @一只大阿瓜</li>\n</ul>\n<h2 id=\"作品集\"><a href=\"#作品集\" class=\"headerlink\" title=\"作品集\"></a>作品集</h2><ul>\n<li><h4 id=\"应用类\"><a href=\"#应用类\" class=\"headerlink\" title=\"应用类\"></a>应用类</h4></li>\n</ul>\n<style>\n  .icon {\n    width: 150px;\n    height: 150px;\n    border-radius: 100%;\n  }\n  .work {\n    float: left;\n    width: 450px;\n    padding-top: 15px;\n  }\n  .intro {\n    display: inline-block;\n    width: 250px;\n    padding-left: 20px;\n    vertical-align: top;\n  }\n  .works {\n    overflow: hidden;\n  }\n  .title {\n    color: #0366d6;\n    text-decoration: none;\n    border: none;\n    font-size: 22px;\n    font-weight: 600;\n  }\n  .title:hover {\n    color: #0366d6;\n    text-decoration: underline;\n  }\n</style>\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/28126942?s=200&v=4\"><div class=\"intro\"><a class=\"title\" href=\"https://github.com/open-catlog\" target=\"_blank\" rel=\"external\">open-catlog</a><div class=\"brief\">一款使用 koa+mongo+react 搭建的监控系统，主要针对PV，UV，Tomcat，Nginx，MySQL还有一些操作系统基本信息进行监控。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars2.githubusercontent.com/u/9766938?s=200&v=4\"><div class=\"intro\"><a class=\"title\">feedit</a><div class=\"brief\">一款个人订阅系统。包含四个模块：<a href=\"https://github.com/zhuyali/feedit_chrome\" target=\"_blank\" rel=\"external\">Chrome插件</a>，<a href=\"https://github.com/zhuyali/Feedit_android\" target=\"_blank\" rel=\"external\">Android端</a>，<a href=\"https://github.com/zhuyali/feedit_iOS\" target=\"_blank\" rel=\"external\">iOS端</a>，<a href=\"https://github.com/zhuyali/feedit\" target=\"_blank\" rel=\"external\">服务端</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://zhuyali.github.io/imusic/assets/images/Music-icon.png\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/imusic/\" target=\"_blank\" rel=\"external\">imusic</a><div class=\"brief\">一款本地音乐播放器，还有对应的<a href=\"https://github.com/zhuyali/imusic-react\" target=\"_blank\" rel=\"external\"> React 版本</a>和<a href=\"https://github.com/zhuyali/imusic-vue\" target=\"_blank\" rel=\"external\"> Vue 版本</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342177506&di=e9ed8180b3301d6b23e6668275bd4fa8&imgtype=0&src=http%3A%2F%2Fimg.25pp.com%2Fuploadfile%2Fsoft%2Fimages%2F2014%2F0910%2F20140910113414610.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/todoList/\" target=\"_blank\" rel=\"external\">todoList</a><div class=\"brief\">习惯记 todoList 的福音，可以帮助我合理规划时间。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342648992&di=bec0e85fd3b55e2ceb8a99ba04174e97&imgtype=0&src=http%3A%2F%2Fis5.mzstatic.com%2Fimage%2Fthumb%2FPurple122%2Fv4%2F34%2F95%2F80%2F34958089-1d33-a766-84f8-f060a85728ca%2Fsource%2F512x512bb.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/training/snake/index.html\" target=\"_blank\" rel=\"external\">贪吃蛇</a><div class=\"brief\">在线版贪吃蛇游戏，可以自定义地图大小哦~</div></div></div>\n\n<div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=554385299,1198250608&fm=27&gp=0.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/Cellular-Automation/\" target=\"_blank\" rel=\"external\">细胞自动机</a><div class=\"brief\">在线版细胞自动机，难度虽然不大，不过还是蛮好玩的~</div></div></div></div>\n\n<ul>\n<li><h4 id=\"组件类\"><a href=\"#组件类\" class=\"headerlink\" title=\"组件类\"></a>组件类</h4></li>\n</ul>\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515343144597&di=a1b3eb4811563e8f64117498d9b502c3&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F19%2F03%2F20%2F1656ece7cf410a9.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-tree/\" target=\"_blank\" rel=\"external\">d3-tree</a><div class=\"brief\">用于树状结构的生成，可带有图片和文字。该组件被 Macaca Reporter 项目使用。</div></div></div></div>\n\n<ul>\n<li><h4 id=\"文档类\"><a href=\"#文档类\" class=\"headerlink\" title=\"文档类\"></a>文档类</h4></li>\n</ul>\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/1562726?s=200&v=4\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-doc/\" target=\"_blank\" rel=\"external\">d3-doc</a><div class=\"brief\">d3.js文档翻译，可视化工作者可以借鉴参考，主要是业余时间进行翻译，未完待续~</div></div></div></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于博主\"><a href=\"#关于博主\" class=\"headerlink\" title=\"关于博主\"></a>关于博主</h2><p>一名具有文艺梦的程序猿，还是学生党，未来希望成为一名前端工作者~</p>\n<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><p>记录一些学习过程中的想法，分享一些学习心得~</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>Github: <a href=\"https://github.com/zhuyali\" target=\"_blank\" rel=\"external\">https://github.com/zhuyali</a></li>\n<li>微博: @一只大阿瓜</li>\n</ul>\n<h2 id=\"作品集\"><a href=\"#作品集\" class=\"headerlink\" title=\"作品集\"></a>作品集</h2><ul>\n<li><h4 id=\"应用类\"><a href=\"#应用类\" class=\"headerlink\" title=\"应用类\"></a>应用类</h4></li>\n</ul>\n<style>\n  .icon {\n    width: 150px;\n    height: 150px;\n    border-radius: 100%;\n  }\n  .work {\n    float: left;\n    width: 450px;\n    padding-top: 15px;\n  }\n  .intro {\n    display: inline-block;\n    width: 250px;\n    padding-left: 20px;\n    vertical-align: top;\n  }\n  .works {\n    overflow: hidden;\n  }\n  .title {\n    color: #0366d6;\n    text-decoration: none;\n    border: none;\n    font-size: 22px;\n    font-weight: 600;\n  }\n  .title:hover {\n    color: #0366d6;\n    text-decoration: underline;\n  }\n</style>\n\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/28126942?s=200&v=4\"><div class=\"intro\"><a class=\"title\" href=\"https://github.com/open-catlog\" target=\"_blank\" rel=\"external\">open-catlog</a><div class=\"brief\">一款使用 koa+mongo+react 搭建的监控系统，主要针对PV，UV，Tomcat，Nginx，MySQL还有一些操作系统基本信息进行监控。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars2.githubusercontent.com/u/9766938?s=200&v=4\"><div class=\"intro\"><a class=\"title\">feedit</a><div class=\"brief\">一款个人订阅系统。包含四个模块：<a href=\"https://github.com/zhuyali/feedit_chrome\" target=\"_blank\" rel=\"external\">Chrome插件</a>，<a href=\"https://github.com/zhuyali/Feedit_android\" target=\"_blank\" rel=\"external\">Android端</a>，<a href=\"https://github.com/zhuyali/feedit_iOS\" target=\"_blank\" rel=\"external\">iOS端</a>，<a href=\"https://github.com/zhuyali/feedit\" target=\"_blank\" rel=\"external\">服务端</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://zhuyali.github.io/imusic/assets/images/Music-icon.png\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/imusic/\" target=\"_blank\" rel=\"external\">imusic</a><div class=\"brief\">一款本地音乐播放器，还有对应的<a href=\"https://github.com/zhuyali/imusic-react\" target=\"_blank\" rel=\"external\"> React 版本</a>和<a href=\"https://github.com/zhuyali/imusic-vue\" target=\"_blank\" rel=\"external\"> Vue 版本</a>。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342177506&di=e9ed8180b3301d6b23e6668275bd4fa8&imgtype=0&src=http%3A%2F%2Fimg.25pp.com%2Fuploadfile%2Fsoft%2Fimages%2F2014%2F0910%2F20140910113414610.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/todoList/\" target=\"_blank\" rel=\"external\">todoList</a><div class=\"brief\">习惯记 todoList 的福音，可以帮助我合理规划时间。</div></div></div><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515342648992&di=bec0e85fd3b55e2ceb8a99ba04174e97&imgtype=0&src=http%3A%2F%2Fis5.mzstatic.com%2Fimage%2Fthumb%2FPurple122%2Fv4%2F34%2F95%2F80%2F34958089-1d33-a766-84f8-f060a85728ca%2Fsource%2F512x512bb.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/training/snake/index.html\" target=\"_blank\" rel=\"external\">贪吃蛇</a><div class=\"brief\">在线版贪吃蛇游戏，可以自定义地图大小哦~</div></div></div>\n\n<div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=554385299,1198250608&fm=27&gp=0.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/Cellular-Automation/\" target=\"_blank\" rel=\"external\">细胞自动机</a><div class=\"brief\">在线版细胞自动机，难度虽然不大，不过还是蛮好玩的~</div></div></div></div>\n\n<ul>\n<li><h4 id=\"组件类\"><a href=\"#组件类\" class=\"headerlink\" title=\"组件类\"></a>组件类</h4></li>\n</ul>\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515343144597&di=a1b3eb4811563e8f64117498d9b502c3&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F19%2F03%2F20%2F1656ece7cf410a9.jpg\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-tree/\" target=\"_blank\" rel=\"external\">d3-tree</a><div class=\"brief\">用于树状结构的生成，可带有图片和文字。该组件被 Macaca Reporter 项目使用。</div></div></div></div>\n\n<ul>\n<li><h4 id=\"文档类\"><a href=\"#文档类\" class=\"headerlink\" title=\"文档类\"></a>文档类</h4></li>\n</ul>\n<div class=\"works\"><div class=\"work\"><img class=\"icon\" style=\"display: inline!important;\" src=\"https://avatars1.githubusercontent.com/u/1562726?s=200&v=4\"><div class=\"intro\"><a class=\"title\" href=\"https://zhuyali.github.io/d3-doc/\" target=\"_blank\" rel=\"external\">d3-doc</a><div class=\"brief\">d3.js文档翻译，可视化工作者可以借鉴参考，主要是业余时间进行翻译，未完待续~</div></div></div></div>\n"}],"Post":[{"title":"CSS魔法篇之元素居中","date":"2017-11-15T10:41:31.000Z","_content":"\n### 水平居中\n\n#### inline 或者 inline-* 元素\n\n其父元素为块级元素，使用 text-align: center; 属性居中。\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <span class=\"child\">child</span>\n</div>\n```\n\nCSS代码如下：\n```\n.parent {\n  text-align: center;\n}\n```\n\n#### 块级元素\n\n一个块级元素包含在另一个块级元素中，通过设定子块级元素的 width，margin-left: auto; 和 margin-right: auto; 来进行元素居中。原理是：块级元素所有的水平属性加在一起必须为元素包含块（这里就是指父元素）的宽度。默认情况下元素宽度为 auto，margin 为 0，块级子元素的宽度会充满其父元素。当设置 margin-left 和 margin-right 为 auto 时，再加上默认的 width 为 auto，此时元素与默认情况下表现一致。当同时设定了元素宽度为特定值和左右外边距为 auto 时，元素的左右外边距会设置为相同的长度以填充满父元素的宽度，就会使得元素在其父元素居中。（水平属性有：margin-left，border-left，padding-left，width，padding-right，border-right，margin-right）\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\n\nCSS代码如下：\n```\n.child {\n  width: 50px;\n  margin: 0 auto;\n}\n```\n\n#### 多个块级元素\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child1</div>\n  <div class=\"child\">child2</div>\n  <div class=\"child\">child3</div>\n</div>\n```\n\n- ##### 多个块级元素在一行居中\n\n  - 通过调节 display 进行居中\n\n    大家都知道，默认情况下块级元素的前后都是要换行的。这里我们要将多个块级元素放在一行，所以要设置块级元素的 display: inline-block; 然后通过设置其父元素的 text-align: center; 就可以完成居中。\n\n    CSS代码如下：\n    ```\n    .parent {\n      text-align: center;\n    }\n    .child {\n      display: inline-block;\n    }\n    ```\n\n  - 使用 flex 布局\n    \n    CSS代码如下：\n    ```\n    .parent {\n      display: flex;\n      justify-content: center;\n    }\n    ```\n\n- ##### 多个块级元素在不同行分别居中\n\n  与上述块级元素的缩进同理\n\n    CSS代码如下：\n    ```\n    .child {\n      width: 50px;\n      margin: 0 auto;\n    }\n    ```\n\n### 垂直居中\n\n#### inline 或者 inline-* 元素\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <span class=\"child\">child</span>\n</div>\n```\n\n- 使用 line-height 属性\n\n  将元素的行高设置为与父元素的高度一致。原理是 lineheight - fontsize 能够得到行间距，行间距会分为两半分别应用到内容区的顶部和底部，从而使得元素居中。\n\n  CSS代码如下：\n  ```\n  .parent {\n    width: 100px;\n    height: 100px;  \n  }\n  .child {\n    line-height: 100px;\n  }\n  ```\n\n- 使用 vertical-align 属性\n\n  CSS代码如下：\n  ```\n  .parent {\n    width: 100px;\n    height: 100px;\n    display: table-cell;\n    vertical-align: middle;\n  }\n  ```\n\n#### 块级元素\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\n\n- 元素高度已知\n\n  将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的一半，就能达到居中的效果。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;;\n    height: 30px;\n    top: 50%;\n    margin-top: -15px;\n  }\n  ```\n\n- 元素高度未知\n\n  将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的 50%，就能达到居中的效果。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;;\n    height: 30px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  ```\n\n- 使用 flex 布局\n\n  CSS代码如下：\n  ```\n  .parent {\n    display: flex;\n    height: 100px;\n    align-items: center;\n  }\n  ```\n\n### 水平居中 + 垂直居中\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\n\n- 元素宽度和高度都已知\n\n  将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的一半（本例中是 15px），向左移自身宽度的一半（本例中是 25px）。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;\n    width: 50px;\n    height: 30px;\n    left: 50%;\n    top: 50%;\n    margin-top: -15px;\n    margin-left: -25px;\n  }\n```\n\n- 元素宽度或高度未知\n\n  将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的 50%，向左移自身宽度的 50%。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n  ```\n\n- 使用 flex 布局\n\n  CSS代码如下：\n  ```\n  .parent {\n    height: 100px;\n    width: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  ```","source":"_posts/CSS居中定位的魔法.md","raw":"---\ntitle: CSS魔法篇之元素居中\ndate: 2017-11-15 18:41:31\ntags:\n---\n\n### 水平居中\n\n#### inline 或者 inline-* 元素\n\n其父元素为块级元素，使用 text-align: center; 属性居中。\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <span class=\"child\">child</span>\n</div>\n```\n\nCSS代码如下：\n```\n.parent {\n  text-align: center;\n}\n```\n\n#### 块级元素\n\n一个块级元素包含在另一个块级元素中，通过设定子块级元素的 width，margin-left: auto; 和 margin-right: auto; 来进行元素居中。原理是：块级元素所有的水平属性加在一起必须为元素包含块（这里就是指父元素）的宽度。默认情况下元素宽度为 auto，margin 为 0，块级子元素的宽度会充满其父元素。当设置 margin-left 和 margin-right 为 auto 时，再加上默认的 width 为 auto，此时元素与默认情况下表现一致。当同时设定了元素宽度为特定值和左右外边距为 auto 时，元素的左右外边距会设置为相同的长度以填充满父元素的宽度，就会使得元素在其父元素居中。（水平属性有：margin-left，border-left，padding-left，width，padding-right，border-right，margin-right）\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\n\nCSS代码如下：\n```\n.child {\n  width: 50px;\n  margin: 0 auto;\n}\n```\n\n#### 多个块级元素\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child1</div>\n  <div class=\"child\">child2</div>\n  <div class=\"child\">child3</div>\n</div>\n```\n\n- ##### 多个块级元素在一行居中\n\n  - 通过调节 display 进行居中\n\n    大家都知道，默认情况下块级元素的前后都是要换行的。这里我们要将多个块级元素放在一行，所以要设置块级元素的 display: inline-block; 然后通过设置其父元素的 text-align: center; 就可以完成居中。\n\n    CSS代码如下：\n    ```\n    .parent {\n      text-align: center;\n    }\n    .child {\n      display: inline-block;\n    }\n    ```\n\n  - 使用 flex 布局\n    \n    CSS代码如下：\n    ```\n    .parent {\n      display: flex;\n      justify-content: center;\n    }\n    ```\n\n- ##### 多个块级元素在不同行分别居中\n\n  与上述块级元素的缩进同理\n\n    CSS代码如下：\n    ```\n    .child {\n      width: 50px;\n      margin: 0 auto;\n    }\n    ```\n\n### 垂直居中\n\n#### inline 或者 inline-* 元素\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <span class=\"child\">child</span>\n</div>\n```\n\n- 使用 line-height 属性\n\n  将元素的行高设置为与父元素的高度一致。原理是 lineheight - fontsize 能够得到行间距，行间距会分为两半分别应用到内容区的顶部和底部，从而使得元素居中。\n\n  CSS代码如下：\n  ```\n  .parent {\n    width: 100px;\n    height: 100px;  \n  }\n  .child {\n    line-height: 100px;\n  }\n  ```\n\n- 使用 vertical-align 属性\n\n  CSS代码如下：\n  ```\n  .parent {\n    width: 100px;\n    height: 100px;\n    display: table-cell;\n    vertical-align: middle;\n  }\n  ```\n\n#### 块级元素\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\n\n- 元素高度已知\n\n  将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的一半，就能达到居中的效果。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;;\n    height: 30px;\n    top: 50%;\n    margin-top: -15px;\n  }\n  ```\n\n- 元素高度未知\n\n  将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的 50%，就能达到居中的效果。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;;\n    height: 30px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  ```\n\n- 使用 flex 布局\n\n  CSS代码如下：\n  ```\n  .parent {\n    display: flex;\n    height: 100px;\n    align-items: center;\n  }\n  ```\n\n### 水平居中 + 垂直居中\n\nHTML代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\n\n- 元素宽度和高度都已知\n\n  将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的一半（本例中是 15px），向左移自身宽度的一半（本例中是 25px）。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;\n    width: 50px;\n    height: 30px;\n    left: 50%;\n    top: 50%;\n    margin-top: -15px;\n    margin-left: -25px;\n  }\n```\n\n- 元素宽度或高度未知\n\n  将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的 50%，向左移自身宽度的 50%。\n\n  CSS代码如下：\n  ```\n  .parent {\n    position: relative;\n    height: 100px;\n  }\n  .child {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n  ```\n\n- 使用 flex 布局\n\n  CSS代码如下：\n  ```\n  .parent {\n    height: 100px;\n    width: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  ```","slug":"CSS居中定位的魔法","published":1,"updated":"2018-01-31T05:43:59.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmcw0000vxslto56dzis","content":"<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><h4 id=\"inline-或者-inline-元素\"><a href=\"#inline-或者-inline-元素\" class=\"headerlink\" title=\"inline 或者 inline-* 元素\"></a>inline 或者 inline-* 元素</h4><p>其父元素为块级元素，使用 text-align: center; 属性居中。</p>\n<p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;child&quot;&gt;child&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h4><p>一个块级元素包含在另一个块级元素中，通过设定子块级元素的 width，margin-left: auto; 和 margin-right: auto; 来进行元素居中。原理是：块级元素所有的水平属性加在一起必须为元素包含块（这里就是指父元素）的宽度。默认情况下元素宽度为 auto，margin 为 0，块级子元素的宽度会充满其父元素。当设置 margin-left 和 margin-right 为 auto 时，再加上默认的 width 为 auto，此时元素与默认情况下表现一致。当同时设定了元素宽度为特定值和左右外边距为 auto 时，元素的左右外边距会设置为相同的长度以填充满父元素的宽度，就会使得元素在其父元素居中。（水平属性有：margin-left，border-left，padding-left，width，padding-right，border-right，margin-right）</p>\n<p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 50px;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个块级元素\"><a href=\"#多个块级元素\" class=\"headerlink\" title=\"多个块级元素\"></a>多个块级元素</h4><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child1&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child2&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child3&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"多个块级元素在一行居中\"><a href=\"#多个块级元素在一行居中\" class=\"headerlink\" title=\"多个块级元素在一行居中\"></a>多个块级元素在一行居中</h5><ul>\n<li><p>通过调节 display 进行居中</p>\n<p>大家都知道，默认情况下块级元素的前后都是要换行的。这里我们要将多个块级元素放在一行，所以要设置块级元素的 display: inline-block; 然后通过设置其父元素的 text-align: center; 就可以完成居中。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h5 id=\"多个块级元素在不同行分别居中\"><a href=\"#多个块级元素在不同行分别居中\" class=\"headerlink\" title=\"多个块级元素在不同行分别居中\"></a>多个块级元素在不同行分别居中</h5><p>与上述块级元素的缩进同理</p>\n<p>  CSS代码如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 50px;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"inline-或者-inline-元素-1\"><a href=\"#inline-或者-inline-元素-1\" class=\"headerlink\" title=\"inline 或者 inline-* 元素\"></a>inline 或者 inline-* 元素</h4><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;child&quot;&gt;child&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>使用 line-height 属性</p>\n<p>将元素的行高设置为与父元素的高度一致。原理是 lineheight - fontsize 能够得到行间距，行间距会分为两半分别应用到内容区的顶部和底部，从而使得元素居中。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  line-height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 vertical-align 属性</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  display: table-cell;</span><br><span class=\"line\">  vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"块级元素-1\"><a href=\"#块级元素-1\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h4><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>元素高度已知</p>\n<p>将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的一半，就能达到居中的效果。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;;</span><br><span class=\"line\">  height: 30px;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  margin-top: -15px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>元素高度未知</p>\n<p>将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的 50%，就能达到居中的效果。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;;</span><br><span class=\"line\">  height: 30px;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  transform: translateY(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"水平居中-垂直居中\"><a href=\"#水平居中-垂直居中\" class=\"headerlink\" title=\"水平居中 + 垂直居中\"></a>水平居中 + 垂直居中</h3><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>元素宽度和高度都已知</p>\n<p>将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的一半（本例中是 15px），向左移自身宽度的一半（本例中是 25px）。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  width: 50px;</span><br><span class=\"line\">  height: 30px;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  margin-top: -15px;</span><br><span class=\"line\">  margin-left: -25px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>元素宽度或高度未知</p>\n<p>将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的 50%，向左移自身宽度的 50%。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  transform: translate(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><h4 id=\"inline-或者-inline-元素\"><a href=\"#inline-或者-inline-元素\" class=\"headerlink\" title=\"inline 或者 inline-* 元素\"></a>inline 或者 inline-* 元素</h4><p>其父元素为块级元素，使用 text-align: center; 属性居中。</p>\n<p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;child&quot;&gt;child&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h4><p>一个块级元素包含在另一个块级元素中，通过设定子块级元素的 width，margin-left: auto; 和 margin-right: auto; 来进行元素居中。原理是：块级元素所有的水平属性加在一起必须为元素包含块（这里就是指父元素）的宽度。默认情况下元素宽度为 auto，margin 为 0，块级子元素的宽度会充满其父元素。当设置 margin-left 和 margin-right 为 auto 时，再加上默认的 width 为 auto，此时元素与默认情况下表现一致。当同时设定了元素宽度为特定值和左右外边距为 auto 时，元素的左右外边距会设置为相同的长度以填充满父元素的宽度，就会使得元素在其父元素居中。（水平属性有：margin-left，border-left，padding-left，width，padding-right，border-right，margin-right）</p>\n<p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 50px;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个块级元素\"><a href=\"#多个块级元素\" class=\"headerlink\" title=\"多个块级元素\"></a>多个块级元素</h4><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child1&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child2&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child3&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"多个块级元素在一行居中\"><a href=\"#多个块级元素在一行居中\" class=\"headerlink\" title=\"多个块级元素在一行居中\"></a>多个块级元素在一行居中</h5><ul>\n<li><p>通过调节 display 进行居中</p>\n<p>大家都知道，默认情况下块级元素的前后都是要换行的。这里我们要将多个块级元素放在一行，所以要设置块级元素的 display: inline-block; 然后通过设置其父元素的 text-align: center; 就可以完成居中。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h5 id=\"多个块级元素在不同行分别居中\"><a href=\"#多个块级元素在不同行分别居中\" class=\"headerlink\" title=\"多个块级元素在不同行分别居中\"></a>多个块级元素在不同行分别居中</h5><p>与上述块级元素的缩进同理</p>\n<p>  CSS代码如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 50px;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"inline-或者-inline-元素-1\"><a href=\"#inline-或者-inline-元素-1\" class=\"headerlink\" title=\"inline 或者 inline-* 元素\"></a>inline 或者 inline-* 元素</h4><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;child&quot;&gt;child&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>使用 line-height 属性</p>\n<p>将元素的行高设置为与父元素的高度一致。原理是 lineheight - fontsize 能够得到行间距，行间距会分为两半分别应用到内容区的顶部和底部，从而使得元素居中。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  line-height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 vertical-align 属性</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  display: table-cell;</span><br><span class=\"line\">  vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"块级元素-1\"><a href=\"#块级元素-1\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h4><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>元素高度已知</p>\n<p>将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的一半，就能达到居中的效果。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;;</span><br><span class=\"line\">  height: 30px;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  margin-top: -15px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>元素高度未知</p>\n<p>将父元素设为相对定位，将子元素设为绝对定位，这是因为绝对定位元素的包含块是最近的 position 值不为 static 的祖先元素。设置完元素的定位之后，就可以保证子元素以父元素为基准进行定位的，此时将子元素下移父元素高度的 50% 再上移自身高度的 50%，就能达到居中的效果。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;;</span><br><span class=\"line\">  height: 30px;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  transform: translateY(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"水平居中-垂直居中\"><a href=\"#水平居中-垂直居中\" class=\"headerlink\" title=\"水平居中 + 垂直居中\"></a>水平居中 + 垂直居中</h3><p>HTML代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>元素宽度和高度都已知</p>\n<p>将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的一半（本例中是 15px），向左移自身宽度的一半（本例中是 25px）。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  width: 50px;</span><br><span class=\"line\">  height: 30px;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  margin-top: -15px;</span><br><span class=\"line\">  margin-left: -25px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>元素宽度或高度未知</p>\n<p>将元素相对父元素向下移动父元素高度的 50%，向右移动父元素宽度的 50%，然后再将元素向上移自身高度的 50%，向左移自身宽度的 50%。</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  transform: translate(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"CSS魔法篇之布局实践","date":"2018-03-07T08:50:23.000Z","_content":"\n### 两列布局\n　　HTML 代码如下所示(假设它们的高度是确定的)：\n```\n<div class=\"parent\">\n  <div class=\"aside\"></div>\n  <div class=\"content\"></div>\n</div>\n```\n\n#### 一侧定宽，一侧自适应\n　　下面的示例是左侧定宽，右侧自适应的情况。\n1. 方式一：使用 flex 布局\n```\n.parent {\n  display: flex;\n}\n.aside {\n  width: 100px;\n}\n.content {\n  flex: 1;\n}\n```\n2. 方式二：使用视口单位 vw\n```\n.aside {\n  width: 100px;\n  float: left;\n}\n.content {\n  float: left;\n  width: calc(100vw - 100px);\n}\n```\n3. 方式三：利用 BFC 特性第三条和第五条，详见[CSS魔法篇之清除浮动](https://zhuyali.github.io/2018/01/31/CSS%E9%AD%94%E6%B3%95%E7%AF%87%E4%B9%8B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/)\n```\n.aside {\n  width: 100px;\n  float: left;\n}\n.content {\n  overflow: hidden;\n}\n```\n4. 利用 width 默认为 auto 结合 margin\n```\n.aside {\n  width: 100px;\n  float: left;\n}\n.content {\n  margin-left: 100px;\n}\n```\n5. 使用绝对定位\n```\n.parent {\n  position: relative;\n}\n.aside {\n  width: 100px;\n}\n.content {\n  position: absolute;\n  left: 100px;\n  right: 0;\n  top: 0;\n}\n```\n\n### 三列布局\n　　HTML 代码如下(假设它们的高度是确定的)：\n```\n<div class=\"parent\">\n  <div class=\"left\"></div>\n  <div class=\"content\"></div>\n  <div class=\"right\"></div>\n</div>\n```\n\n#### 两侧定宽，中间自适应\n1. 使用 flex 布局\n```\n.parent {\n  display: flex;\n}\n.left {\n  width: 100px;\n}\n.content {\n  flex: 1;\n}\n.right {\n  width: 100px;\n}\n```\n2. 绝对定位和浮动\n```\n.parent {\n  position: relative;\n}\n.left {\n  float: left;\n  width: 100px;\n}\n.content {\n  position: absolute;\n  left: 100px;\n  right: 100px;\n  top: 0;\n}\n.right {\n  float: right;\n  width: 100px;\n}\n```\n3. 利用负外边距和浮动\n```\n.parent {\n  overflow-x: hidden;\n}\n.left {\n  float: left;\n  width: 100px;\n}\n.content {\n  float: left;\n  width: 100%;\n  margin-right: -200px;\n}\n.right {\n  float: right;\n  width: 100px;\n}\n```\n\n#### 三列等分\n1. 等分百分比\n```\n.parent {\n  font-size: 0; // 解决 inline-block 的间隙问题\n}\n.left, .content, .right {\n  display: inline-block;\n  width: 33.333%;\n}\n或者\n.left, .content, .right {\n  float: left;\n  width: 33.333%;\n}\n```\n2. 使用 flex 布局\n```\n.parent {\n  display: flex;\n}\n.left, .content, .right {\n  flex: 1;\n}\n```\n\n### 九宫格布局\n　　HTML 代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\"></div><div class=\"child\"></div><div class=\"child\"></div>\n  <div class=\"child\"></div><div class=\"child\"></div><div class=\"child\"></div>\n  <div class=\"child\"></div><div class=\"child\"></div><div class=\"child\"></div>\n</div>\n```\n1. 使用 flex 布局\n```\n.parent {\n  display: flex;\n  flex-wrap: wrap;\n}\n.child {\n  width: 33.333%;\n  height:33.333%;\n}\n```\n2. 使用浮动实现\n```\n.child {\n  float: left;\n  width: 33.333%;\n  height:33.333%;\n}\n```","source":"_posts/CSS魔法篇之布局实践.md","raw":"---\ntitle: CSS魔法篇之布局实践\ndate: 2018-03-07 16:50:23\ntags:\n---\n\n### 两列布局\n　　HTML 代码如下所示(假设它们的高度是确定的)：\n```\n<div class=\"parent\">\n  <div class=\"aside\"></div>\n  <div class=\"content\"></div>\n</div>\n```\n\n#### 一侧定宽，一侧自适应\n　　下面的示例是左侧定宽，右侧自适应的情况。\n1. 方式一：使用 flex 布局\n```\n.parent {\n  display: flex;\n}\n.aside {\n  width: 100px;\n}\n.content {\n  flex: 1;\n}\n```\n2. 方式二：使用视口单位 vw\n```\n.aside {\n  width: 100px;\n  float: left;\n}\n.content {\n  float: left;\n  width: calc(100vw - 100px);\n}\n```\n3. 方式三：利用 BFC 特性第三条和第五条，详见[CSS魔法篇之清除浮动](https://zhuyali.github.io/2018/01/31/CSS%E9%AD%94%E6%B3%95%E7%AF%87%E4%B9%8B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/)\n```\n.aside {\n  width: 100px;\n  float: left;\n}\n.content {\n  overflow: hidden;\n}\n```\n4. 利用 width 默认为 auto 结合 margin\n```\n.aside {\n  width: 100px;\n  float: left;\n}\n.content {\n  margin-left: 100px;\n}\n```\n5. 使用绝对定位\n```\n.parent {\n  position: relative;\n}\n.aside {\n  width: 100px;\n}\n.content {\n  position: absolute;\n  left: 100px;\n  right: 0;\n  top: 0;\n}\n```\n\n### 三列布局\n　　HTML 代码如下(假设它们的高度是确定的)：\n```\n<div class=\"parent\">\n  <div class=\"left\"></div>\n  <div class=\"content\"></div>\n  <div class=\"right\"></div>\n</div>\n```\n\n#### 两侧定宽，中间自适应\n1. 使用 flex 布局\n```\n.parent {\n  display: flex;\n}\n.left {\n  width: 100px;\n}\n.content {\n  flex: 1;\n}\n.right {\n  width: 100px;\n}\n```\n2. 绝对定位和浮动\n```\n.parent {\n  position: relative;\n}\n.left {\n  float: left;\n  width: 100px;\n}\n.content {\n  position: absolute;\n  left: 100px;\n  right: 100px;\n  top: 0;\n}\n.right {\n  float: right;\n  width: 100px;\n}\n```\n3. 利用负外边距和浮动\n```\n.parent {\n  overflow-x: hidden;\n}\n.left {\n  float: left;\n  width: 100px;\n}\n.content {\n  float: left;\n  width: 100%;\n  margin-right: -200px;\n}\n.right {\n  float: right;\n  width: 100px;\n}\n```\n\n#### 三列等分\n1. 等分百分比\n```\n.parent {\n  font-size: 0; // 解决 inline-block 的间隙问题\n}\n.left, .content, .right {\n  display: inline-block;\n  width: 33.333%;\n}\n或者\n.left, .content, .right {\n  float: left;\n  width: 33.333%;\n}\n```\n2. 使用 flex 布局\n```\n.parent {\n  display: flex;\n}\n.left, .content, .right {\n  flex: 1;\n}\n```\n\n### 九宫格布局\n　　HTML 代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\"></div><div class=\"child\"></div><div class=\"child\"></div>\n  <div class=\"child\"></div><div class=\"child\"></div><div class=\"child\"></div>\n  <div class=\"child\"></div><div class=\"child\"></div><div class=\"child\"></div>\n</div>\n```\n1. 使用 flex 布局\n```\n.parent {\n  display: flex;\n  flex-wrap: wrap;\n}\n.child {\n  width: 33.333%;\n  height:33.333%;\n}\n```\n2. 使用浮动实现\n```\n.child {\n  float: left;\n  width: 33.333%;\n  height:33.333%;\n}\n```","slug":"CSS魔法篇之布局实践","published":1,"updated":"2018-03-07T12:20:35.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmd20002vxsljod4jwcl","content":"<h3 id=\"两列布局\"><a href=\"#两列布局\" class=\"headerlink\" title=\"两列布局\"></a>两列布局</h3><p>　　HTML 代码如下所示(假设它们的高度是确定的)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一侧定宽，一侧自适应\"><a href=\"#一侧定宽，一侧自适应\" class=\"headerlink\" title=\"一侧定宽，一侧自适应\"></a>一侧定宽，一侧自适应</h4><p>　　下面的示例是左侧定宽，右侧自适应的情况。</p>\n<ol>\n<li><p>方式一：使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二：使用视口单位 vw</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: calc(100vw - 100px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式三：利用 BFC 特性第三条和第五条，详见<a href=\"https://zhuyali.github.io/2018/01/31/CSS%E9%AD%94%E6%B3%95%E7%AF%87%E4%B9%8B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/\" target=\"_blank\" rel=\"external\">CSS魔法篇之清除浮动</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 width 默认为 auto 结合 margin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  margin-left: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用绝对定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 100px;</span><br><span class=\"line\">  right: 0;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"三列布局\"><a href=\"#三列布局\" class=\"headerlink\" title=\"三列布局\"></a>三列布局</h3><p>　　HTML 代码如下(假设它们的高度是确定的)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"两侧定宽，中间自适应\"><a href=\"#两侧定宽，中间自适应\" class=\"headerlink\" title=\"两侧定宽，中间自适应\"></a>两侧定宽，中间自适应</h4><ol>\n<li><p>使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绝对定位和浮动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 100px;</span><br><span class=\"line\">  right: 100px;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用负外边距和浮动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  margin-right: -200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"三列等分\"><a href=\"#三列等分\" class=\"headerlink\" title=\"三列等分\"></a>三列等分</h4><ol>\n<li><p>等分百分比</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  font-size: 0; // 解决 inline-block 的间隙问题</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left, .content, .right &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">.left, .content, .right &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left, .content, .right &#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"九宫格布局\"><a href=\"#九宫格布局\" class=\"headerlink\" title=\"九宫格布局\"></a>九宫格布局</h3><p>　　HTML 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-wrap: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">  height:33.333%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用浮动实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">  height:33.333%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"两列布局\"><a href=\"#两列布局\" class=\"headerlink\" title=\"两列布局\"></a>两列布局</h3><p>　　HTML 代码如下所示(假设它们的高度是确定的)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一侧定宽，一侧自适应\"><a href=\"#一侧定宽，一侧自适应\" class=\"headerlink\" title=\"一侧定宽，一侧自适应\"></a>一侧定宽，一侧自适应</h4><p>　　下面的示例是左侧定宽，右侧自适应的情况。</p>\n<ol>\n<li><p>方式一：使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二：使用视口单位 vw</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: calc(100vw - 100px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式三：利用 BFC 特性第三条和第五条，详见<a href=\"https://zhuyali.github.io/2018/01/31/CSS%E9%AD%94%E6%B3%95%E7%AF%87%E4%B9%8B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/\" target=\"_blank\" rel=\"external\">CSS魔法篇之清除浮动</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 width 默认为 auto 结合 margin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  margin-left: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用绝对定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.aside &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 100px;</span><br><span class=\"line\">  right: 0;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"三列布局\"><a href=\"#三列布局\" class=\"headerlink\" title=\"三列布局\"></a>三列布局</h3><p>　　HTML 代码如下(假设它们的高度是确定的)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"两侧定宽，中间自适应\"><a href=\"#两侧定宽，中间自适应\" class=\"headerlink\" title=\"两侧定宽，中间自适应\"></a>两侧定宽，中间自适应</h4><ol>\n<li><p>使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绝对定位和浮动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 100px;</span><br><span class=\"line\">  right: 100px;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用负外边距和浮动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  margin-right: -200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"三列等分\"><a href=\"#三列等分\" class=\"headerlink\" title=\"三列等分\"></a>三列等分</h4><ol>\n<li><p>等分百分比</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  font-size: 0; // 解决 inline-block 的间隙问题</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left, .content, .right &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">.left, .content, .right &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left, .content, .right &#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"九宫格布局\"><a href=\"#九宫格布局\" class=\"headerlink\" title=\"九宫格布局\"></a>九宫格布局</h3><p>　　HTML 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>使用 flex 布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-wrap: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">  height:33.333%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用浮动实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 33.333%;</span><br><span class=\"line\">  height:33.333%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"CSS魔法篇之flex布局","date":"2018-03-07T03:40:26.000Z","_content":"\n　　Flex 基础布局可以参考阮老师的文章，写的非常的详尽，并且配备了大量的示例。这里主要聊一聊 flex 的一些注意点。\n### 轴对齐\n　　在接下来的描述中，默认主轴为水平轴，交叉轴为垂直轴，并且书写模式为从左到右。与主轴对齐相关的属性是 justify-content，该属性设置于 flex 容器上。与交叉轴对齐相关的属性有 align-items，align-content 和 align-self，其中前两个设置于 flex 容器上，最后一个设置于 flex 项目上。justify-content 和 align-content 是对应关系，前者对应于主轴每列元素间的空间分配，后者对应于交叉轴每行元素间的空间分配，它们可取的属性值也基本相同，包括 flex-start(轴起始位置)，flex-end(轴终止位置)，center(居中)，space-between(项目之间平均留白)，space-around(项目前后平均留白)，还有一个属性值 stretch 是 align-content 特有的。\n　　其实不难发现，justify-content 是将 flex 项目当成一个组来做对齐处理，那么如果单个 flex 项目或者多个 flex 项目想和其它 flex 项目分离的话，可以通过 margin 来实现。考虑下面图片的情况，我有三个项目在左边两个在右边，就可以通过给项目 d 设置 `margin-left: auto;`来实现该效果。它利用的原理是水平方向上的 auto margin 会尽量占据多余的空间以撑开包含块的宽度。\n![](https://mdn.mozillademos.org/files/15633/align7.png)\n\n### 冲突的元素设置\n1. 在 flex 项目上设置`float: left/right;`没有效果\n2. 在 flex 项目上设置`display: inline-block;`没有效果\n3. 在 flex 项目上设置`display: table-;`没有效果\n\n### 项目尺寸和伸缩性\n　　flex 项目最终展现出的尺寸大小与三个属性有关：flex-grow，flex-shrink 和 flex-basis。flex 项目之所以能够自由的伸缩依赖于 flex 容器的正负自由空间，可以看下图理解：\n![](https://mdn.mozillademos.org/files/15654/Basics7.png)　　在上图中，容器为 500 像素宽，每个项目为 100 像素宽，剩余了 200 像素的 positive free space。\n![](https://mdn.mozillademos.org/files/15655/ratios1.png)　　在上图中，容器为 500 像素宽，每个项目为 200 像素宽，那么项目的总宽度超过了容器宽度，就有了 100 像素的 negative free space。\n　　flex-grow 定义了项目如何扩张，它会按照比例分配总的可用空间给各个项目。在以下两张图代表的例子中，设置各个项目的`flex-basis: auto;`让它们自动调整大小，此时总的可用空间就是容器的宽度减去各个项目的宽度，也就是图中的阴影区域。如果我们相对这篇阴影区域在每个项目之间进行平均分配，就设置每个项目的`flex-grow: 1;`即可。其实对于 flex-grow 的设置不一定非要是整数，设置该值的主要用途是用作比例，因而可以任意设置该值，只要保证它们的比例为 1：1：1 即可。（最后在强调一点，flex-grow 的比例并不是项目的大小比例，而是对于剩余的空间分配的比例）\n![](https://mdn.mozillademos.org/files/15656/ratios2.png)![](https://mdn.mozillademos.org/files/15657/ratios3.png)　　flex-shrink 定义了项目如何收缩，用途类似于 flex-grow，这里不详细说明。\n　　flex-basis 定义了项目的基础尺寸，它的初始值为 auto，如果你给项目设置了宽度，那么基础尺寸就为该宽度；如果项目大小没有设置，那么基础尺寸就会恰好包含其内容。空间分配时，如果你想要完全忽略该项目的尺寸，可以设置该属性值为 0，这相当于告诉 flexbox 该项目的所有空间都可以抢占，并按比例分享。\n\n### 参考资料\n1. [Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n2. [MDN Flex](https://developer.mozilla.org/en-US/docs/Glossary/Flex)","source":"_posts/CSS魔法篇之flex布局.md","raw":"---\ntitle: CSS魔法篇之flex布局\ndate: 2018-03-07 11:40:26\ntags:\n---\n\n　　Flex 基础布局可以参考阮老师的文章，写的非常的详尽，并且配备了大量的示例。这里主要聊一聊 flex 的一些注意点。\n### 轴对齐\n　　在接下来的描述中，默认主轴为水平轴，交叉轴为垂直轴，并且书写模式为从左到右。与主轴对齐相关的属性是 justify-content，该属性设置于 flex 容器上。与交叉轴对齐相关的属性有 align-items，align-content 和 align-self，其中前两个设置于 flex 容器上，最后一个设置于 flex 项目上。justify-content 和 align-content 是对应关系，前者对应于主轴每列元素间的空间分配，后者对应于交叉轴每行元素间的空间分配，它们可取的属性值也基本相同，包括 flex-start(轴起始位置)，flex-end(轴终止位置)，center(居中)，space-between(项目之间平均留白)，space-around(项目前后平均留白)，还有一个属性值 stretch 是 align-content 特有的。\n　　其实不难发现，justify-content 是将 flex 项目当成一个组来做对齐处理，那么如果单个 flex 项目或者多个 flex 项目想和其它 flex 项目分离的话，可以通过 margin 来实现。考虑下面图片的情况，我有三个项目在左边两个在右边，就可以通过给项目 d 设置 `margin-left: auto;`来实现该效果。它利用的原理是水平方向上的 auto margin 会尽量占据多余的空间以撑开包含块的宽度。\n![](https://mdn.mozillademos.org/files/15633/align7.png)\n\n### 冲突的元素设置\n1. 在 flex 项目上设置`float: left/right;`没有效果\n2. 在 flex 项目上设置`display: inline-block;`没有效果\n3. 在 flex 项目上设置`display: table-;`没有效果\n\n### 项目尺寸和伸缩性\n　　flex 项目最终展现出的尺寸大小与三个属性有关：flex-grow，flex-shrink 和 flex-basis。flex 项目之所以能够自由的伸缩依赖于 flex 容器的正负自由空间，可以看下图理解：\n![](https://mdn.mozillademos.org/files/15654/Basics7.png)　　在上图中，容器为 500 像素宽，每个项目为 100 像素宽，剩余了 200 像素的 positive free space。\n![](https://mdn.mozillademos.org/files/15655/ratios1.png)　　在上图中，容器为 500 像素宽，每个项目为 200 像素宽，那么项目的总宽度超过了容器宽度，就有了 100 像素的 negative free space。\n　　flex-grow 定义了项目如何扩张，它会按照比例分配总的可用空间给各个项目。在以下两张图代表的例子中，设置各个项目的`flex-basis: auto;`让它们自动调整大小，此时总的可用空间就是容器的宽度减去各个项目的宽度，也就是图中的阴影区域。如果我们相对这篇阴影区域在每个项目之间进行平均分配，就设置每个项目的`flex-grow: 1;`即可。其实对于 flex-grow 的设置不一定非要是整数，设置该值的主要用途是用作比例，因而可以任意设置该值，只要保证它们的比例为 1：1：1 即可。（最后在强调一点，flex-grow 的比例并不是项目的大小比例，而是对于剩余的空间分配的比例）\n![](https://mdn.mozillademos.org/files/15656/ratios2.png)![](https://mdn.mozillademos.org/files/15657/ratios3.png)　　flex-shrink 定义了项目如何收缩，用途类似于 flex-grow，这里不详细说明。\n　　flex-basis 定义了项目的基础尺寸，它的初始值为 auto，如果你给项目设置了宽度，那么基础尺寸就为该宽度；如果项目大小没有设置，那么基础尺寸就会恰好包含其内容。空间分配时，如果你想要完全忽略该项目的尺寸，可以设置该属性值为 0，这相当于告诉 flexbox 该项目的所有空间都可以抢占，并按比例分享。\n\n### 参考资料\n1. [Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n2. [MDN Flex](https://developer.mozilla.org/en-US/docs/Glossary/Flex)","slug":"CSS魔法篇之flex布局","published":1,"updated":"2018-03-07T09:10:45.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmd70003vxsllnmkl1kd","content":"<p>　　Flex 基础布局可以参考阮老师的文章，写的非常的详尽，并且配备了大量的示例。这里主要聊一聊 flex 的一些注意点。</p>\n<h3 id=\"轴对齐\"><a href=\"#轴对齐\" class=\"headerlink\" title=\"轴对齐\"></a>轴对齐</h3><p>　　在接下来的描述中，默认主轴为水平轴，交叉轴为垂直轴，并且书写模式为从左到右。与主轴对齐相关的属性是 justify-content，该属性设置于 flex 容器上。与交叉轴对齐相关的属性有 align-items，align-content 和 align-self，其中前两个设置于 flex 容器上，最后一个设置于 flex 项目上。justify-content 和 align-content 是对应关系，前者对应于主轴每列元素间的空间分配，后者对应于交叉轴每行元素间的空间分配，它们可取的属性值也基本相同，包括 flex-start(轴起始位置)，flex-end(轴终止位置)，center(居中)，space-between(项目之间平均留白)，space-around(项目前后平均留白)，还有一个属性值 stretch 是 align-content 特有的。<br>　　其实不难发现，justify-content 是将 flex 项目当成一个组来做对齐处理，那么如果单个 flex 项目或者多个 flex 项目想和其它 flex 项目分离的话，可以通过 margin 来实现。考虑下面图片的情况，我有三个项目在左边两个在右边，就可以通过给项目 d 设置 <code>margin-left: auto;</code>来实现该效果。它利用的原理是水平方向上的 auto margin 会尽量占据多余的空间以撑开包含块的宽度。<br><img src=\"https://mdn.mozillademos.org/files/15633/align7.png\" alt=\"\"></p>\n<h3 id=\"冲突的元素设置\"><a href=\"#冲突的元素设置\" class=\"headerlink\" title=\"冲突的元素设置\"></a>冲突的元素设置</h3><ol>\n<li>在 flex 项目上设置<code>float: left/right;</code>没有效果</li>\n<li>在 flex 项目上设置<code>display: inline-block;</code>没有效果</li>\n<li>在 flex 项目上设置<code>display: table-;</code>没有效果</li>\n</ol>\n<h3 id=\"项目尺寸和伸缩性\"><a href=\"#项目尺寸和伸缩性\" class=\"headerlink\" title=\"项目尺寸和伸缩性\"></a>项目尺寸和伸缩性</h3><p>　　flex 项目最终展现出的尺寸大小与三个属性有关：flex-grow，flex-shrink 和 flex-basis。flex 项目之所以能够自由的伸缩依赖于 flex 容器的正负自由空间，可以看下图理解：<br><img src=\"https://mdn.mozillademos.org/files/15654/Basics7.png\" alt=\"\">　　在上图中，容器为 500 像素宽，每个项目为 100 像素宽，剩余了 200 像素的 positive free space。<br><img src=\"https://mdn.mozillademos.org/files/15655/ratios1.png\" alt=\"\">　　在上图中，容器为 500 像素宽，每个项目为 200 像素宽，那么项目的总宽度超过了容器宽度，就有了 100 像素的 negative free space。<br>　　flex-grow 定义了项目如何扩张，它会按照比例分配总的可用空间给各个项目。在以下两张图代表的例子中，设置各个项目的<code>flex-basis: auto;</code>让它们自动调整大小，此时总的可用空间就是容器的宽度减去各个项目的宽度，也就是图中的阴影区域。如果我们相对这篇阴影区域在每个项目之间进行平均分配，就设置每个项目的<code>flex-grow: 1;</code>即可。其实对于 flex-grow 的设置不一定非要是整数，设置该值的主要用途是用作比例，因而可以任意设置该值，只要保证它们的比例为 1：1：1 即可。（最后在强调一点，flex-grow 的比例并不是项目的大小比例，而是对于剩余的空间分配的比例）<br><img src=\"https://mdn.mozillademos.org/files/15656/ratios2.png\" alt=\"\"><img src=\"https://mdn.mozillademos.org/files/15657/ratios3.png\" alt=\"\">　　flex-shrink 定义了项目如何收缩，用途类似于 flex-grow，这里不详细说明。<br>　　flex-basis 定义了项目的基础尺寸，它的初始值为 auto，如果你给项目设置了宽度，那么基础尺寸就为该宽度；如果项目大小没有设置，那么基础尺寸就会恰好包含其内容。空间分配时，如果你想要完全忽略该项目的尺寸，可以设置该属性值为 0，这相当于告诉 flexbox 该项目的所有空间都可以抢占，并按比例分享。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">Flex 布局教程：语法篇</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Flex\" target=\"_blank\" rel=\"external\">MDN Flex</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>　　Flex 基础布局可以参考阮老师的文章，写的非常的详尽，并且配备了大量的示例。这里主要聊一聊 flex 的一些注意点。</p>\n<h3 id=\"轴对齐\"><a href=\"#轴对齐\" class=\"headerlink\" title=\"轴对齐\"></a>轴对齐</h3><p>　　在接下来的描述中，默认主轴为水平轴，交叉轴为垂直轴，并且书写模式为从左到右。与主轴对齐相关的属性是 justify-content，该属性设置于 flex 容器上。与交叉轴对齐相关的属性有 align-items，align-content 和 align-self，其中前两个设置于 flex 容器上，最后一个设置于 flex 项目上。justify-content 和 align-content 是对应关系，前者对应于主轴每列元素间的空间分配，后者对应于交叉轴每行元素间的空间分配，它们可取的属性值也基本相同，包括 flex-start(轴起始位置)，flex-end(轴终止位置)，center(居中)，space-between(项目之间平均留白)，space-around(项目前后平均留白)，还有一个属性值 stretch 是 align-content 特有的。<br>　　其实不难发现，justify-content 是将 flex 项目当成一个组来做对齐处理，那么如果单个 flex 项目或者多个 flex 项目想和其它 flex 项目分离的话，可以通过 margin 来实现。考虑下面图片的情况，我有三个项目在左边两个在右边，就可以通过给项目 d 设置 <code>margin-left: auto;</code>来实现该效果。它利用的原理是水平方向上的 auto margin 会尽量占据多余的空间以撑开包含块的宽度。<br><img src=\"https://mdn.mozillademos.org/files/15633/align7.png\" alt=\"\"></p>\n<h3 id=\"冲突的元素设置\"><a href=\"#冲突的元素设置\" class=\"headerlink\" title=\"冲突的元素设置\"></a>冲突的元素设置</h3><ol>\n<li>在 flex 项目上设置<code>float: left/right;</code>没有效果</li>\n<li>在 flex 项目上设置<code>display: inline-block;</code>没有效果</li>\n<li>在 flex 项目上设置<code>display: table-;</code>没有效果</li>\n</ol>\n<h3 id=\"项目尺寸和伸缩性\"><a href=\"#项目尺寸和伸缩性\" class=\"headerlink\" title=\"项目尺寸和伸缩性\"></a>项目尺寸和伸缩性</h3><p>　　flex 项目最终展现出的尺寸大小与三个属性有关：flex-grow，flex-shrink 和 flex-basis。flex 项目之所以能够自由的伸缩依赖于 flex 容器的正负自由空间，可以看下图理解：<br><img src=\"https://mdn.mozillademos.org/files/15654/Basics7.png\" alt=\"\">　　在上图中，容器为 500 像素宽，每个项目为 100 像素宽，剩余了 200 像素的 positive free space。<br><img src=\"https://mdn.mozillademos.org/files/15655/ratios1.png\" alt=\"\">　　在上图中，容器为 500 像素宽，每个项目为 200 像素宽，那么项目的总宽度超过了容器宽度，就有了 100 像素的 negative free space。<br>　　flex-grow 定义了项目如何扩张，它会按照比例分配总的可用空间给各个项目。在以下两张图代表的例子中，设置各个项目的<code>flex-basis: auto;</code>让它们自动调整大小，此时总的可用空间就是容器的宽度减去各个项目的宽度，也就是图中的阴影区域。如果我们相对这篇阴影区域在每个项目之间进行平均分配，就设置每个项目的<code>flex-grow: 1;</code>即可。其实对于 flex-grow 的设置不一定非要是整数，设置该值的主要用途是用作比例，因而可以任意设置该值，只要保证它们的比例为 1：1：1 即可。（最后在强调一点，flex-grow 的比例并不是项目的大小比例，而是对于剩余的空间分配的比例）<br><img src=\"https://mdn.mozillademos.org/files/15656/ratios2.png\" alt=\"\"><img src=\"https://mdn.mozillademos.org/files/15657/ratios3.png\" alt=\"\">　　flex-shrink 定义了项目如何收缩，用途类似于 flex-grow，这里不详细说明。<br>　　flex-basis 定义了项目的基础尺寸，它的初始值为 auto，如果你给项目设置了宽度，那么基础尺寸就为该宽度；如果项目大小没有设置，那么基础尺寸就会恰好包含其内容。空间分配时，如果你想要完全忽略该项目的尺寸，可以设置该属性值为 0，这相当于告诉 flexbox 该项目的所有空间都可以抢占，并按比例分享。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">Flex 布局教程：语法篇</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Flex\" target=\"_blank\" rel=\"external\">MDN Flex</a></li>\n</ol>\n"},{"title":"CSS魔法篇之清除浮动","date":"2018-01-31T11:59:26.000Z","_content":"\n### BFC\n　　BFC，全称为块级格式化上下文。对内，它是一个独立的渲染区域，只有块级框参与，它规定了内部的块级框如何布局，与这个区域的外部毫不相干；对外，它仍处在流布局中，与其它元素的布局方式无异。通常来说，我们所看到的 HTML 页面就是一个 BFC，该 BFC 由根元素创建，对页面中的所有块级框作用。块级格式化上下文的创建方式诸多，详见：[块格式化上下文](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)。\n\n#### BFC 的特性\n- 由于 BFC 是针对内部的块级框作用的，而块级框本身就具有每个元素会换行的特性，因而可以知道，在 BFC 中，框会一个接一个地被垂直放置，它们的起点是包含块的顶部\n- 两个兄弟框之间的垂直距离取决于 margin 属性，处于同一个 BFC 中相邻的块级元素会发生外边距合并\n- 在 BFC 中，每一个块框的左边距会与包含块的左边接触，即使存在浮动也是如此\n- 计算 BFC 的高度时，浮动元素也会参与计算\n- BFC 的区域不会与浮动元素重叠\n\n### 边界塌陷\n　　在 CSS 中，有一个常见的问题就是当子元素设为浮动后，父元素的高度也随之变为 0，但这往往并不是我们想要的结果。\nHTML 代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\nCSS 代码如下：\n```\n.child {\n  float: left;\n}\n```\n\n### 清除浮动\n　　为了解决边界塌陷的问题，可以借助上述提到的*在计算 BFC 的高度时，浮动元素也会参与计算*的思想。利用 BFC 的解决方案有如下：\n1. 使用 overflow 属性\n   ```\n   .parent {\n     overflow: hidden;\n   }\n   ```\n   通过将父元素的 overflow 属性设为非 visible 的值，即可创建一个 BFC 包含子浮动元素。\n2. 浮动父元素\n   ```\n   .parent {\n     float: left;\n   }\n   ```\n   通过浮动父元素，能够创建新的 BFC。但是此方案的隐患是可能造成新的浮动问题。\n\n　　除了利用 BFC 的思想之外，还有一些其它解决方案：\n1. 直接设置父元素高度\n   ```\n   .parent {\n     height: 100px;\n   }\n   ```\n   该方法简单粗暴，适合于子元素高度固定且已知的情况。只有当子元素高度<=100时，上面的代码才能完全包含子元素。\n2. 结尾处加空 div 或者空 br 标签，设置其 CSS 属性 clear\n   修改 HTML 代码为：\n   ```\n   <div class=\"parent\">\n     <div class=\"child\">child</div>\n     <!--div class=\"clearfloat\"></div--> //方案1：添加空 div 标签\n     <!--br class=\"clearfloat\" /--> //方案2：添加空 br 标签\n   </div>\n   ```\n   CSS 代码为：\n   ```\n   .clearfloat {\n     clear: both;\n   }\n   ```\n   该方法利用了 clear 属性。根据 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear)，clear 属性指定一个元素是否可以在它之前的浮动元素旁边，或者必须向下移动。在本例中使用 `clear: both`使得该元素左右都不能有浮动的元素，那么它就会向下移动，来撑开父元素。\n3. 使用伪元素 ::after\n   ```\n   .parent::after {\n     display: block;\n     clear: both;\n     content: '';\n   }\n   ```\n   与上面的方案类似，该元素不过是拿 ::after 伪元素替代了`<div class=\"clearfloat\"></div>`。这里需要注意的一点是伪元素默认是行内元素，所以这里通过 display 属性将其改为块级元素。\n\n### 参考资料\n1. [详说清除浮动](http://kayosite.com/remove-floating-style-in-detail.html)\n2. [常规流之块级格式化上下文（Block Formatting Contexts）](https://www.cnblogs.com/rexD/p/4597380.html)\n","source":"_posts/CSS魔法篇之清除浮动.md","raw":"---\ntitle: CSS魔法篇之清除浮动\ndate: 2018-01-31 19:59:26\ntags:\n---\n\n### BFC\n　　BFC，全称为块级格式化上下文。对内，它是一个独立的渲染区域，只有块级框参与，它规定了内部的块级框如何布局，与这个区域的外部毫不相干；对外，它仍处在流布局中，与其它元素的布局方式无异。通常来说，我们所看到的 HTML 页面就是一个 BFC，该 BFC 由根元素创建，对页面中的所有块级框作用。块级格式化上下文的创建方式诸多，详见：[块格式化上下文](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)。\n\n#### BFC 的特性\n- 由于 BFC 是针对内部的块级框作用的，而块级框本身就具有每个元素会换行的特性，因而可以知道，在 BFC 中，框会一个接一个地被垂直放置，它们的起点是包含块的顶部\n- 两个兄弟框之间的垂直距离取决于 margin 属性，处于同一个 BFC 中相邻的块级元素会发生外边距合并\n- 在 BFC 中，每一个块框的左边距会与包含块的左边接触，即使存在浮动也是如此\n- 计算 BFC 的高度时，浮动元素也会参与计算\n- BFC 的区域不会与浮动元素重叠\n\n### 边界塌陷\n　　在 CSS 中，有一个常见的问题就是当子元素设为浮动后，父元素的高度也随之变为 0，但这往往并不是我们想要的结果。\nHTML 代码如下：\n```\n<div class=\"parent\">\n  <div class=\"child\">child</div>\n</div>\n```\nCSS 代码如下：\n```\n.child {\n  float: left;\n}\n```\n\n### 清除浮动\n　　为了解决边界塌陷的问题，可以借助上述提到的*在计算 BFC 的高度时，浮动元素也会参与计算*的思想。利用 BFC 的解决方案有如下：\n1. 使用 overflow 属性\n   ```\n   .parent {\n     overflow: hidden;\n   }\n   ```\n   通过将父元素的 overflow 属性设为非 visible 的值，即可创建一个 BFC 包含子浮动元素。\n2. 浮动父元素\n   ```\n   .parent {\n     float: left;\n   }\n   ```\n   通过浮动父元素，能够创建新的 BFC。但是此方案的隐患是可能造成新的浮动问题。\n\n　　除了利用 BFC 的思想之外，还有一些其它解决方案：\n1. 直接设置父元素高度\n   ```\n   .parent {\n     height: 100px;\n   }\n   ```\n   该方法简单粗暴，适合于子元素高度固定且已知的情况。只有当子元素高度<=100时，上面的代码才能完全包含子元素。\n2. 结尾处加空 div 或者空 br 标签，设置其 CSS 属性 clear\n   修改 HTML 代码为：\n   ```\n   <div class=\"parent\">\n     <div class=\"child\">child</div>\n     <!--div class=\"clearfloat\"></div--> //方案1：添加空 div 标签\n     <!--br class=\"clearfloat\" /--> //方案2：添加空 br 标签\n   </div>\n   ```\n   CSS 代码为：\n   ```\n   .clearfloat {\n     clear: both;\n   }\n   ```\n   该方法利用了 clear 属性。根据 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear)，clear 属性指定一个元素是否可以在它之前的浮动元素旁边，或者必须向下移动。在本例中使用 `clear: both`使得该元素左右都不能有浮动的元素，那么它就会向下移动，来撑开父元素。\n3. 使用伪元素 ::after\n   ```\n   .parent::after {\n     display: block;\n     clear: both;\n     content: '';\n   }\n   ```\n   与上面的方案类似，该元素不过是拿 ::after 伪元素替代了`<div class=\"clearfloat\"></div>`。这里需要注意的一点是伪元素默认是行内元素，所以这里通过 display 属性将其改为块级元素。\n\n### 参考资料\n1. [详说清除浮动](http://kayosite.com/remove-floating-style-in-detail.html)\n2. [常规流之块级格式化上下文（Block Formatting Contexts）](https://www.cnblogs.com/rexD/p/4597380.html)\n","slug":"CSS魔法篇之清除浮动","published":1,"updated":"2018-02-26T14:17:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmd80004vxsliagjmsge","content":"<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><p>　　BFC，全称为块级格式化上下文。对内，它是一个独立的渲染区域，只有块级框参与，它规定了内部的块级框如何布局，与这个区域的外部毫不相干；对外，它仍处在流布局中，与其它元素的布局方式无异。通常来说，我们所看到的 HTML 页面就是一个 BFC，该 BFC 由根元素创建，对页面中的所有块级框作用。块级格式化上下文的创建方式诸多，详见：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"external\">块格式化上下文</a>。</p>\n<h4 id=\"BFC-的特性\"><a href=\"#BFC-的特性\" class=\"headerlink\" title=\"BFC 的特性\"></a>BFC 的特性</h4><ul>\n<li>由于 BFC 是针对内部的块级框作用的，而块级框本身就具有每个元素会换行的特性，因而可以知道，在 BFC 中，框会一个接一个地被垂直放置，它们的起点是包含块的顶部</li>\n<li>两个兄弟框之间的垂直距离取决于 margin 属性，处于同一个 BFC 中相邻的块级元素会发生外边距合并</li>\n<li>在 BFC 中，每一个块框的左边距会与包含块的左边接触，即使存在浮动也是如此</li>\n<li>计算 BFC 的高度时，浮动元素也会参与计算</li>\n<li>BFC 的区域不会与浮动元素重叠</li>\n</ul>\n<h3 id=\"边界塌陷\"><a href=\"#边界塌陷\" class=\"headerlink\" title=\"边界塌陷\"></a>边界塌陷</h3><p>　　在 CSS 中，有一个常见的问题就是当子元素设为浮动后，父元素的高度也随之变为 0，但这往往并不是我们想要的结果。<br>HTML 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>　　为了解决边界塌陷的问题，可以借助上述提到的<em>在计算 BFC 的高度时，浮动元素也会参与计算</em>的思想。利用 BFC 的解决方案有如下：</p>\n<ol>\n<li><p>使用 overflow 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过将父元素的 overflow 属性设为非 visible 的值，即可创建一个 BFC 包含子浮动元素。</p>\n</li>\n<li><p>浮动父元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过浮动父元素，能够创建新的 BFC。但是此方案的隐患是可能造成新的浮动问题。</p>\n</li>\n</ol>\n<p>　　除了利用 BFC 的思想之外，还有一些其它解决方案：</p>\n<ol>\n<li><p>直接设置父元素高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法简单粗暴，适合于子元素高度固定且已知的情况。只有当子元素高度&lt;=100时，上面的代码才能完全包含子元素。</p>\n</li>\n<li><p>结尾处加空 div 或者空 br 标签，设置其 CSS 属性 clear<br>修改 HTML 代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">  &lt;!--div class=&quot;clearfloat&quot;&gt;&lt;/div--&gt; //方案1：添加空 div 标签</span><br><span class=\"line\">  &lt;!--br class=&quot;clearfloat&quot; /--&gt; //方案2：添加空 br 标签</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS 代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfloat &#123;</span><br><span class=\"line\">  clear: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法利用了 clear 属性。根据 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear\" target=\"_blank\" rel=\"external\">MDN</a>，clear 属性指定一个元素是否可以在它之前的浮动元素旁边，或者必须向下移动。在本例中使用 <code>clear: both</code>使得该元素左右都不能有浮动的元素，那么它就会向下移动，来撑开父元素。</p>\n</li>\n<li><p>使用伪元素 ::after</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent::after &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  clear: both;</span><br><span class=\"line\">  content: &apos;&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与上面的方案类似，该元素不过是拿 ::after 伪元素替代了<code>&lt;div class=&quot;clearfloat&quot;&gt;&lt;/div&gt;</code>。这里需要注意的一点是伪元素默认是行内元素，所以这里通过 display 属性将其改为块级元素。</p>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"http://kayosite.com/remove-floating-style-in-detail.html\" target=\"_blank\" rel=\"external\">详说清除浮动</a></li>\n<li><a href=\"https://www.cnblogs.com/rexD/p/4597380.html\" target=\"_blank\" rel=\"external\">常规流之块级格式化上下文（Block Formatting Contexts）</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><p>　　BFC，全称为块级格式化上下文。对内，它是一个独立的渲染区域，只有块级框参与，它规定了内部的块级框如何布局，与这个区域的外部毫不相干；对外，它仍处在流布局中，与其它元素的布局方式无异。通常来说，我们所看到的 HTML 页面就是一个 BFC，该 BFC 由根元素创建，对页面中的所有块级框作用。块级格式化上下文的创建方式诸多，详见：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"external\">块格式化上下文</a>。</p>\n<h4 id=\"BFC-的特性\"><a href=\"#BFC-的特性\" class=\"headerlink\" title=\"BFC 的特性\"></a>BFC 的特性</h4><ul>\n<li>由于 BFC 是针对内部的块级框作用的，而块级框本身就具有每个元素会换行的特性，因而可以知道，在 BFC 中，框会一个接一个地被垂直放置，它们的起点是包含块的顶部</li>\n<li>两个兄弟框之间的垂直距离取决于 margin 属性，处于同一个 BFC 中相邻的块级元素会发生外边距合并</li>\n<li>在 BFC 中，每一个块框的左边距会与包含块的左边接触，即使存在浮动也是如此</li>\n<li>计算 BFC 的高度时，浮动元素也会参与计算</li>\n<li>BFC 的区域不会与浮动元素重叠</li>\n</ul>\n<h3 id=\"边界塌陷\"><a href=\"#边界塌陷\" class=\"headerlink\" title=\"边界塌陷\"></a>边界塌陷</h3><p>　　在 CSS 中，有一个常见的问题就是当子元素设为浮动后，父元素的高度也随之变为 0，但这往往并不是我们想要的结果。<br>HTML 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.child &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>　　为了解决边界塌陷的问题，可以借助上述提到的<em>在计算 BFC 的高度时，浮动元素也会参与计算</em>的思想。利用 BFC 的解决方案有如下：</p>\n<ol>\n<li><p>使用 overflow 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过将父元素的 overflow 属性设为非 visible 的值，即可创建一个 BFC 包含子浮动元素。</p>\n</li>\n<li><p>浮动父元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过浮动父元素，能够创建新的 BFC。但是此方案的隐患是可能造成新的浮动问题。</p>\n</li>\n</ol>\n<p>　　除了利用 BFC 的思想之外，还有一些其它解决方案：</p>\n<ol>\n<li><p>直接设置父元素高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法简单粗暴，适合于子元素高度固定且已知的情况。只有当子元素高度&lt;=100时，上面的代码才能完全包含子元素。</p>\n</li>\n<li><p>结尾处加空 div 或者空 br 标签，设置其 CSS 属性 clear<br>修改 HTML 代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class=\"line\">  &lt;!--div class=&quot;clearfloat&quot;&gt;&lt;/div--&gt; //方案1：添加空 div 标签</span><br><span class=\"line\">  &lt;!--br class=&quot;clearfloat&quot; /--&gt; //方案2：添加空 br 标签</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS 代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfloat &#123;</span><br><span class=\"line\">  clear: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法利用了 clear 属性。根据 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear\" target=\"_blank\" rel=\"external\">MDN</a>，clear 属性指定一个元素是否可以在它之前的浮动元素旁边，或者必须向下移动。在本例中使用 <code>clear: both</code>使得该元素左右都不能有浮动的元素，那么它就会向下移动，来撑开父元素。</p>\n</li>\n<li><p>使用伪元素 ::after</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent::after &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  clear: both;</span><br><span class=\"line\">  content: &apos;&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与上面的方案类似，该元素不过是拿 ::after 伪元素替代了<code>&lt;div class=&quot;clearfloat&quot;&gt;&lt;/div&gt;</code>。这里需要注意的一点是伪元素默认是行内元素，所以这里通过 display 属性将其改为块级元素。</p>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"http://kayosite.com/remove-floating-style-in-detail.html\" target=\"_blank\" rel=\"external\">详说清除浮动</a></li>\n<li><a href=\"https://www.cnblogs.com/rexD/p/4597380.html\" target=\"_blank\" rel=\"external\">常规流之块级格式化上下文（Block Formatting Contexts）</a></li>\n</ol>\n"},{"title":"HTTP杂烩(一)","date":"2018-01-08T09:39:38.000Z","_content":"\n### 写在前面\n　　![](//wx4.sinaimg.cn/mw690/79b5b053ly1fodjnqkm0kj20fq08u0ta.jpg)\n　　当我们在浏览器的地址栏里输入 URL 时，信息会被送往某处，然后从某处得到回复，最终将内容呈现在 Web 页面上。Web 使用一种名为 HTTP(HyperText Transfer Protocol，超文本传输协议) 的协议作为规范，完成客户端到服务端的一系列运作流程。\n\n### 网络基础 TCP/IP\n　　为了理解 HTTP，不得不先了解一下 TCP/IP 协议族。TCP/IP 协议族按层次分为五层：应用层、传输层、网络层、数据链路层和物理层。分层的好处就是降低耦合度，各层专注于自己的事。各层的作用如下：\n1. 应用层 - 向用户提供应用服务。著名的协议有 FTP、DNS，还有这篇文章的主体 HTTP 等。\n2. 传输层 - 提供处于网络连接中的两台计算机之间的数据传输。著名的两个协议是 TCP 和 UDP。\n3. 网络层 - 处理在网络上流动的数据包。比如 IP 协议。\n4. 数据链路层 - 建立数据链路，传输数据帧。\n5. 物理层 - 以二进制形式在物理媒介上传输数据。\n\n### HTTP 协议的密友：TCP、IP 和 DNS\n\n#### IP（网际协议）\n　　IP 协议位于网络层，它的作用是在源地址和目的地址之间传送*数据包*，要保证确实传送到对方那里，有两个重要的条件是 IP 地址和 MAC 地址。我们先来看一张图：\n　　![](https://img3.doubanio.com/view/ark_works_pic/common-largeshow/public/199875086.jpg)\n　　这张图里发生了什么？首先发送端确定好它想给 IP 地址为 192.0.43.10 的地方发送数据包，然后它会先查询 ARP 表以获得该 IP 对应的 MAC 地址，但它发现目的主机与自己并不在同一个局域网内，那么 ARP 就会查询到出口路由的 MAC 地址，并且向其发送数据，该路由器拿到数据后，与上述的操作同理，直至发送到目的主机上。\n\n#### TCP（传输控制协议）\n　　TCP 协议是可靠的传输协议，意味着它能够把数据准确可靠地传送给对方，既不丢包还能保证顺序正确。为了保证这种可靠性，TCP 有著名的三次握手和四次挥手。\n　　三次握手：(客)我给你发了数据包 - (服)明白！我收到了你给我的数据包 - (客)好的！\n　　四次挥手：客户端和服务端都可以发起挥手，这里假设由服务端发起。(服)我没数据要发给你了 - (客)好的，我收到了。但是我还没准备好，请稍等 - (客)我这里也 OK 了，可以关闭连接了 - (服)好的，再见\n　　![](https://wx4.sinaimg.cn/mw690/79b5b053gy1fn9g91l6tvj20h309w425.jpg)\n\n#### DNS（域名服务）\n　　计算机可以被赋予 IP 地址，也可以被赋予主机名和域名。相较前者来说，用户更喜欢后者，毕竟没有人喜欢记一组长长的数字。DNS 服务应运而生，DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。\n　　![](//wx2.sinaimg.cn/mw690/79b5b053ly1fodjnqkmsmj20fq0a8t9e.jpg)\n　　一些碎碎念：DNS 解析的时候，既会用到 TCP 协议也会用到 UDP 协议。DNS 的规范规定了两种类型的 DNS 服务器：主 DNS 服务器和从 DNS 服务器。当从域名服务器启动后，需要与主域名服务器通信并加载数据信息，这被称为区传送。后续从域名服务器也会定时向主域名服务器进行查询以便了解数据变动，如有变动，就会执行区传送。区传送主要使用 TCP 协议，主要基于以下两点考虑：第一点是区传送的数据传输的信息量很大；二是该传输需要可靠。而域名解析时会使用 UDP 协议，主要是因为客户端查询域名时，服务器返回的信息量很小，同时，使用 UDP 无需三次握手，可以降低域名服务器的负载。\n\n### HTTP 中的数据\n\n#### HTTP 报文\n　　在 HTTP 协议中，数据交换的格式就是 HTTP 报文。报文大致可分为报文首部和报文主体两部分，通常，并不一定有报文主体。客户端的 HTTP 报文为请求报文，服务端的 HTTP 报文为响应报文。请求报文第一行为请求行，包含用于请求的方法、请求 URI 和 HTTP 版本。响应报文第一行为状态行，包含表明响应结果的 HTTP 版本、状态码和原因短语，\n　　![](https://wx3.sinaimg.cn/mw690/79b5b053gy1fn9hntk4bfj20h304yac0.jpg)\n\n#### 编码提升传输速率\n　　HTTP 在传输时可以按照数据原貌直接传输，也可以在传输过程中通过编码提升传输速率。常用的内容编码有：\n\n1. gzip(GNU zip)\n2. compress(UNIX 系统的标准压缩)\n3. deflate(zlib)\n4. identity(不进行编码)\n\n　　虽然编码后传输可以提高效率，但是在编码实体资源尚未完全传输完成之前，浏览器无法显示请求页面。所以，要应用分块传输编码以将实体主体进行分块，使得浏览器可以逐步展示页面。\n\n### 使用方法给服务端下达命令\n- GET - 获取资源\n- POST - 传输实体主体\n- PUT - 传输文件\n- HEAD - 获得报文头部\n- DELETE - 删除文件\n- OPTIONS - 询问支持的方法\n- TRACE - 追踪路径\n- CONNECT - 要求用隧道协议连接代理\n\n　　以上的 HTTP 方法中，常用的主要是 GET/POST/PUT/DELETE 四种。\n\n### 状态码告知客户端请求结果\n　　![](https://wx2.sinaimg.cn/mw690/79b5b053gy1fn9gx6qvq4j20er04t40b.jpg)\n　　以下是一些代表性的状态码。在现实生活中，也可以自定义状态码，只要遵守状态码类别的定义即可。\n#### 2XX 成功\n- 200 OK - 表示从客户端发来的请求被正常处理了\n- 204 No Content - 请求处理成功，但没有资源可返回\n- 206 Partial Content - 表示客户端进行了范围请求(Content-Range)，而服务端成功执行了这部分的 GET 请求\n\n#### 3XX 重定向\n- 301 Moved Permanently - 永久性重定向\n- 302 Found - 临时性重定向\n- 303 See Other - 资源的 URI 已更新，应使用 GET 方法定向获取请求的资源\n- 304 Not Modified - 表示客户端发送附带条件的请求时，服务端允许请求访问资源，但因条件未满足，直接返回 304 Not Modified（服务端资源未改变，可直接使用客户端未过期的缓存）。虽然 304 被划分在 3XX 类别中，但与重定向没有关系\n- 307 Temporary Redirect - 临时重定向\n\n#### 4XX 客户端错误\n- 400 Bad Request - 请求报文中存在语法错误\n- 401 Unauthorized - 表示发送的请求需要有通过 HTTP 认证的认证信息\n- 403 Forbidden - 服务器禁止访问请求的资源\n- 404 Not Found - 服务器上没有请求的资源\n\n#### 5XX 服务器错误\n- 500 Internal Server Error - 服务器在执行请求时出错\n- 503 Service Unavailable - 服务器暂时处于超负载或正在停机维护\n","source":"_posts/HTTP杂烩-一.md","raw":"---\ntitle: HTTP杂烩(一)\ndate: 2018-01-08 17:39:38\ntags:\n---\n\n### 写在前面\n　　![](//wx4.sinaimg.cn/mw690/79b5b053ly1fodjnqkm0kj20fq08u0ta.jpg)\n　　当我们在浏览器的地址栏里输入 URL 时，信息会被送往某处，然后从某处得到回复，最终将内容呈现在 Web 页面上。Web 使用一种名为 HTTP(HyperText Transfer Protocol，超文本传输协议) 的协议作为规范，完成客户端到服务端的一系列运作流程。\n\n### 网络基础 TCP/IP\n　　为了理解 HTTP，不得不先了解一下 TCP/IP 协议族。TCP/IP 协议族按层次分为五层：应用层、传输层、网络层、数据链路层和物理层。分层的好处就是降低耦合度，各层专注于自己的事。各层的作用如下：\n1. 应用层 - 向用户提供应用服务。著名的协议有 FTP、DNS，还有这篇文章的主体 HTTP 等。\n2. 传输层 - 提供处于网络连接中的两台计算机之间的数据传输。著名的两个协议是 TCP 和 UDP。\n3. 网络层 - 处理在网络上流动的数据包。比如 IP 协议。\n4. 数据链路层 - 建立数据链路，传输数据帧。\n5. 物理层 - 以二进制形式在物理媒介上传输数据。\n\n### HTTP 协议的密友：TCP、IP 和 DNS\n\n#### IP（网际协议）\n　　IP 协议位于网络层，它的作用是在源地址和目的地址之间传送*数据包*，要保证确实传送到对方那里，有两个重要的条件是 IP 地址和 MAC 地址。我们先来看一张图：\n　　![](https://img3.doubanio.com/view/ark_works_pic/common-largeshow/public/199875086.jpg)\n　　这张图里发生了什么？首先发送端确定好它想给 IP 地址为 192.0.43.10 的地方发送数据包，然后它会先查询 ARP 表以获得该 IP 对应的 MAC 地址，但它发现目的主机与自己并不在同一个局域网内，那么 ARP 就会查询到出口路由的 MAC 地址，并且向其发送数据，该路由器拿到数据后，与上述的操作同理，直至发送到目的主机上。\n\n#### TCP（传输控制协议）\n　　TCP 协议是可靠的传输协议，意味着它能够把数据准确可靠地传送给对方，既不丢包还能保证顺序正确。为了保证这种可靠性，TCP 有著名的三次握手和四次挥手。\n　　三次握手：(客)我给你发了数据包 - (服)明白！我收到了你给我的数据包 - (客)好的！\n　　四次挥手：客户端和服务端都可以发起挥手，这里假设由服务端发起。(服)我没数据要发给你了 - (客)好的，我收到了。但是我还没准备好，请稍等 - (客)我这里也 OK 了，可以关闭连接了 - (服)好的，再见\n　　![](https://wx4.sinaimg.cn/mw690/79b5b053gy1fn9g91l6tvj20h309w425.jpg)\n\n#### DNS（域名服务）\n　　计算机可以被赋予 IP 地址，也可以被赋予主机名和域名。相较前者来说，用户更喜欢后者，毕竟没有人喜欢记一组长长的数字。DNS 服务应运而生，DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。\n　　![](//wx2.sinaimg.cn/mw690/79b5b053ly1fodjnqkmsmj20fq0a8t9e.jpg)\n　　一些碎碎念：DNS 解析的时候，既会用到 TCP 协议也会用到 UDP 协议。DNS 的规范规定了两种类型的 DNS 服务器：主 DNS 服务器和从 DNS 服务器。当从域名服务器启动后，需要与主域名服务器通信并加载数据信息，这被称为区传送。后续从域名服务器也会定时向主域名服务器进行查询以便了解数据变动，如有变动，就会执行区传送。区传送主要使用 TCP 协议，主要基于以下两点考虑：第一点是区传送的数据传输的信息量很大；二是该传输需要可靠。而域名解析时会使用 UDP 协议，主要是因为客户端查询域名时，服务器返回的信息量很小，同时，使用 UDP 无需三次握手，可以降低域名服务器的负载。\n\n### HTTP 中的数据\n\n#### HTTP 报文\n　　在 HTTP 协议中，数据交换的格式就是 HTTP 报文。报文大致可分为报文首部和报文主体两部分，通常，并不一定有报文主体。客户端的 HTTP 报文为请求报文，服务端的 HTTP 报文为响应报文。请求报文第一行为请求行，包含用于请求的方法、请求 URI 和 HTTP 版本。响应报文第一行为状态行，包含表明响应结果的 HTTP 版本、状态码和原因短语，\n　　![](https://wx3.sinaimg.cn/mw690/79b5b053gy1fn9hntk4bfj20h304yac0.jpg)\n\n#### 编码提升传输速率\n　　HTTP 在传输时可以按照数据原貌直接传输，也可以在传输过程中通过编码提升传输速率。常用的内容编码有：\n\n1. gzip(GNU zip)\n2. compress(UNIX 系统的标准压缩)\n3. deflate(zlib)\n4. identity(不进行编码)\n\n　　虽然编码后传输可以提高效率，但是在编码实体资源尚未完全传输完成之前，浏览器无法显示请求页面。所以，要应用分块传输编码以将实体主体进行分块，使得浏览器可以逐步展示页面。\n\n### 使用方法给服务端下达命令\n- GET - 获取资源\n- POST - 传输实体主体\n- PUT - 传输文件\n- HEAD - 获得报文头部\n- DELETE - 删除文件\n- OPTIONS - 询问支持的方法\n- TRACE - 追踪路径\n- CONNECT - 要求用隧道协议连接代理\n\n　　以上的 HTTP 方法中，常用的主要是 GET/POST/PUT/DELETE 四种。\n\n### 状态码告知客户端请求结果\n　　![](https://wx2.sinaimg.cn/mw690/79b5b053gy1fn9gx6qvq4j20er04t40b.jpg)\n　　以下是一些代表性的状态码。在现实生活中，也可以自定义状态码，只要遵守状态码类别的定义即可。\n#### 2XX 成功\n- 200 OK - 表示从客户端发来的请求被正常处理了\n- 204 No Content - 请求处理成功，但没有资源可返回\n- 206 Partial Content - 表示客户端进行了范围请求(Content-Range)，而服务端成功执行了这部分的 GET 请求\n\n#### 3XX 重定向\n- 301 Moved Permanently - 永久性重定向\n- 302 Found - 临时性重定向\n- 303 See Other - 资源的 URI 已更新，应使用 GET 方法定向获取请求的资源\n- 304 Not Modified - 表示客户端发送附带条件的请求时，服务端允许请求访问资源，但因条件未满足，直接返回 304 Not Modified（服务端资源未改变，可直接使用客户端未过期的缓存）。虽然 304 被划分在 3XX 类别中，但与重定向没有关系\n- 307 Temporary Redirect - 临时重定向\n\n#### 4XX 客户端错误\n- 400 Bad Request - 请求报文中存在语法错误\n- 401 Unauthorized - 表示发送的请求需要有通过 HTTP 认证的认证信息\n- 403 Forbidden - 服务器禁止访问请求的资源\n- 404 Not Found - 服务器上没有请求的资源\n\n#### 5XX 服务器错误\n- 500 Internal Server Error - 服务器在执行请求时出错\n- 503 Service Unavailable - 服务器暂时处于超负载或正在停机维护\n","slug":"HTTP杂烩-一","published":1,"updated":"2018-02-12T04:22:13.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmd90005vxslzodhelaw","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>　　<img src=\"//wx4.sinaimg.cn/mw690/79b5b053ly1fodjnqkm0kj20fq08u0ta.jpg\" alt=\"\"><br>　　当我们在浏览器的地址栏里输入 URL 时，信息会被送往某处，然后从某处得到回复，最终将内容呈现在 Web 页面上。Web 使用一种名为 HTTP(HyperText Transfer Protocol，超文本传输协议) 的协议作为规范，完成客户端到服务端的一系列运作流程。</p>\n<h3 id=\"网络基础-TCP-IP\"><a href=\"#网络基础-TCP-IP\" class=\"headerlink\" title=\"网络基础 TCP/IP\"></a>网络基础 TCP/IP</h3><p>　　为了理解 HTTP，不得不先了解一下 TCP/IP 协议族。TCP/IP 协议族按层次分为五层：应用层、传输层、网络层、数据链路层和物理层。分层的好处就是降低耦合度，各层专注于自己的事。各层的作用如下：</p>\n<ol>\n<li>应用层 - 向用户提供应用服务。著名的协议有 FTP、DNS，还有这篇文章的主体 HTTP 等。</li>\n<li>传输层 - 提供处于网络连接中的两台计算机之间的数据传输。著名的两个协议是 TCP 和 UDP。</li>\n<li>网络层 - 处理在网络上流动的数据包。比如 IP 协议。</li>\n<li>数据链路层 - 建立数据链路，传输数据帧。</li>\n<li>物理层 - 以二进制形式在物理媒介上传输数据。</li>\n</ol>\n<h3 id=\"HTTP-协议的密友：TCP、IP-和-DNS\"><a href=\"#HTTP-协议的密友：TCP、IP-和-DNS\" class=\"headerlink\" title=\"HTTP 协议的密友：TCP、IP 和 DNS\"></a>HTTP 协议的密友：TCP、IP 和 DNS</h3><h4 id=\"IP（网际协议）\"><a href=\"#IP（网际协议）\" class=\"headerlink\" title=\"IP（网际协议）\"></a>IP（网际协议）</h4><p>　　IP 协议位于网络层，它的作用是在源地址和目的地址之间传送<em>数据包</em>，要保证确实传送到对方那里，有两个重要的条件是 IP 地址和 MAC 地址。我们先来看一张图：<br>　　<img src=\"https://img3.doubanio.com/view/ark_works_pic/common-largeshow/public/199875086.jpg\" alt=\"\"><br>　　这张图里发生了什么？首先发送端确定好它想给 IP 地址为 192.0.43.10 的地方发送数据包，然后它会先查询 ARP 表以获得该 IP 对应的 MAC 地址，但它发现目的主机与自己并不在同一个局域网内，那么 ARP 就会查询到出口路由的 MAC 地址，并且向其发送数据，该路由器拿到数据后，与上述的操作同理，直至发送到目的主机上。</p>\n<h4 id=\"TCP（传输控制协议）\"><a href=\"#TCP（传输控制协议）\" class=\"headerlink\" title=\"TCP（传输控制协议）\"></a>TCP（传输控制协议）</h4><p>　　TCP 协议是可靠的传输协议，意味着它能够把数据准确可靠地传送给对方，既不丢包还能保证顺序正确。为了保证这种可靠性，TCP 有著名的三次握手和四次挥手。<br>　　三次握手：(客)我给你发了数据包 - (服)明白！我收到了你给我的数据包 - (客)好的！<br>　　四次挥手：客户端和服务端都可以发起挥手，这里假设由服务端发起。(服)我没数据要发给你了 - (客)好的，我收到了。但是我还没准备好，请稍等 - (客)我这里也 OK 了，可以关闭连接了 - (服)好的，再见<br>　　<img src=\"https://wx4.sinaimg.cn/mw690/79b5b053gy1fn9g91l6tvj20h309w425.jpg\" alt=\"\"></p>\n<h4 id=\"DNS（域名服务）\"><a href=\"#DNS（域名服务）\" class=\"headerlink\" title=\"DNS（域名服务）\"></a>DNS（域名服务）</h4><p>　　计算机可以被赋予 IP 地址，也可以被赋予主机名和域名。相较前者来说，用户更喜欢后者，毕竟没有人喜欢记一组长长的数字。DNS 服务应运而生，DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。<br>　　<img src=\"//wx2.sinaimg.cn/mw690/79b5b053ly1fodjnqkmsmj20fq0a8t9e.jpg\" alt=\"\"><br>　　一些碎碎念：DNS 解析的时候，既会用到 TCP 协议也会用到 UDP 协议。DNS 的规范规定了两种类型的 DNS 服务器：主 DNS 服务器和从 DNS 服务器。当从域名服务器启动后，需要与主域名服务器通信并加载数据信息，这被称为区传送。后续从域名服务器也会定时向主域名服务器进行查询以便了解数据变动，如有变动，就会执行区传送。区传送主要使用 TCP 协议，主要基于以下两点考虑：第一点是区传送的数据传输的信息量很大；二是该传输需要可靠。而域名解析时会使用 UDP 协议，主要是因为客户端查询域名时，服务器返回的信息量很小，同时，使用 UDP 无需三次握手，可以降低域名服务器的负载。</p>\n<h3 id=\"HTTP-中的数据\"><a href=\"#HTTP-中的数据\" class=\"headerlink\" title=\"HTTP 中的数据\"></a>HTTP 中的数据</h3><h4 id=\"HTTP-报文\"><a href=\"#HTTP-报文\" class=\"headerlink\" title=\"HTTP 报文\"></a>HTTP 报文</h4><p>　　在 HTTP 协议中，数据交换的格式就是 HTTP 报文。报文大致可分为报文首部和报文主体两部分，通常，并不一定有报文主体。客户端的 HTTP 报文为请求报文，服务端的 HTTP 报文为响应报文。请求报文第一行为请求行，包含用于请求的方法、请求 URI 和 HTTP 版本。响应报文第一行为状态行，包含表明响应结果的 HTTP 版本、状态码和原因短语，<br>　　<img src=\"https://wx3.sinaimg.cn/mw690/79b5b053gy1fn9hntk4bfj20h304yac0.jpg\" alt=\"\"></p>\n<h4 id=\"编码提升传输速率\"><a href=\"#编码提升传输速率\" class=\"headerlink\" title=\"编码提升传输速率\"></a>编码提升传输速率</h4><p>　　HTTP 在传输时可以按照数据原貌直接传输，也可以在传输过程中通过编码提升传输速率。常用的内容编码有：</p>\n<ol>\n<li>gzip(GNU zip)</li>\n<li>compress(UNIX 系统的标准压缩)</li>\n<li>deflate(zlib)</li>\n<li>identity(不进行编码)</li>\n</ol>\n<p>　　虽然编码后传输可以提高效率，但是在编码实体资源尚未完全传输完成之前，浏览器无法显示请求页面。所以，要应用分块传输编码以将实体主体进行分块，使得浏览器可以逐步展示页面。</p>\n<h3 id=\"使用方法给服务端下达命令\"><a href=\"#使用方法给服务端下达命令\" class=\"headerlink\" title=\"使用方法给服务端下达命令\"></a>使用方法给服务端下达命令</h3><ul>\n<li>GET - 获取资源</li>\n<li>POST - 传输实体主体</li>\n<li>PUT - 传输文件</li>\n<li>HEAD - 获得报文头部</li>\n<li>DELETE - 删除文件</li>\n<li>OPTIONS - 询问支持的方法</li>\n<li>TRACE - 追踪路径</li>\n<li>CONNECT - 要求用隧道协议连接代理</li>\n</ul>\n<p>　　以上的 HTTP 方法中，常用的主要是 GET/POST/PUT/DELETE 四种。</p>\n<h3 id=\"状态码告知客户端请求结果\"><a href=\"#状态码告知客户端请求结果\" class=\"headerlink\" title=\"状态码告知客户端请求结果\"></a>状态码告知客户端请求结果</h3><p>　　<img src=\"https://wx2.sinaimg.cn/mw690/79b5b053gy1fn9gx6qvq4j20er04t40b.jpg\" alt=\"\"><br>　　以下是一些代表性的状态码。在现实生活中，也可以自定义状态码，只要遵守状态码类别的定义即可。</p>\n<h4 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h4><ul>\n<li>200 OK - 表示从客户端发来的请求被正常处理了</li>\n<li>204 No Content - 请求处理成功，但没有资源可返回</li>\n<li>206 Partial Content - 表示客户端进行了范围请求(Content-Range)，而服务端成功执行了这部分的 GET 请求</li>\n</ul>\n<h4 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h4><ul>\n<li>301 Moved Permanently - 永久性重定向</li>\n<li>302 Found - 临时性重定向</li>\n<li>303 See Other - 资源的 URI 已更新，应使用 GET 方法定向获取请求的资源</li>\n<li>304 Not Modified - 表示客户端发送附带条件的请求时，服务端允许请求访问资源，但因条件未满足，直接返回 304 Not Modified（服务端资源未改变，可直接使用客户端未过期的缓存）。虽然 304 被划分在 3XX 类别中，但与重定向没有关系</li>\n<li>307 Temporary Redirect - 临时重定向</li>\n</ul>\n<h4 id=\"4XX-客户端错误\"><a href=\"#4XX-客户端错误\" class=\"headerlink\" title=\"4XX 客户端错误\"></a>4XX 客户端错误</h4><ul>\n<li>400 Bad Request - 请求报文中存在语法错误</li>\n<li>401 Unauthorized - 表示发送的请求需要有通过 HTTP 认证的认证信息</li>\n<li>403 Forbidden - 服务器禁止访问请求的资源</li>\n<li>404 Not Found - 服务器上没有请求的资源</li>\n</ul>\n<h4 id=\"5XX-服务器错误\"><a href=\"#5XX-服务器错误\" class=\"headerlink\" title=\"5XX 服务器错误\"></a>5XX 服务器错误</h4><ul>\n<li>500 Internal Server Error - 服务器在执行请求时出错</li>\n<li>503 Service Unavailable - 服务器暂时处于超负载或正在停机维护</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>　　<img src=\"//wx4.sinaimg.cn/mw690/79b5b053ly1fodjnqkm0kj20fq08u0ta.jpg\" alt=\"\"><br>　　当我们在浏览器的地址栏里输入 URL 时，信息会被送往某处，然后从某处得到回复，最终将内容呈现在 Web 页面上。Web 使用一种名为 HTTP(HyperText Transfer Protocol，超文本传输协议) 的协议作为规范，完成客户端到服务端的一系列运作流程。</p>\n<h3 id=\"网络基础-TCP-IP\"><a href=\"#网络基础-TCP-IP\" class=\"headerlink\" title=\"网络基础 TCP/IP\"></a>网络基础 TCP/IP</h3><p>　　为了理解 HTTP，不得不先了解一下 TCP/IP 协议族。TCP/IP 协议族按层次分为五层：应用层、传输层、网络层、数据链路层和物理层。分层的好处就是降低耦合度，各层专注于自己的事。各层的作用如下：</p>\n<ol>\n<li>应用层 - 向用户提供应用服务。著名的协议有 FTP、DNS，还有这篇文章的主体 HTTP 等。</li>\n<li>传输层 - 提供处于网络连接中的两台计算机之间的数据传输。著名的两个协议是 TCP 和 UDP。</li>\n<li>网络层 - 处理在网络上流动的数据包。比如 IP 协议。</li>\n<li>数据链路层 - 建立数据链路，传输数据帧。</li>\n<li>物理层 - 以二进制形式在物理媒介上传输数据。</li>\n</ol>\n<h3 id=\"HTTP-协议的密友：TCP、IP-和-DNS\"><a href=\"#HTTP-协议的密友：TCP、IP-和-DNS\" class=\"headerlink\" title=\"HTTP 协议的密友：TCP、IP 和 DNS\"></a>HTTP 协议的密友：TCP、IP 和 DNS</h3><h4 id=\"IP（网际协议）\"><a href=\"#IP（网际协议）\" class=\"headerlink\" title=\"IP（网际协议）\"></a>IP（网际协议）</h4><p>　　IP 协议位于网络层，它的作用是在源地址和目的地址之间传送<em>数据包</em>，要保证确实传送到对方那里，有两个重要的条件是 IP 地址和 MAC 地址。我们先来看一张图：<br>　　<img src=\"https://img3.doubanio.com/view/ark_works_pic/common-largeshow/public/199875086.jpg\" alt=\"\"><br>　　这张图里发生了什么？首先发送端确定好它想给 IP 地址为 192.0.43.10 的地方发送数据包，然后它会先查询 ARP 表以获得该 IP 对应的 MAC 地址，但它发现目的主机与自己并不在同一个局域网内，那么 ARP 就会查询到出口路由的 MAC 地址，并且向其发送数据，该路由器拿到数据后，与上述的操作同理，直至发送到目的主机上。</p>\n<h4 id=\"TCP（传输控制协议）\"><a href=\"#TCP（传输控制协议）\" class=\"headerlink\" title=\"TCP（传输控制协议）\"></a>TCP（传输控制协议）</h4><p>　　TCP 协议是可靠的传输协议，意味着它能够把数据准确可靠地传送给对方，既不丢包还能保证顺序正确。为了保证这种可靠性，TCP 有著名的三次握手和四次挥手。<br>　　三次握手：(客)我给你发了数据包 - (服)明白！我收到了你给我的数据包 - (客)好的！<br>　　四次挥手：客户端和服务端都可以发起挥手，这里假设由服务端发起。(服)我没数据要发给你了 - (客)好的，我收到了。但是我还没准备好，请稍等 - (客)我这里也 OK 了，可以关闭连接了 - (服)好的，再见<br>　　<img src=\"https://wx4.sinaimg.cn/mw690/79b5b053gy1fn9g91l6tvj20h309w425.jpg\" alt=\"\"></p>\n<h4 id=\"DNS（域名服务）\"><a href=\"#DNS（域名服务）\" class=\"headerlink\" title=\"DNS（域名服务）\"></a>DNS（域名服务）</h4><p>　　计算机可以被赋予 IP 地址，也可以被赋予主机名和域名。相较前者来说，用户更喜欢后者，毕竟没有人喜欢记一组长长的数字。DNS 服务应运而生，DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。<br>　　<img src=\"//wx2.sinaimg.cn/mw690/79b5b053ly1fodjnqkmsmj20fq0a8t9e.jpg\" alt=\"\"><br>　　一些碎碎念：DNS 解析的时候，既会用到 TCP 协议也会用到 UDP 协议。DNS 的规范规定了两种类型的 DNS 服务器：主 DNS 服务器和从 DNS 服务器。当从域名服务器启动后，需要与主域名服务器通信并加载数据信息，这被称为区传送。后续从域名服务器也会定时向主域名服务器进行查询以便了解数据变动，如有变动，就会执行区传送。区传送主要使用 TCP 协议，主要基于以下两点考虑：第一点是区传送的数据传输的信息量很大；二是该传输需要可靠。而域名解析时会使用 UDP 协议，主要是因为客户端查询域名时，服务器返回的信息量很小，同时，使用 UDP 无需三次握手，可以降低域名服务器的负载。</p>\n<h3 id=\"HTTP-中的数据\"><a href=\"#HTTP-中的数据\" class=\"headerlink\" title=\"HTTP 中的数据\"></a>HTTP 中的数据</h3><h4 id=\"HTTP-报文\"><a href=\"#HTTP-报文\" class=\"headerlink\" title=\"HTTP 报文\"></a>HTTP 报文</h4><p>　　在 HTTP 协议中，数据交换的格式就是 HTTP 报文。报文大致可分为报文首部和报文主体两部分，通常，并不一定有报文主体。客户端的 HTTP 报文为请求报文，服务端的 HTTP 报文为响应报文。请求报文第一行为请求行，包含用于请求的方法、请求 URI 和 HTTP 版本。响应报文第一行为状态行，包含表明响应结果的 HTTP 版本、状态码和原因短语，<br>　　<img src=\"https://wx3.sinaimg.cn/mw690/79b5b053gy1fn9hntk4bfj20h304yac0.jpg\" alt=\"\"></p>\n<h4 id=\"编码提升传输速率\"><a href=\"#编码提升传输速率\" class=\"headerlink\" title=\"编码提升传输速率\"></a>编码提升传输速率</h4><p>　　HTTP 在传输时可以按照数据原貌直接传输，也可以在传输过程中通过编码提升传输速率。常用的内容编码有：</p>\n<ol>\n<li>gzip(GNU zip)</li>\n<li>compress(UNIX 系统的标准压缩)</li>\n<li>deflate(zlib)</li>\n<li>identity(不进行编码)</li>\n</ol>\n<p>　　虽然编码后传输可以提高效率，但是在编码实体资源尚未完全传输完成之前，浏览器无法显示请求页面。所以，要应用分块传输编码以将实体主体进行分块，使得浏览器可以逐步展示页面。</p>\n<h3 id=\"使用方法给服务端下达命令\"><a href=\"#使用方法给服务端下达命令\" class=\"headerlink\" title=\"使用方法给服务端下达命令\"></a>使用方法给服务端下达命令</h3><ul>\n<li>GET - 获取资源</li>\n<li>POST - 传输实体主体</li>\n<li>PUT - 传输文件</li>\n<li>HEAD - 获得报文头部</li>\n<li>DELETE - 删除文件</li>\n<li>OPTIONS - 询问支持的方法</li>\n<li>TRACE - 追踪路径</li>\n<li>CONNECT - 要求用隧道协议连接代理</li>\n</ul>\n<p>　　以上的 HTTP 方法中，常用的主要是 GET/POST/PUT/DELETE 四种。</p>\n<h3 id=\"状态码告知客户端请求结果\"><a href=\"#状态码告知客户端请求结果\" class=\"headerlink\" title=\"状态码告知客户端请求结果\"></a>状态码告知客户端请求结果</h3><p>　　<img src=\"https://wx2.sinaimg.cn/mw690/79b5b053gy1fn9gx6qvq4j20er04t40b.jpg\" alt=\"\"><br>　　以下是一些代表性的状态码。在现实生活中，也可以自定义状态码，只要遵守状态码类别的定义即可。</p>\n<h4 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h4><ul>\n<li>200 OK - 表示从客户端发来的请求被正常处理了</li>\n<li>204 No Content - 请求处理成功，但没有资源可返回</li>\n<li>206 Partial Content - 表示客户端进行了范围请求(Content-Range)，而服务端成功执行了这部分的 GET 请求</li>\n</ul>\n<h4 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h4><ul>\n<li>301 Moved Permanently - 永久性重定向</li>\n<li>302 Found - 临时性重定向</li>\n<li>303 See Other - 资源的 URI 已更新，应使用 GET 方法定向获取请求的资源</li>\n<li>304 Not Modified - 表示客户端发送附带条件的请求时，服务端允许请求访问资源，但因条件未满足，直接返回 304 Not Modified（服务端资源未改变，可直接使用客户端未过期的缓存）。虽然 304 被划分在 3XX 类别中，但与重定向没有关系</li>\n<li>307 Temporary Redirect - 临时重定向</li>\n</ul>\n<h4 id=\"4XX-客户端错误\"><a href=\"#4XX-客户端错误\" class=\"headerlink\" title=\"4XX 客户端错误\"></a>4XX 客户端错误</h4><ul>\n<li>400 Bad Request - 请求报文中存在语法错误</li>\n<li>401 Unauthorized - 表示发送的请求需要有通过 HTTP 认证的认证信息</li>\n<li>403 Forbidden - 服务器禁止访问请求的资源</li>\n<li>404 Not Found - 服务器上没有请求的资源</li>\n</ul>\n<h4 id=\"5XX-服务器错误\"><a href=\"#5XX-服务器错误\" class=\"headerlink\" title=\"5XX 服务器错误\"></a>5XX 服务器错误</h4><ul>\n<li>500 Internal Server Error - 服务器在执行请求时出错</li>\n<li>503 Service Unavailable - 服务器暂时处于超负载或正在停机维护</li>\n</ul>\n"},{"title":"JavaScript高级程序回顾(二)——请求资源的那些事儿","date":"2018-01-09T03:54:15.000Z","_content":"\n### 以不变应万变的 XMLHttpRequest\n　　在这个横行使用 Ajax 的时代，很多人对待 XMLHttpRequest(简称 XHR)的态度都是：“哦，我知道这个东西”，“那你来使用它简单实现一下 Ajax 吧”，“emmm...”，不了了之。好，废话不多说，下面我们一起揭开 XHR 并不神秘的面纱吧。\n　　XHR 为向服务端发送请求和解析服务端响应提供了流畅的接口，能够以异步方式从服务端取得更多信息，是当今一系列异步请求的鼻祖。它最初是由微软发明的，后来被各大浏览器原生支持。\n\n#### XHR 的基本用法\n```\nvar xhr = new XMLHttpRequest();//创建 XHR 对象\nxhr.open('get', 'example.txt', false);//启动 XHR 请求，此时并没有真正发送请求\nxhr.send(null);//发送请求\n```\n　　上面的代码就完成了一个基本的 HTTP 请求，这里白话解释一下上面做了什么：使用 GET 方法，以同步的方式获取“当前页面/example.txt”资源。API 不深入解释，可以参考 [MDN 相关文档](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)。在我的解释中，不知大家有没有关注到“同步”两个字，我想这是我强调的关键：open 方法的第三个布尔值代表是否已同步的方式获取资源，有同步当然就有异步啦，这是令人激动的地方，所以说 XHR 是异步请求的鼻祖嘛，因为浏览器给我们原生提供了异步请求的方法，后续无论做多少封装，也万变不离其宗。\n\n### Ajax\n　　Ajax 的全称是 Asynchroronous JavaScript + XML(异步的 JavaScript 和 XML)，是一种无需重新加载整个网页的情况下，能够部分更新网页的技术。它基于 XHR，下面原生实现一版阉割版 Ajax ~\n```\nfunction ajax(options) {\n  options = options || {};\n  options.type = (options.type || 'GET').toUpperCase();\n  var params = formatParams(options.data);\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n      options.success && options.success(xhr.responseText, xhr.responseXML);\n    } else {\n      options.fail && options.fail(status);\n    }\n  };\n  if (options.type === 'GET') {\n    xhr.open('get', `${options.url}?${params}`, true);\n    xhr.send(null);\n  } else if (options.type === 'POST') {\n    xhr.open('post', options.url, true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');//模仿表单提交\n    xhr.send(params);\n  }\n}\n\n//格式化参数\nfunction formatParams(data) {\n  let result = [];\n  for (let key in data) {\n    result.push(`${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`)\n  }\n  return result.join('&');\n}\n```\n　　调用方式为：\n```\najax({\n  url: '/test',\n  type: 'POST',\n  data: { name: 'Julia', age: 23 },\n  success: function (responseText, responseXML) {\n    //此处放成功后执行的代码\n  },\n  fail: function (status) {\n    //此处放失败后执行的代码\n  }\n});\n```\n\n### 新兴的 Fetch\n　　在网上看到一句话“Ajax 已死，fetch 永生”，颇有标题党的意思。但是仔细想了想，不无道理。Ajax 过去再怎么辉煌，也离不开“封装”二字，尽管对 XHR 的封装已经做得非常好。而新兴的 fetch 既是浏览器的亲生骨肉，又能提供类似于 Ajax 的实现。所以，Ajax 被替代是指日可待的事情了。不过这里我就不太多赘述关于 fetch 的 API 啦（博主赶紧跑去学习学习...）。\n\n### 跨域技术\n　　跨域实在是很让人头疼的一件事，好在现在有不少流行的跨域技术。以我的角度来看，我更愿意把各样的跨域技术分为两类：需要服务端支持的和不需要服务端支持的。为什么这么分类呢？是因为跨域也要分跨谁的域，跨自家公司的其它域的时候，如果能在服务端做点手脚能省不少事；要是想跨别人的域呢，那就只能前端在浏览器里做点手脚啦，而且还不一定能得到自己想要的跨域结果~\n\n#### 需要服务端支持的跨域\n\n1. 跨域资源共享(CORS)\n　　CORS 的基本思想是：使用自定义的 HTTP 头部让浏览器与服务端进行沟通，从而决定请求或响应是应该成功，还是应该失败。整个 CORS 通信过程，都是浏览器自动完成，不会让用户感觉到与普通请求有任何差别。\n　　在使用 CORS 进行跨域时，浏览器会自动在请求头中加入 `Origin` 字段，指定本次请求来自哪个源(协议 + 域名 + 端口)，服务端会根据这个值来判断是否同意这次跨域请求。如果 `Origin` 指定的源不在许可范围内，服务端返回正常的 HTTP 回应，但是这次 HTTP 响应头中不包含 `Access-Control-Allow-Origin`，代表本次跨域请求失败，错误会被 XHR 的 onerror 回调函数捕获；如果 `Origin` 指定的源在许可范围内，就会在 HTTP 响应头中发现 `Access-Control-Allow-Origin` 字段，它的值可能是 `Origin` 传给服务端的值，也有可能是 *(代表公共资源)。\n　　以上说的 CORS 请求都是阮老师 [跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html) 一文中提到的简单请求，复杂请求会在第一次发送跨域请求时多一次 HTTP 请求，但是都是浏览器自动完成的，细节请参阅阮老师的文章。\n\n2. JSONP(JSON with padding)\n　　使用 JSONP 需要知道一个前提就是，script 标签本身就可以跨域的，将一个跨域请求放到 src 属性中即可。回想一下，你页面里引的 jQuery 源码是不是请求就是百度 CDN 上的资源呀？\n　　JSONP 是包含在函数调用中的 JSON，例如`callback({ \"name\": \"Julia\"})`。它由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数，回调函数的名字一般是在请求中指定的。而数据就是传入回调函数的 JSON 数据。\n　　这里有一个典型的 JSONP 请求：`http://freegeoip.net/json?callback=handleResponse`。我们来分析一下上面这句话。首先，这是一个 JSONP 请求，代表这个请求要获取的是包含 JSONP 格式的数据；然后看到请求的格式是在 URL 后面加一些参数，也就是 GET 请求的方式，划重点啦，*JSONP 只支持 GET 方式进行请求*；再接着看，参数是 `callback=handleResponse`，语义上来理解的话，代表回调函数是 handleResponse，那么意味着浏览器中肯定存在这个回调函数，并且在要请求的资源里，肯定具有 `callback({ \"name\": \"Julia\"})` 这种形式以便于调用函数。OK，分析完了这句话，我觉得 JSONP 的道理大家也应该都懂了吧。\n\n　　之所以将 JSONP 也归于需要服务端支持的跨域，与 CORS 的原因有很大差别。JSONP 的关键在于被请求的资源中需要包含 URL 中指定的函数并且调用它，以实现数据的跨域传输。所以，准确来说这并不是需要服务端的支持，而是需要被请求资源的支持。而 CORS 主要是通过头部信息进行跨域，所以毫无疑问需要服务端的支持。\n\n#### 不需要服务端支持的跨域\n\n图像 Ping\n　　与 script 标签类似，浏览器中还有一个标签可以跨域，那就是 img 标签。以我自己举例来说，没有什么可用的 CDN 服务器，可是发一篇文章又想图文并茂，所以往往会在微博上传一些图片，然后获取到图片的 URL 后再把微博删了...好像跑题了，意思就是在我的博客里你看到的好多图片，我用的都是新浪微博的静态图片资源。\n　　使用该方式进行跨域请求很简单，举例如下：\n```\nvar img = new Image();\nimg.onload = img.onerror = function() {\n  alert('Done!');\n};\nimg.src = 'http://www.example.com/test?name=Julia';\n```\n　　从上面这段很短的代码中，我想也是可以得到一些信息的。第一，使用图像 Ping 方式跨域只支持 GET 请求，这是 img 标签所决定的；第二，这是一种与服务端进行简单、单向的跨域通信的一种方式，请求的数据是以查询字符串形式发送的，而响应可以是任意内容，但是很可惜，并不能访问服务端的响应文本(隐含意思就是，你别想通过这个方式获取服务端的啥信息)。\n\n### 参考文献\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n","source":"_posts/JavaScript高级程序回顾-二-——请求资源的那些事儿.md","raw":"---\ntitle: JavaScript高级程序回顾(二)——请求资源的那些事儿\ndate: 2018-01-09 11:54:15\ntags:\n---\n\n### 以不变应万变的 XMLHttpRequest\n　　在这个横行使用 Ajax 的时代，很多人对待 XMLHttpRequest(简称 XHR)的态度都是：“哦，我知道这个东西”，“那你来使用它简单实现一下 Ajax 吧”，“emmm...”，不了了之。好，废话不多说，下面我们一起揭开 XHR 并不神秘的面纱吧。\n　　XHR 为向服务端发送请求和解析服务端响应提供了流畅的接口，能够以异步方式从服务端取得更多信息，是当今一系列异步请求的鼻祖。它最初是由微软发明的，后来被各大浏览器原生支持。\n\n#### XHR 的基本用法\n```\nvar xhr = new XMLHttpRequest();//创建 XHR 对象\nxhr.open('get', 'example.txt', false);//启动 XHR 请求，此时并没有真正发送请求\nxhr.send(null);//发送请求\n```\n　　上面的代码就完成了一个基本的 HTTP 请求，这里白话解释一下上面做了什么：使用 GET 方法，以同步的方式获取“当前页面/example.txt”资源。API 不深入解释，可以参考 [MDN 相关文档](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)。在我的解释中，不知大家有没有关注到“同步”两个字，我想这是我强调的关键：open 方法的第三个布尔值代表是否已同步的方式获取资源，有同步当然就有异步啦，这是令人激动的地方，所以说 XHR 是异步请求的鼻祖嘛，因为浏览器给我们原生提供了异步请求的方法，后续无论做多少封装，也万变不离其宗。\n\n### Ajax\n　　Ajax 的全称是 Asynchroronous JavaScript + XML(异步的 JavaScript 和 XML)，是一种无需重新加载整个网页的情况下，能够部分更新网页的技术。它基于 XHR，下面原生实现一版阉割版 Ajax ~\n```\nfunction ajax(options) {\n  options = options || {};\n  options.type = (options.type || 'GET').toUpperCase();\n  var params = formatParams(options.data);\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n      options.success && options.success(xhr.responseText, xhr.responseXML);\n    } else {\n      options.fail && options.fail(status);\n    }\n  };\n  if (options.type === 'GET') {\n    xhr.open('get', `${options.url}?${params}`, true);\n    xhr.send(null);\n  } else if (options.type === 'POST') {\n    xhr.open('post', options.url, true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');//模仿表单提交\n    xhr.send(params);\n  }\n}\n\n//格式化参数\nfunction formatParams(data) {\n  let result = [];\n  for (let key in data) {\n    result.push(`${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`)\n  }\n  return result.join('&');\n}\n```\n　　调用方式为：\n```\najax({\n  url: '/test',\n  type: 'POST',\n  data: { name: 'Julia', age: 23 },\n  success: function (responseText, responseXML) {\n    //此处放成功后执行的代码\n  },\n  fail: function (status) {\n    //此处放失败后执行的代码\n  }\n});\n```\n\n### 新兴的 Fetch\n　　在网上看到一句话“Ajax 已死，fetch 永生”，颇有标题党的意思。但是仔细想了想，不无道理。Ajax 过去再怎么辉煌，也离不开“封装”二字，尽管对 XHR 的封装已经做得非常好。而新兴的 fetch 既是浏览器的亲生骨肉，又能提供类似于 Ajax 的实现。所以，Ajax 被替代是指日可待的事情了。不过这里我就不太多赘述关于 fetch 的 API 啦（博主赶紧跑去学习学习...）。\n\n### 跨域技术\n　　跨域实在是很让人头疼的一件事，好在现在有不少流行的跨域技术。以我的角度来看，我更愿意把各样的跨域技术分为两类：需要服务端支持的和不需要服务端支持的。为什么这么分类呢？是因为跨域也要分跨谁的域，跨自家公司的其它域的时候，如果能在服务端做点手脚能省不少事；要是想跨别人的域呢，那就只能前端在浏览器里做点手脚啦，而且还不一定能得到自己想要的跨域结果~\n\n#### 需要服务端支持的跨域\n\n1. 跨域资源共享(CORS)\n　　CORS 的基本思想是：使用自定义的 HTTP 头部让浏览器与服务端进行沟通，从而决定请求或响应是应该成功，还是应该失败。整个 CORS 通信过程，都是浏览器自动完成，不会让用户感觉到与普通请求有任何差别。\n　　在使用 CORS 进行跨域时，浏览器会自动在请求头中加入 `Origin` 字段，指定本次请求来自哪个源(协议 + 域名 + 端口)，服务端会根据这个值来判断是否同意这次跨域请求。如果 `Origin` 指定的源不在许可范围内，服务端返回正常的 HTTP 回应，但是这次 HTTP 响应头中不包含 `Access-Control-Allow-Origin`，代表本次跨域请求失败，错误会被 XHR 的 onerror 回调函数捕获；如果 `Origin` 指定的源在许可范围内，就会在 HTTP 响应头中发现 `Access-Control-Allow-Origin` 字段，它的值可能是 `Origin` 传给服务端的值，也有可能是 *(代表公共资源)。\n　　以上说的 CORS 请求都是阮老师 [跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html) 一文中提到的简单请求，复杂请求会在第一次发送跨域请求时多一次 HTTP 请求，但是都是浏览器自动完成的，细节请参阅阮老师的文章。\n\n2. JSONP(JSON with padding)\n　　使用 JSONP 需要知道一个前提就是，script 标签本身就可以跨域的，将一个跨域请求放到 src 属性中即可。回想一下，你页面里引的 jQuery 源码是不是请求就是百度 CDN 上的资源呀？\n　　JSONP 是包含在函数调用中的 JSON，例如`callback({ \"name\": \"Julia\"})`。它由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数，回调函数的名字一般是在请求中指定的。而数据就是传入回调函数的 JSON 数据。\n　　这里有一个典型的 JSONP 请求：`http://freegeoip.net/json?callback=handleResponse`。我们来分析一下上面这句话。首先，这是一个 JSONP 请求，代表这个请求要获取的是包含 JSONP 格式的数据；然后看到请求的格式是在 URL 后面加一些参数，也就是 GET 请求的方式，划重点啦，*JSONP 只支持 GET 方式进行请求*；再接着看，参数是 `callback=handleResponse`，语义上来理解的话，代表回调函数是 handleResponse，那么意味着浏览器中肯定存在这个回调函数，并且在要请求的资源里，肯定具有 `callback({ \"name\": \"Julia\"})` 这种形式以便于调用函数。OK，分析完了这句话，我觉得 JSONP 的道理大家也应该都懂了吧。\n\n　　之所以将 JSONP 也归于需要服务端支持的跨域，与 CORS 的原因有很大差别。JSONP 的关键在于被请求的资源中需要包含 URL 中指定的函数并且调用它，以实现数据的跨域传输。所以，准确来说这并不是需要服务端的支持，而是需要被请求资源的支持。而 CORS 主要是通过头部信息进行跨域，所以毫无疑问需要服务端的支持。\n\n#### 不需要服务端支持的跨域\n\n图像 Ping\n　　与 script 标签类似，浏览器中还有一个标签可以跨域，那就是 img 标签。以我自己举例来说，没有什么可用的 CDN 服务器，可是发一篇文章又想图文并茂，所以往往会在微博上传一些图片，然后获取到图片的 URL 后再把微博删了...好像跑题了，意思就是在我的博客里你看到的好多图片，我用的都是新浪微博的静态图片资源。\n　　使用该方式进行跨域请求很简单，举例如下：\n```\nvar img = new Image();\nimg.onload = img.onerror = function() {\n  alert('Done!');\n};\nimg.src = 'http://www.example.com/test?name=Julia';\n```\n　　从上面这段很短的代码中，我想也是可以得到一些信息的。第一，使用图像 Ping 方式跨域只支持 GET 请求，这是 img 标签所决定的；第二，这是一种与服务端进行简单、单向的跨域通信的一种方式，请求的数据是以查询字符串形式发送的，而响应可以是任意内容，但是很可惜，并不能访问服务端的响应文本(隐含意思就是，你别想通过这个方式获取服务端的啥信息)。\n\n### 参考文献\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n","slug":"JavaScript高级程序回顾-二-——请求资源的那些事儿","published":1,"updated":"2018-01-18T02:24:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdb0006vxslf56crpps","content":"<h3 id=\"以不变应万变的-XMLHttpRequest\"><a href=\"#以不变应万变的-XMLHttpRequest\" class=\"headerlink\" title=\"以不变应万变的 XMLHttpRequest\"></a>以不变应万变的 XMLHttpRequest</h3><p>　　在这个横行使用 Ajax 的时代，很多人对待 XMLHttpRequest(简称 XHR)的态度都是：“哦，我知道这个东西”，“那你来使用它简单实现一下 Ajax 吧”，“emmm…”，不了了之。好，废话不多说，下面我们一起揭开 XHR 并不神秘的面纱吧。<br>　　XHR 为向服务端发送请求和解析服务端响应提供了流畅的接口，能够以异步方式从服务端取得更多信息，是当今一系列异步请求的鼻祖。它最初是由微软发明的，后来被各大浏览器原生支持。</p>\n<h4 id=\"XHR-的基本用法\"><a href=\"#XHR-的基本用法\" class=\"headerlink\" title=\"XHR 的基本用法\"></a>XHR 的基本用法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();//创建 XHR 对象</span><br><span class=\"line\">xhr.open(&apos;get&apos;, &apos;example.txt&apos;, false);//启动 XHR 请求，此时并没有真正发送请求</span><br><span class=\"line\">xhr.send(null);//发送请求</span><br></pre></td></tr></table></figure>\n<p>　　上面的代码就完成了一个基本的 HTTP 请求，这里白话解释一下上面做了什么：使用 GET 方法，以同步的方式获取“当前页面/example.txt”资源。API 不深入解释，可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">MDN 相关文档</a>。在我的解释中，不知大家有没有关注到“同步”两个字，我想这是我强调的关键：open 方法的第三个布尔值代表是否已同步的方式获取资源，有同步当然就有异步啦，这是令人激动的地方，所以说 XHR 是异步请求的鼻祖嘛，因为浏览器给我们原生提供了异步请求的方法，后续无论做多少封装，也万变不离其宗。</p>\n<h3 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h3><p>　　Ajax 的全称是 Asynchroronous JavaScript + XML(异步的 JavaScript 和 XML)，是一种无需重新加载整个网页的情况下，能够部分更新网页的技术。它基于 XHR，下面原生实现一版阉割版 Ajax ~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &apos;GET&apos;).toUpperCase();</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\">  var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  xhr.onreadystatechange = function() &#123;</span><br><span class=\"line\">    if (xhr.readyState === 4 &amp;&amp; xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304) &#123;</span><br><span class=\"line\">      options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  if (options.type === &apos;GET&apos;) &#123;</span><br><span class=\"line\">    xhr.open(&apos;get&apos;, `$&#123;options.url&#125;?$&#123;params&#125;`, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type === &apos;POST&apos;) &#123;</span><br><span class=\"line\">    xhr.open(&apos;post&apos;, options.url, true);</span><br><span class=\"line\">    xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;);//模仿表单提交</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  let result = [];</span><br><span class=\"line\">  for (let key in data) &#123;</span><br><span class=\"line\">    result.push(`$&#123;encodeURIComponent(key)&#125;=$&#123;encodeURIComponent(data[key])&#125;`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result.join(&apos;&amp;&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　调用方式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(&#123;</span><br><span class=\"line\">  url: &apos;/test&apos;,</span><br><span class=\"line\">  type: &apos;POST&apos;,</span><br><span class=\"line\">  data: &#123; name: &apos;Julia&apos;, age: 23 &#125;,</span><br><span class=\"line\">  success: function (responseText, responseXML) &#123;</span><br><span class=\"line\">    //此处放成功后执行的代码</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fail: function (status) &#123;</span><br><span class=\"line\">    //此处放失败后执行的代码</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"新兴的-Fetch\"><a href=\"#新兴的-Fetch\" class=\"headerlink\" title=\"新兴的 Fetch\"></a>新兴的 Fetch</h3><p>　　在网上看到一句话“Ajax 已死，fetch 永生”，颇有标题党的意思。但是仔细想了想，不无道理。Ajax 过去再怎么辉煌，也离不开“封装”二字，尽管对 XHR 的封装已经做得非常好。而新兴的 fetch 既是浏览器的亲生骨肉，又能提供类似于 Ajax 的实现。所以，Ajax 被替代是指日可待的事情了。不过这里我就不太多赘述关于 fetch 的 API 啦（博主赶紧跑去学习学习…）。</p>\n<h3 id=\"跨域技术\"><a href=\"#跨域技术\" class=\"headerlink\" title=\"跨域技术\"></a>跨域技术</h3><p>　　跨域实在是很让人头疼的一件事，好在现在有不少流行的跨域技术。以我的角度来看，我更愿意把各样的跨域技术分为两类：需要服务端支持的和不需要服务端支持的。为什么这么分类呢？是因为跨域也要分跨谁的域，跨自家公司的其它域的时候，如果能在服务端做点手脚能省不少事；要是想跨别人的域呢，那就只能前端在浏览器里做点手脚啦，而且还不一定能得到自己想要的跨域结果~</p>\n<h4 id=\"需要服务端支持的跨域\"><a href=\"#需要服务端支持的跨域\" class=\"headerlink\" title=\"需要服务端支持的跨域\"></a>需要服务端支持的跨域</h4><ol>\n<li><p>跨域资源共享(CORS)<br>　　CORS 的基本思想是：使用自定义的 HTTP 头部让浏览器与服务端进行沟通，从而决定请求或响应是应该成功，还是应该失败。整个 CORS 通信过程，都是浏览器自动完成，不会让用户感觉到与普通请求有任何差别。<br>　　在使用 CORS 进行跨域时，浏览器会自动在请求头中加入 <code>Origin</code> 字段，指定本次请求来自哪个源(协议 + 域名 + 端口)，服务端会根据这个值来判断是否同意这次跨域请求。如果 <code>Origin</code> 指定的源不在许可范围内，服务端返回正常的 HTTP 回应，但是这次 HTTP 响应头中不包含 <code>Access-Control-Allow-Origin</code>，代表本次跨域请求失败，错误会被 XHR 的 onerror 回调函数捕获；如果 <code>Origin</code> 指定的源在许可范围内，就会在 HTTP 响应头中发现 <code>Access-Control-Allow-Origin</code> 字段，它的值可能是 <code>Origin</code> 传给服务端的值，也有可能是 *(代表公共资源)。<br>　　以上说的 CORS 请求都是阮老师 <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"external\">跨域资源共享 CORS 详解</a> 一文中提到的简单请求，复杂请求会在第一次发送跨域请求时多一次 HTTP 请求，但是都是浏览器自动完成的，细节请参阅阮老师的文章。</p>\n</li>\n<li><p>JSONP(JSON with padding)<br>　　使用 JSONP 需要知道一个前提就是，script 标签本身就可以跨域的，将一个跨域请求放到 src 属性中即可。回想一下，你页面里引的 jQuery 源码是不是请求就是百度 CDN 上的资源呀？<br>　　JSONP 是包含在函数调用中的 JSON，例如<code>callback({ &quot;name&quot;: &quot;Julia&quot;})</code>。它由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数，回调函数的名字一般是在请求中指定的。而数据就是传入回调函数的 JSON 数据。<br>　　这里有一个典型的 JSONP 请求：<code>http://freegeoip.net/json?callback=handleResponse</code>。我们来分析一下上面这句话。首先，这是一个 JSONP 请求，代表这个请求要获取的是包含 JSONP 格式的数据；然后看到请求的格式是在 URL 后面加一些参数，也就是 GET 请求的方式，划重点啦，<em>JSONP 只支持 GET 方式进行请求</em>；再接着看，参数是 <code>callback=handleResponse</code>，语义上来理解的话，代表回调函数是 handleResponse，那么意味着浏览器中肯定存在这个回调函数，并且在要请求的资源里，肯定具有 <code>callback({ &quot;name&quot;: &quot;Julia&quot;})</code> 这种形式以便于调用函数。OK，分析完了这句话，我觉得 JSONP 的道理大家也应该都懂了吧。</p>\n</li>\n</ol>\n<p>　　之所以将 JSONP 也归于需要服务端支持的跨域，与 CORS 的原因有很大差别。JSONP 的关键在于被请求的资源中需要包含 URL 中指定的函数并且调用它，以实现数据的跨域传输。所以，准确来说这并不是需要服务端的支持，而是需要被请求资源的支持。而 CORS 主要是通过头部信息进行跨域，所以毫无疑问需要服务端的支持。</p>\n<h4 id=\"不需要服务端支持的跨域\"><a href=\"#不需要服务端支持的跨域\" class=\"headerlink\" title=\"不需要服务端支持的跨域\"></a>不需要服务端支持的跨域</h4><p>图像 Ping<br>　　与 script 标签类似，浏览器中还有一个标签可以跨域，那就是 img 标签。以我自己举例来说，没有什么可用的 CDN 服务器，可是发一篇文章又想图文并茂，所以往往会在微博上传一些图片，然后获取到图片的 URL 后再把微博删了…好像跑题了，意思就是在我的博客里你看到的好多图片，我用的都是新浪微博的静态图片资源。<br>　　使用该方式进行跨域请求很简单，举例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var img = new Image();</span><br><span class=\"line\">img.onload = img.onerror = function() &#123;</span><br><span class=\"line\">  alert(&apos;Done!&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">img.src = &apos;http://www.example.com/test?name=Julia&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>　　从上面这段很短的代码中，我想也是可以得到一些信息的。第一，使用图像 Ping 方式跨域只支持 GET 请求，这是 img 标签所决定的；第二，这是一种与服务端进行简单、单向的跨域通信的一种方式，请求的数据是以查询字符串形式发送的，而响应可以是任意内容，但是很可惜，并不能访问服务端的响应文本(隐含意思就是，你别想通过这个方式获取服务端的啥信息)。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"external\">跨域资源共享 CORS 详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"以不变应万变的-XMLHttpRequest\"><a href=\"#以不变应万变的-XMLHttpRequest\" class=\"headerlink\" title=\"以不变应万变的 XMLHttpRequest\"></a>以不变应万变的 XMLHttpRequest</h3><p>　　在这个横行使用 Ajax 的时代，很多人对待 XMLHttpRequest(简称 XHR)的态度都是：“哦，我知道这个东西”，“那你来使用它简单实现一下 Ajax 吧”，“emmm…”，不了了之。好，废话不多说，下面我们一起揭开 XHR 并不神秘的面纱吧。<br>　　XHR 为向服务端发送请求和解析服务端响应提供了流畅的接口，能够以异步方式从服务端取得更多信息，是当今一系列异步请求的鼻祖。它最初是由微软发明的，后来被各大浏览器原生支持。</p>\n<h4 id=\"XHR-的基本用法\"><a href=\"#XHR-的基本用法\" class=\"headerlink\" title=\"XHR 的基本用法\"></a>XHR 的基本用法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();//创建 XHR 对象</span><br><span class=\"line\">xhr.open(&apos;get&apos;, &apos;example.txt&apos;, false);//启动 XHR 请求，此时并没有真正发送请求</span><br><span class=\"line\">xhr.send(null);//发送请求</span><br></pre></td></tr></table></figure>\n<p>　　上面的代码就完成了一个基本的 HTTP 请求，这里白话解释一下上面做了什么：使用 GET 方法，以同步的方式获取“当前页面/example.txt”资源。API 不深入解释，可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">MDN 相关文档</a>。在我的解释中，不知大家有没有关注到“同步”两个字，我想这是我强调的关键：open 方法的第三个布尔值代表是否已同步的方式获取资源，有同步当然就有异步啦，这是令人激动的地方，所以说 XHR 是异步请求的鼻祖嘛，因为浏览器给我们原生提供了异步请求的方法，后续无论做多少封装，也万变不离其宗。</p>\n<h3 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h3><p>　　Ajax 的全称是 Asynchroronous JavaScript + XML(异步的 JavaScript 和 XML)，是一种无需重新加载整个网页的情况下，能够部分更新网页的技术。它基于 XHR，下面原生实现一版阉割版 Ajax ~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &apos;GET&apos;).toUpperCase();</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\">  var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  xhr.onreadystatechange = function() &#123;</span><br><span class=\"line\">    if (xhr.readyState === 4 &amp;&amp; xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304) &#123;</span><br><span class=\"line\">      options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  if (options.type === &apos;GET&apos;) &#123;</span><br><span class=\"line\">    xhr.open(&apos;get&apos;, `$&#123;options.url&#125;?$&#123;params&#125;`, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type === &apos;POST&apos;) &#123;</span><br><span class=\"line\">    xhr.open(&apos;post&apos;, options.url, true);</span><br><span class=\"line\">    xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;);//模仿表单提交</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  let result = [];</span><br><span class=\"line\">  for (let key in data) &#123;</span><br><span class=\"line\">    result.push(`$&#123;encodeURIComponent(key)&#125;=$&#123;encodeURIComponent(data[key])&#125;`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result.join(&apos;&amp;&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　调用方式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(&#123;</span><br><span class=\"line\">  url: &apos;/test&apos;,</span><br><span class=\"line\">  type: &apos;POST&apos;,</span><br><span class=\"line\">  data: &#123; name: &apos;Julia&apos;, age: 23 &#125;,</span><br><span class=\"line\">  success: function (responseText, responseXML) &#123;</span><br><span class=\"line\">    //此处放成功后执行的代码</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fail: function (status) &#123;</span><br><span class=\"line\">    //此处放失败后执行的代码</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"新兴的-Fetch\"><a href=\"#新兴的-Fetch\" class=\"headerlink\" title=\"新兴的 Fetch\"></a>新兴的 Fetch</h3><p>　　在网上看到一句话“Ajax 已死，fetch 永生”，颇有标题党的意思。但是仔细想了想，不无道理。Ajax 过去再怎么辉煌，也离不开“封装”二字，尽管对 XHR 的封装已经做得非常好。而新兴的 fetch 既是浏览器的亲生骨肉，又能提供类似于 Ajax 的实现。所以，Ajax 被替代是指日可待的事情了。不过这里我就不太多赘述关于 fetch 的 API 啦（博主赶紧跑去学习学习…）。</p>\n<h3 id=\"跨域技术\"><a href=\"#跨域技术\" class=\"headerlink\" title=\"跨域技术\"></a>跨域技术</h3><p>　　跨域实在是很让人头疼的一件事，好在现在有不少流行的跨域技术。以我的角度来看，我更愿意把各样的跨域技术分为两类：需要服务端支持的和不需要服务端支持的。为什么这么分类呢？是因为跨域也要分跨谁的域，跨自家公司的其它域的时候，如果能在服务端做点手脚能省不少事；要是想跨别人的域呢，那就只能前端在浏览器里做点手脚啦，而且还不一定能得到自己想要的跨域结果~</p>\n<h4 id=\"需要服务端支持的跨域\"><a href=\"#需要服务端支持的跨域\" class=\"headerlink\" title=\"需要服务端支持的跨域\"></a>需要服务端支持的跨域</h4><ol>\n<li><p>跨域资源共享(CORS)<br>　　CORS 的基本思想是：使用自定义的 HTTP 头部让浏览器与服务端进行沟通，从而决定请求或响应是应该成功，还是应该失败。整个 CORS 通信过程，都是浏览器自动完成，不会让用户感觉到与普通请求有任何差别。<br>　　在使用 CORS 进行跨域时，浏览器会自动在请求头中加入 <code>Origin</code> 字段，指定本次请求来自哪个源(协议 + 域名 + 端口)，服务端会根据这个值来判断是否同意这次跨域请求。如果 <code>Origin</code> 指定的源不在许可范围内，服务端返回正常的 HTTP 回应，但是这次 HTTP 响应头中不包含 <code>Access-Control-Allow-Origin</code>，代表本次跨域请求失败，错误会被 XHR 的 onerror 回调函数捕获；如果 <code>Origin</code> 指定的源在许可范围内，就会在 HTTP 响应头中发现 <code>Access-Control-Allow-Origin</code> 字段，它的值可能是 <code>Origin</code> 传给服务端的值，也有可能是 *(代表公共资源)。<br>　　以上说的 CORS 请求都是阮老师 <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"external\">跨域资源共享 CORS 详解</a> 一文中提到的简单请求，复杂请求会在第一次发送跨域请求时多一次 HTTP 请求，但是都是浏览器自动完成的，细节请参阅阮老师的文章。</p>\n</li>\n<li><p>JSONP(JSON with padding)<br>　　使用 JSONP 需要知道一个前提就是，script 标签本身就可以跨域的，将一个跨域请求放到 src 属性中即可。回想一下，你页面里引的 jQuery 源码是不是请求就是百度 CDN 上的资源呀？<br>　　JSONP 是包含在函数调用中的 JSON，例如<code>callback({ &quot;name&quot;: &quot;Julia&quot;})</code>。它由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数，回调函数的名字一般是在请求中指定的。而数据就是传入回调函数的 JSON 数据。<br>　　这里有一个典型的 JSONP 请求：<code>http://freegeoip.net/json?callback=handleResponse</code>。我们来分析一下上面这句话。首先，这是一个 JSONP 请求，代表这个请求要获取的是包含 JSONP 格式的数据；然后看到请求的格式是在 URL 后面加一些参数，也就是 GET 请求的方式，划重点啦，<em>JSONP 只支持 GET 方式进行请求</em>；再接着看，参数是 <code>callback=handleResponse</code>，语义上来理解的话，代表回调函数是 handleResponse，那么意味着浏览器中肯定存在这个回调函数，并且在要请求的资源里，肯定具有 <code>callback({ &quot;name&quot;: &quot;Julia&quot;})</code> 这种形式以便于调用函数。OK，分析完了这句话，我觉得 JSONP 的道理大家也应该都懂了吧。</p>\n</li>\n</ol>\n<p>　　之所以将 JSONP 也归于需要服务端支持的跨域，与 CORS 的原因有很大差别。JSONP 的关键在于被请求的资源中需要包含 URL 中指定的函数并且调用它，以实现数据的跨域传输。所以，准确来说这并不是需要服务端的支持，而是需要被请求资源的支持。而 CORS 主要是通过头部信息进行跨域，所以毫无疑问需要服务端的支持。</p>\n<h4 id=\"不需要服务端支持的跨域\"><a href=\"#不需要服务端支持的跨域\" class=\"headerlink\" title=\"不需要服务端支持的跨域\"></a>不需要服务端支持的跨域</h4><p>图像 Ping<br>　　与 script 标签类似，浏览器中还有一个标签可以跨域，那就是 img 标签。以我自己举例来说，没有什么可用的 CDN 服务器，可是发一篇文章又想图文并茂，所以往往会在微博上传一些图片，然后获取到图片的 URL 后再把微博删了…好像跑题了，意思就是在我的博客里你看到的好多图片，我用的都是新浪微博的静态图片资源。<br>　　使用该方式进行跨域请求很简单，举例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var img = new Image();</span><br><span class=\"line\">img.onload = img.onerror = function() &#123;</span><br><span class=\"line\">  alert(&apos;Done!&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">img.src = &apos;http://www.example.com/test?name=Julia&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>　　从上面这段很短的代码中，我想也是可以得到一些信息的。第一，使用图像 Ping 方式跨域只支持 GET 请求，这是 img 标签所决定的；第二，这是一种与服务端进行简单、单向的跨域通信的一种方式，请求的数据是以查询字符串形式发送的，而响应可以是任意内容，但是很可惜，并不能访问服务端的响应文本(隐含意思就是，你别想通过这个方式获取服务端的啥信息)。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"external\">跨域资源共享 CORS 详解</a></p>\n"},{"title":"Mac下的Hadoop2.7.3环境配置","date":"2017-12-19T07:05:24.000Z","_content":"\n## 前提条件：Java环境配置没问题\n## 配置过程\n1. 配置Hadoop环境变量\n  - 官网上下载Hadoop 2.7.3 二进制压缩包，并进行解压\n  - 配置Hadoop环境变量，在~/.bash_profile文件末尾添加\n  ```这里引用自己真实的安装目录\n  export HADOOP_HOME=/Users/zhuyali/prjs/hadoop\n  export PATH=\"$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$JAVA_HOME/bin\" \n  ```\n  添加完成后，编译该文件使其立即生效。`source ~/.bash_profile`\n  - 然后在命令行输入`hadoop version`可以查看到Hadoop的版本信息，那么说明至此步骤已经全部正确完成\n\n2. 创建目录，后续配置文件中会用到\n  ```在Hadoop目录下\n  $ mkdir tmp\n  $ mkdir hdfs\n  $ mkdir hdfs/data\n  $ mkdir hdfs/name\n  ```\n\n\n3. 修改Hadoop目录/etc/hadoop/hadoop-env.sh文件，在该文件末尾添加\n  ```\n  export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home\n  ```\n\n4. 修改Hadoop目录/etc/hadoop/yarn-env.sh文件，在该文件末尾添加\n  ```\n  export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home\n  ```\n\n5. 修改Hadoop目录/etc/hadoop/core-site.xml文件，设置临时目录和文件系统\n  ```\n  <configuration>\n    <property>  \n      <name>fs.default.name</name>  \n        <value>hdfs://localhost:9000</value>  \n        <description>HDFS的URL(文件系统:namenode标识:端口号)</description>  \n      </property>  \n      <property>  \n        <name>hadoop.tmp.dir</name>  \n        <value>/Users/zhuyali/prjs/hadoop/tmp</value>  \n        <description>本地hadoop临时文件夹</description>  \n      </property>  \n  </configuration>\n  ```\n\n6. 修改Hadoop目录/etc/hadoop/hdfs-site.xml文件\n  ```\n  <configuration>\n    <property>  \n      <name>dfs.name.dir</name>  \n      <value>/Users/zhuyali/prjs/hadoop/hdfs/name</value>  \n      <description>用于确定将HDFS文件系统的元信息保存在什么目录下</description>  \n    </property>  \n    <property>  \n      <name>dfs.data.dir</name>  \n      <value>/Users/zhuyali/prjs/hadoop/hdfs/data</value>  \n      <description>用于确定将HDFS文件系统的数据保存在什么目录下</description>  \n    </property>  \n    <property>  \n      <name>dfs.replication</name>  \n      <value>1</value>  \n      <description>副本个数，应该小于datanode机器数量，默认情况为3</description>  \n    </property>  \n  </configuration>\n  ```\n\n7. 修改Hadoop目录/etc/hadoop/yarn-site.xml文件\n  ```\n  <configuration>\n  <!-- Site specific YARN configuration properties -->\n    <property>  \n      <name>yarn.nodemanager.aux-services</name>  \n      <value>mapreduce_shuffle</value>  \n    </property>  \n    <property>  \n      <name>yarn.resourcemanager.webapp.address</name>  \n      <value>localhost:8099</value>  \n    </property>  \n  </configuration>\n  ```\n\n8. 修改Hadoop目录/etc/hadoop/mapred-site.xml\n  ```\n  <configuration>\n    <property>\n      <name>mapreduce.framework.name</name>\n      <value>yarn</value>\n    </property>\n  </configuration>\n  ```\n\n9. 配置SSH密码\n  运行该命令，看是否需要输入密码\n  ```\n  $ ssh localhost\n  ```\n  如果需要输入密码，则执行下面的命令\n  ```\n  $ ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\n  $ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n  $ chmod 0600 ~/.ssh/authorized_keys\n  ```\n\n## 运行过程\n1. 格式化NameNode，仅在第一次启动Hadoop时运行该命令\n  ```\n  $ bin/hdfs namenode -format\n  ```\n\n2. 启动HDFS\n  ```\n  $ sbin/start-dfs.sh  \n  ```\n\n3. 启动yarn\n  ```\n  $ sbin/start-yarn.sh \n  ```\n\n4. 查看进程\n  ```\n  $ jps\n  ```\n  然后出现类似下图的效果，则启动正确\n\n  ![](https://wx4.sinaimg.cn/mw690/79b5b053gy1fmm27hzfknj204p02raaf.jpg)\n\n  此时可以通过 http://localhost:50070 查看HDFS的web页面\n\n## 示例代码Wordcount运行\n1. 创建输入目录\n  ```\n  $ hadoop fs -mkdir /input\n  ```\n\n2. 将Hadoop目录下的README.txt文件上传到HDFS输入目录下\n  ```\n  $ hadoop fs -put README.txt /input\n  ```\n\n3. 运行Wordcount程序\n  ```\n  $ hadoop jar hadoop-mapreduce-examples-2.7.3.jar wordcount /input /output\n  ```\n\n4. 查看结果\n  ```\n  $ hadoop fs -cat /output/par*\n  ```\n\n## 遇到的问题\n有时候会遇到执行 `jps` 后，发现 datanode 没有启动的问题。一种可能的解决方案为：\n```进入到存放HDFS元信息的文件夹中\n$ cd /Users/zhuyali/prjs/hadoop/hdfs/name/current\n```\n然后将该目录下 VERSION 文件中的 clusterId 复制到\n```\n$ cd /Users/zhuyali/prjs/hadoop/hdfs/data/current\n```\n该文件夹下的 VERSION 文件中的 clusterId 处\n\n出现该问题的原因是：在第一次格式化 dfs 后，启动并使用了 hadoop，后来又重新执行了格式化命令(hdfs namenode -format)，这时 namenode 的 clusterID 会重新生成，而 datanode 的 clusterID 保持不变。","source":"_posts/Mac下的Hadoop2-7-3环境配置.md","raw":"---\ntitle: Mac下的Hadoop2.7.3环境配置\ndate: 2017-12-19 15:05:24\ntags:\n---\n\n## 前提条件：Java环境配置没问题\n## 配置过程\n1. 配置Hadoop环境变量\n  - 官网上下载Hadoop 2.7.3 二进制压缩包，并进行解压\n  - 配置Hadoop环境变量，在~/.bash_profile文件末尾添加\n  ```这里引用自己真实的安装目录\n  export HADOOP_HOME=/Users/zhuyali/prjs/hadoop\n  export PATH=\"$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$JAVA_HOME/bin\" \n  ```\n  添加完成后，编译该文件使其立即生效。`source ~/.bash_profile`\n  - 然后在命令行输入`hadoop version`可以查看到Hadoop的版本信息，那么说明至此步骤已经全部正确完成\n\n2. 创建目录，后续配置文件中会用到\n  ```在Hadoop目录下\n  $ mkdir tmp\n  $ mkdir hdfs\n  $ mkdir hdfs/data\n  $ mkdir hdfs/name\n  ```\n\n\n3. 修改Hadoop目录/etc/hadoop/hadoop-env.sh文件，在该文件末尾添加\n  ```\n  export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home\n  ```\n\n4. 修改Hadoop目录/etc/hadoop/yarn-env.sh文件，在该文件末尾添加\n  ```\n  export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home\n  ```\n\n5. 修改Hadoop目录/etc/hadoop/core-site.xml文件，设置临时目录和文件系统\n  ```\n  <configuration>\n    <property>  \n      <name>fs.default.name</name>  \n        <value>hdfs://localhost:9000</value>  \n        <description>HDFS的URL(文件系统:namenode标识:端口号)</description>  \n      </property>  \n      <property>  \n        <name>hadoop.tmp.dir</name>  \n        <value>/Users/zhuyali/prjs/hadoop/tmp</value>  \n        <description>本地hadoop临时文件夹</description>  \n      </property>  \n  </configuration>\n  ```\n\n6. 修改Hadoop目录/etc/hadoop/hdfs-site.xml文件\n  ```\n  <configuration>\n    <property>  \n      <name>dfs.name.dir</name>  \n      <value>/Users/zhuyali/prjs/hadoop/hdfs/name</value>  \n      <description>用于确定将HDFS文件系统的元信息保存在什么目录下</description>  \n    </property>  \n    <property>  \n      <name>dfs.data.dir</name>  \n      <value>/Users/zhuyali/prjs/hadoop/hdfs/data</value>  \n      <description>用于确定将HDFS文件系统的数据保存在什么目录下</description>  \n    </property>  \n    <property>  \n      <name>dfs.replication</name>  \n      <value>1</value>  \n      <description>副本个数，应该小于datanode机器数量，默认情况为3</description>  \n    </property>  \n  </configuration>\n  ```\n\n7. 修改Hadoop目录/etc/hadoop/yarn-site.xml文件\n  ```\n  <configuration>\n  <!-- Site specific YARN configuration properties -->\n    <property>  \n      <name>yarn.nodemanager.aux-services</name>  \n      <value>mapreduce_shuffle</value>  \n    </property>  \n    <property>  \n      <name>yarn.resourcemanager.webapp.address</name>  \n      <value>localhost:8099</value>  \n    </property>  \n  </configuration>\n  ```\n\n8. 修改Hadoop目录/etc/hadoop/mapred-site.xml\n  ```\n  <configuration>\n    <property>\n      <name>mapreduce.framework.name</name>\n      <value>yarn</value>\n    </property>\n  </configuration>\n  ```\n\n9. 配置SSH密码\n  运行该命令，看是否需要输入密码\n  ```\n  $ ssh localhost\n  ```\n  如果需要输入密码，则执行下面的命令\n  ```\n  $ ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\n  $ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n  $ chmod 0600 ~/.ssh/authorized_keys\n  ```\n\n## 运行过程\n1. 格式化NameNode，仅在第一次启动Hadoop时运行该命令\n  ```\n  $ bin/hdfs namenode -format\n  ```\n\n2. 启动HDFS\n  ```\n  $ sbin/start-dfs.sh  \n  ```\n\n3. 启动yarn\n  ```\n  $ sbin/start-yarn.sh \n  ```\n\n4. 查看进程\n  ```\n  $ jps\n  ```\n  然后出现类似下图的效果，则启动正确\n\n  ![](https://wx4.sinaimg.cn/mw690/79b5b053gy1fmm27hzfknj204p02raaf.jpg)\n\n  此时可以通过 http://localhost:50070 查看HDFS的web页面\n\n## 示例代码Wordcount运行\n1. 创建输入目录\n  ```\n  $ hadoop fs -mkdir /input\n  ```\n\n2. 将Hadoop目录下的README.txt文件上传到HDFS输入目录下\n  ```\n  $ hadoop fs -put README.txt /input\n  ```\n\n3. 运行Wordcount程序\n  ```\n  $ hadoop jar hadoop-mapreduce-examples-2.7.3.jar wordcount /input /output\n  ```\n\n4. 查看结果\n  ```\n  $ hadoop fs -cat /output/par*\n  ```\n\n## 遇到的问题\n有时候会遇到执行 `jps` 后，发现 datanode 没有启动的问题。一种可能的解决方案为：\n```进入到存放HDFS元信息的文件夹中\n$ cd /Users/zhuyali/prjs/hadoop/hdfs/name/current\n```\n然后将该目录下 VERSION 文件中的 clusterId 复制到\n```\n$ cd /Users/zhuyali/prjs/hadoop/hdfs/data/current\n```\n该文件夹下的 VERSION 文件中的 clusterId 处\n\n出现该问题的原因是：在第一次格式化 dfs 后，启动并使用了 hadoop，后来又重新执行了格式化命令(hdfs namenode -format)，这时 namenode 的 clusterID 会重新生成，而 datanode 的 clusterID 保持不变。","slug":"Mac下的Hadoop2-7-3环境配置","published":1,"updated":"2018-01-16T06:04:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdc0007vxsl42esd7qv","content":"<h2 id=\"前提条件：Java环境配置没问题\"><a href=\"#前提条件：Java环境配置没问题\" class=\"headerlink\" title=\"前提条件：Java环境配置没问题\"></a>前提条件：Java环境配置没问题</h2><h2 id=\"配置过程\"><a href=\"#配置过程\" class=\"headerlink\" title=\"配置过程\"></a>配置过程</h2><ol>\n<li><p>配置Hadoop环境变量</p>\n<ul>\n<li>官网上下载Hadoop 2.7.3 二进制压缩包，并进行解压</li>\n<li>配置Hadoop环境变量，在~/.bash_profile文件末尾添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HADOOP_HOME=/Users/zhuyali/prjs/hadoop</span><br><span class=\"line\">export PATH=&quot;$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$JAVA_HOME/bin&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>添加完成后，编译该文件使其立即生效。<code>source ~/.bash_profile</code></p>\n<ul>\n<li>然后在命令行输入<code>hadoop version</code>可以查看到Hadoop的版本信息，那么说明至此步骤已经全部正确完成</li>\n</ul>\n</li>\n<li><p>创建目录，后续配置文件中会用到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir tmp</span><br><span class=\"line\">$ mkdir hdfs</span><br><span class=\"line\">$ mkdir hdfs/data</span><br><span class=\"line\">$ mkdir hdfs/name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/hadoop-env.sh文件，在该文件末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/yarn-env.sh文件，在该文件末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/core-site.xml文件，设置临时目录和文件系统</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;fs.default.name&lt;/name&gt;  </span><br><span class=\"line\">      &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;  </span><br><span class=\"line\">      &lt;description&gt;HDFS的URL(文件系统:namenode标识:端口号)&lt;/description&gt;  </span><br><span class=\"line\">    &lt;/property&gt;  </span><br><span class=\"line\">    &lt;property&gt;  </span><br><span class=\"line\">      &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;  </span><br><span class=\"line\">      &lt;value&gt;/Users/zhuyali/prjs/hadoop/tmp&lt;/value&gt;  </span><br><span class=\"line\">      &lt;description&gt;本地hadoop临时文件夹&lt;/description&gt;  </span><br><span class=\"line\">    &lt;/property&gt;  </span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/hdfs-site.xml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;dfs.name.dir&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;/Users/zhuyali/prjs/hadoop/hdfs/name&lt;/value&gt;  </span><br><span class=\"line\">    &lt;description&gt;用于确定将HDFS文件系统的元信息保存在什么目录下&lt;/description&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;dfs.data.dir&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;/Users/zhuyali/prjs/hadoop/hdfs/data&lt;/value&gt;  </span><br><span class=\"line\">    &lt;description&gt;用于确定将HDFS文件系统的数据保存在什么目录下&lt;/description&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;dfs.replication&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;1&lt;/value&gt;  </span><br><span class=\"line\">    &lt;description&gt;副本个数，应该小于datanode机器数量，默认情况为3&lt;/description&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/yarn-site.xml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;localhost:8099&lt;/value&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/mapred-site.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class=\"line\">  &lt;/property&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置SSH密码<br>运行该命令，看是否需要输入密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh localhost</span><br></pre></td></tr></table></figure>\n<p>如果需要输入密码，则执行下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa</span><br><span class=\"line\">$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">$ chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"运行过程\"><a href=\"#运行过程\" class=\"headerlink\" title=\"运行过程\"></a>运行过程</h2><ol>\n<li><p>格式化NameNode，仅在第一次启动Hadoop时运行该命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动HDFS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动yarn</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jps</span><br></pre></td></tr></table></figure>\n<p>然后出现类似下图的效果，则启动正确</p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/79b5b053gy1fmm27hzfknj204p02raaf.jpg\" alt=\"\"></p>\n<p>此时可以通过 <a href=\"http://localhost:50070\" target=\"_blank\" rel=\"external\">http://localhost:50070</a> 查看HDFS的web页面</p>\n</li>\n</ol>\n<h2 id=\"示例代码Wordcount运行\"><a href=\"#示例代码Wordcount运行\" class=\"headerlink\" title=\"示例代码Wordcount运行\"></a>示例代码Wordcount运行</h2><ol>\n<li><p>创建输入目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -mkdir /input</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将Hadoop目录下的README.txt文件上传到HDFS输入目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -put README.txt /input</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行Wordcount程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop jar hadoop-mapreduce-examples-2.7.3.jar wordcount /input /output</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /output/par*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>有时候会遇到执行 <code>jps</code> 后，发现 datanode 没有启动的问题。一种可能的解决方案为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Users/zhuyali/prjs/hadoop/hdfs/name/current</span><br></pre></td></tr></table></figure></p>\n<p>然后将该目录下 VERSION 文件中的 clusterId 复制到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Users/zhuyali/prjs/hadoop/hdfs/data/current</span><br></pre></td></tr></table></figure></p>\n<p>该文件夹下的 VERSION 文件中的 clusterId 处</p>\n<p>出现该问题的原因是：在第一次格式化 dfs 后，启动并使用了 hadoop，后来又重新执行了格式化命令(hdfs namenode -format)，这时 namenode 的 clusterID 会重新生成，而 datanode 的 clusterID 保持不变。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前提条件：Java环境配置没问题\"><a href=\"#前提条件：Java环境配置没问题\" class=\"headerlink\" title=\"前提条件：Java环境配置没问题\"></a>前提条件：Java环境配置没问题</h2><h2 id=\"配置过程\"><a href=\"#配置过程\" class=\"headerlink\" title=\"配置过程\"></a>配置过程</h2><ol>\n<li><p>配置Hadoop环境变量</p>\n<ul>\n<li>官网上下载Hadoop 2.7.3 二进制压缩包，并进行解压</li>\n<li>配置Hadoop环境变量，在~/.bash_profile文件末尾添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HADOOP_HOME=/Users/zhuyali/prjs/hadoop</span><br><span class=\"line\">export PATH=&quot;$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$JAVA_HOME/bin&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>添加完成后，编译该文件使其立即生效。<code>source ~/.bash_profile</code></p>\n<ul>\n<li>然后在命令行输入<code>hadoop version</code>可以查看到Hadoop的版本信息，那么说明至此步骤已经全部正确完成</li>\n</ul>\n</li>\n<li><p>创建目录，后续配置文件中会用到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir tmp</span><br><span class=\"line\">$ mkdir hdfs</span><br><span class=\"line\">$ mkdir hdfs/data</span><br><span class=\"line\">$ mkdir hdfs/name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/hadoop-env.sh文件，在该文件末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/yarn-env.sh文件，在该文件末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/core-site.xml文件，设置临时目录和文件系统</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;fs.default.name&lt;/name&gt;  </span><br><span class=\"line\">      &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;  </span><br><span class=\"line\">      &lt;description&gt;HDFS的URL(文件系统:namenode标识:端口号)&lt;/description&gt;  </span><br><span class=\"line\">    &lt;/property&gt;  </span><br><span class=\"line\">    &lt;property&gt;  </span><br><span class=\"line\">      &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;  </span><br><span class=\"line\">      &lt;value&gt;/Users/zhuyali/prjs/hadoop/tmp&lt;/value&gt;  </span><br><span class=\"line\">      &lt;description&gt;本地hadoop临时文件夹&lt;/description&gt;  </span><br><span class=\"line\">    &lt;/property&gt;  </span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/hdfs-site.xml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;dfs.name.dir&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;/Users/zhuyali/prjs/hadoop/hdfs/name&lt;/value&gt;  </span><br><span class=\"line\">    &lt;description&gt;用于确定将HDFS文件系统的元信息保存在什么目录下&lt;/description&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;dfs.data.dir&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;/Users/zhuyali/prjs/hadoop/hdfs/data&lt;/value&gt;  </span><br><span class=\"line\">    &lt;description&gt;用于确定将HDFS文件系统的数据保存在什么目录下&lt;/description&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;dfs.replication&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;1&lt;/value&gt;  </span><br><span class=\"line\">    &lt;description&gt;副本个数，应该小于datanode机器数量，默认情况为3&lt;/description&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/yarn-site.xml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">  &lt;property&gt;  </span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;  </span><br><span class=\"line\">    &lt;value&gt;localhost:8099&lt;/value&gt;  </span><br><span class=\"line\">  &lt;/property&gt;  </span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Hadoop目录/etc/hadoop/mapred-site.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class=\"line\">  &lt;/property&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置SSH密码<br>运行该命令，看是否需要输入密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh localhost</span><br></pre></td></tr></table></figure>\n<p>如果需要输入密码，则执行下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa</span><br><span class=\"line\">$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">$ chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"运行过程\"><a href=\"#运行过程\" class=\"headerlink\" title=\"运行过程\"></a>运行过程</h2><ol>\n<li><p>格式化NameNode，仅在第一次启动Hadoop时运行该命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动HDFS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动yarn</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jps</span><br></pre></td></tr></table></figure>\n<p>然后出现类似下图的效果，则启动正确</p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/79b5b053gy1fmm27hzfknj204p02raaf.jpg\" alt=\"\"></p>\n<p>此时可以通过 <a href=\"http://localhost:50070\" target=\"_blank\" rel=\"external\">http://localhost:50070</a> 查看HDFS的web页面</p>\n</li>\n</ol>\n<h2 id=\"示例代码Wordcount运行\"><a href=\"#示例代码Wordcount运行\" class=\"headerlink\" title=\"示例代码Wordcount运行\"></a>示例代码Wordcount运行</h2><ol>\n<li><p>创建输入目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -mkdir /input</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将Hadoop目录下的README.txt文件上传到HDFS输入目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -put README.txt /input</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行Wordcount程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop jar hadoop-mapreduce-examples-2.7.3.jar wordcount /input /output</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /output/par*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>有时候会遇到执行 <code>jps</code> 后，发现 datanode 没有启动的问题。一种可能的解决方案为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Users/zhuyali/prjs/hadoop/hdfs/name/current</span><br></pre></td></tr></table></figure></p>\n<p>然后将该目录下 VERSION 文件中的 clusterId 复制到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Users/zhuyali/prjs/hadoop/hdfs/data/current</span><br></pre></td></tr></table></figure></p>\n<p>该文件夹下的 VERSION 文件中的 clusterId 处</p>\n<p>出现该问题的原因是：在第一次格式化 dfs 后，启动并使用了 hadoop，后来又重新执行了格式化命令(hdfs namenode -format)，这时 namenode 的 clusterID 会重新生成，而 datanode 的 clusterID 保持不变。</p>\n"},{"title":"JS设计模式之工厂模式","date":"2018-01-16T09:50:03.000Z","_content":"\n### 简单工厂模式\n\n![](//wx3.sinaimg.cn/mw690/79b5b053gy1fnilnnymb4j20l007xmxx.jpg)　　设想一个场景：你是一家水杯生产厂商，你的工厂中生产的水杯种类很多，比如塑料杯、玻璃杯以及其它。这种问题适合使用简单工厂模式解决：\n```\n//抽象工厂的接口\nvar AbstractFactory = function() {};\nAbstractFactory.prototype = {\n  createPlasticCup: function() {}, //生产抽象塑料杯\n  createGlassCup: function() {} //生产抽象玻璃杯\n};\n\n//抽象水杯的接口\nvar Cup = function() {};\n//塑料水杯的实现\nvar PlasticCup = function() {};\nPlasticCup.prototype = Object.create(Cup.prototype);\n//玻璃水杯的实现\nvar GlassCup = function() {};\nGlassCup.prototype = Object.create(Cup.prototype);\n\n//具体的工厂实现对象\nvar concretFactory = function() {};\nconcretFactory.prototype = Object.create(AbstractFactory.prototype);\nconcretFactory.prototype.createPlasticCup = function() {\n  return new PlasticCup();\n};\nconcretFactory.prototype.createGlassCup = function() {\n  return new GlassCup();\n};\n\n//调用端\nvar factory = new concretFactory();\nvar plasticCup = factory.createPlasticCup();\nvar glassCup = factory.createGlassCup();\n```\n\n### 抽象工厂模式\n\n![](//wx3.sinaimg.cn/mw690/79b5b053gy1fnilno2jknj20mb0algmy.jpg)　　还是上面的场景，但是你打算把你的水杯工厂代理给两个代理商，这两个代理商也代理生产塑料杯和玻璃杯的业务，只不过代理商 A 生产的是宝马牌塑料杯和玻璃杯，代理商 B 生产的是奔驰牌塑料杯和玻璃杯。此时问题的解决方式变为以下：\n```\n//抽象工厂的接口\nvar AbstractFactory = function() {};\nAbstractFactory.prototype = {\n  createPlasticCup: function() {}, //生产抽象塑料杯\n  createGlassCup: function() {} //生产抽象玻璃杯\n};\n\n//塑料抽象水杯的接口\nvar PlasticCup = function() {};\n//塑料水杯的实现\nvar PlasticCupBM = function() {};\nPlasticCupBM.prototype = Object.create(PlasticCup.prototype);\nvar PlasticCupHD = function() {};\nPlasticCupHD.prototype = Object.create(PlasticCup.prototype);\n\n//玻璃抽象水杯的接口\nvar GlassCup = function() {};\n//玻璃水杯的实现\nvar GlassCupBM = function() {};\nGlassCupBM.prototype = Object.create(GlassCup.prototype);\nvar GlassCupHD = function() {};\nGlassCupHD.prototype = Object.create(GlassCup.prototype);\n\n//具体的BM工厂实现对象\nvar concretFactory = function() {};\nconcretFactoryBM.prototype = Object.create(AbstractFactory.prototype);\nconcretFactoryBM.prototype.createPlasticCup = function() {\n  return new PlasticCupBM();\n};\nconcretFactoryBM.prototype.createGlassCup = function() {\n  return new GlassCupBM();\n};\n//具体的HD工厂实现对象\nvar concretFactoryHD = function() {};\nconcretFactoryHD.prototype = Object.create(AbstractFactory.prototype);\nconcretFactoryHD.prototype.createPlasticCup = function() {\n  return new PlasticCupHD();\n};\nconcretFactoryHD.prototype.createGlassCup = function() {\n  return new GlassCupHD();\n};\n\n//调用端\nvar factoryBM = new concretFactoryBM();\nvar plasticCupBM = factory.createPlasticCup();\nvar glassCupBM = factory.createGlassCup();\n```","source":"_posts/JS设计模式之工厂模式.md","raw":"---\ntitle: JS设计模式之工厂模式\ndate: 2018-01-16 17:50:03\ntags:\n---\n\n### 简单工厂模式\n\n![](//wx3.sinaimg.cn/mw690/79b5b053gy1fnilnnymb4j20l007xmxx.jpg)　　设想一个场景：你是一家水杯生产厂商，你的工厂中生产的水杯种类很多，比如塑料杯、玻璃杯以及其它。这种问题适合使用简单工厂模式解决：\n```\n//抽象工厂的接口\nvar AbstractFactory = function() {};\nAbstractFactory.prototype = {\n  createPlasticCup: function() {}, //生产抽象塑料杯\n  createGlassCup: function() {} //生产抽象玻璃杯\n};\n\n//抽象水杯的接口\nvar Cup = function() {};\n//塑料水杯的实现\nvar PlasticCup = function() {};\nPlasticCup.prototype = Object.create(Cup.prototype);\n//玻璃水杯的实现\nvar GlassCup = function() {};\nGlassCup.prototype = Object.create(Cup.prototype);\n\n//具体的工厂实现对象\nvar concretFactory = function() {};\nconcretFactory.prototype = Object.create(AbstractFactory.prototype);\nconcretFactory.prototype.createPlasticCup = function() {\n  return new PlasticCup();\n};\nconcretFactory.prototype.createGlassCup = function() {\n  return new GlassCup();\n};\n\n//调用端\nvar factory = new concretFactory();\nvar plasticCup = factory.createPlasticCup();\nvar glassCup = factory.createGlassCup();\n```\n\n### 抽象工厂模式\n\n![](//wx3.sinaimg.cn/mw690/79b5b053gy1fnilno2jknj20mb0algmy.jpg)　　还是上面的场景，但是你打算把你的水杯工厂代理给两个代理商，这两个代理商也代理生产塑料杯和玻璃杯的业务，只不过代理商 A 生产的是宝马牌塑料杯和玻璃杯，代理商 B 生产的是奔驰牌塑料杯和玻璃杯。此时问题的解决方式变为以下：\n```\n//抽象工厂的接口\nvar AbstractFactory = function() {};\nAbstractFactory.prototype = {\n  createPlasticCup: function() {}, //生产抽象塑料杯\n  createGlassCup: function() {} //生产抽象玻璃杯\n};\n\n//塑料抽象水杯的接口\nvar PlasticCup = function() {};\n//塑料水杯的实现\nvar PlasticCupBM = function() {};\nPlasticCupBM.prototype = Object.create(PlasticCup.prototype);\nvar PlasticCupHD = function() {};\nPlasticCupHD.prototype = Object.create(PlasticCup.prototype);\n\n//玻璃抽象水杯的接口\nvar GlassCup = function() {};\n//玻璃水杯的实现\nvar GlassCupBM = function() {};\nGlassCupBM.prototype = Object.create(GlassCup.prototype);\nvar GlassCupHD = function() {};\nGlassCupHD.prototype = Object.create(GlassCup.prototype);\n\n//具体的BM工厂实现对象\nvar concretFactory = function() {};\nconcretFactoryBM.prototype = Object.create(AbstractFactory.prototype);\nconcretFactoryBM.prototype.createPlasticCup = function() {\n  return new PlasticCupBM();\n};\nconcretFactoryBM.prototype.createGlassCup = function() {\n  return new GlassCupBM();\n};\n//具体的HD工厂实现对象\nvar concretFactoryHD = function() {};\nconcretFactoryHD.prototype = Object.create(AbstractFactory.prototype);\nconcretFactoryHD.prototype.createPlasticCup = function() {\n  return new PlasticCupHD();\n};\nconcretFactoryHD.prototype.createGlassCup = function() {\n  return new GlassCupHD();\n};\n\n//调用端\nvar factoryBM = new concretFactoryBM();\nvar plasticCupBM = factory.createPlasticCup();\nvar glassCupBM = factory.createGlassCup();\n```","slug":"JS设计模式之工厂模式","published":1,"updated":"2018-01-16T12:15:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmde0008vxslpdtos5c2","content":"<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><p><img src=\"//wx3.sinaimg.cn/mw690/79b5b053gy1fnilnnymb4j20l007xmxx.jpg\" alt=\"\">　　设想一个场景：你是一家水杯生产厂商，你的工厂中生产的水杯种类很多，比如塑料杯、玻璃杯以及其它。这种问题适合使用简单工厂模式解决：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//抽象工厂的接口</span><br><span class=\"line\">var AbstractFactory = function() &#123;&#125;;</span><br><span class=\"line\">AbstractFactory.prototype = &#123;</span><br><span class=\"line\">  createPlasticCup: function() &#123;&#125;, //生产抽象塑料杯</span><br><span class=\"line\">  createGlassCup: function() &#123;&#125; //生产抽象玻璃杯</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//抽象水杯的接口</span><br><span class=\"line\">var Cup = function() &#123;&#125;;</span><br><span class=\"line\">//塑料水杯的实现</span><br><span class=\"line\">var PlasticCup = function() &#123;&#125;;</span><br><span class=\"line\">PlasticCup.prototype = Object.create(Cup.prototype);</span><br><span class=\"line\">//玻璃水杯的实现</span><br><span class=\"line\">var GlassCup = function() &#123;&#125;;</span><br><span class=\"line\">GlassCup.prototype = Object.create(Cup.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">//具体的工厂实现对象</span><br><span class=\"line\">var concretFactory = function() &#123;&#125;;</span><br><span class=\"line\">concretFactory.prototype = Object.create(AbstractFactory.prototype);</span><br><span class=\"line\">concretFactory.prototype.createPlasticCup = function() &#123;</span><br><span class=\"line\">  return new PlasticCup();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">concretFactory.prototype.createGlassCup = function() &#123;</span><br><span class=\"line\">  return new GlassCup();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//调用端</span><br><span class=\"line\">var factory = new concretFactory();</span><br><span class=\"line\">var plasticCup = factory.createPlasticCup();</span><br><span class=\"line\">var glassCup = factory.createGlassCup();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p><img src=\"//wx3.sinaimg.cn/mw690/79b5b053gy1fnilno2jknj20mb0algmy.jpg\" alt=\"\">　　还是上面的场景，但是你打算把你的水杯工厂代理给两个代理商，这两个代理商也代理生产塑料杯和玻璃杯的业务，只不过代理商 A 生产的是宝马牌塑料杯和玻璃杯，代理商 B 生产的是奔驰牌塑料杯和玻璃杯。此时问题的解决方式变为以下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//抽象工厂的接口</span><br><span class=\"line\">var AbstractFactory = function() &#123;&#125;;</span><br><span class=\"line\">AbstractFactory.prototype = &#123;</span><br><span class=\"line\">  createPlasticCup: function() &#123;&#125;, //生产抽象塑料杯</span><br><span class=\"line\">  createGlassCup: function() &#123;&#125; //生产抽象玻璃杯</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//塑料抽象水杯的接口</span><br><span class=\"line\">var PlasticCup = function() &#123;&#125;;</span><br><span class=\"line\">//塑料水杯的实现</span><br><span class=\"line\">var PlasticCupBM = function() &#123;&#125;;</span><br><span class=\"line\">PlasticCupBM.prototype = Object.create(PlasticCup.prototype);</span><br><span class=\"line\">var PlasticCupHD = function() &#123;&#125;;</span><br><span class=\"line\">PlasticCupHD.prototype = Object.create(PlasticCup.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">//玻璃抽象水杯的接口</span><br><span class=\"line\">var GlassCup = function() &#123;&#125;;</span><br><span class=\"line\">//玻璃水杯的实现</span><br><span class=\"line\">var GlassCupBM = function() &#123;&#125;;</span><br><span class=\"line\">GlassCupBM.prototype = Object.create(GlassCup.prototype);</span><br><span class=\"line\">var GlassCupHD = function() &#123;&#125;;</span><br><span class=\"line\">GlassCupHD.prototype = Object.create(GlassCup.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">//具体的BM工厂实现对象</span><br><span class=\"line\">var concretFactory = function() &#123;&#125;;</span><br><span class=\"line\">concretFactoryBM.prototype = Object.create(AbstractFactory.prototype);</span><br><span class=\"line\">concretFactoryBM.prototype.createPlasticCup = function() &#123;</span><br><span class=\"line\">  return new PlasticCupBM();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">concretFactoryBM.prototype.createGlassCup = function() &#123;</span><br><span class=\"line\">  return new GlassCupBM();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//具体的HD工厂实现对象</span><br><span class=\"line\">var concretFactoryHD = function() &#123;&#125;;</span><br><span class=\"line\">concretFactoryHD.prototype = Object.create(AbstractFactory.prototype);</span><br><span class=\"line\">concretFactoryHD.prototype.createPlasticCup = function() &#123;</span><br><span class=\"line\">  return new PlasticCupHD();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">concretFactoryHD.prototype.createGlassCup = function() &#123;</span><br><span class=\"line\">  return new GlassCupHD();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//调用端</span><br><span class=\"line\">var factoryBM = new concretFactoryBM();</span><br><span class=\"line\">var plasticCupBM = factory.createPlasticCup();</span><br><span class=\"line\">var glassCupBM = factory.createGlassCup();</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><p><img src=\"//wx3.sinaimg.cn/mw690/79b5b053gy1fnilnnymb4j20l007xmxx.jpg\" alt=\"\">　　设想一个场景：你是一家水杯生产厂商，你的工厂中生产的水杯种类很多，比如塑料杯、玻璃杯以及其它。这种问题适合使用简单工厂模式解决：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//抽象工厂的接口</span><br><span class=\"line\">var AbstractFactory = function() &#123;&#125;;</span><br><span class=\"line\">AbstractFactory.prototype = &#123;</span><br><span class=\"line\">  createPlasticCup: function() &#123;&#125;, //生产抽象塑料杯</span><br><span class=\"line\">  createGlassCup: function() &#123;&#125; //生产抽象玻璃杯</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//抽象水杯的接口</span><br><span class=\"line\">var Cup = function() &#123;&#125;;</span><br><span class=\"line\">//塑料水杯的实现</span><br><span class=\"line\">var PlasticCup = function() &#123;&#125;;</span><br><span class=\"line\">PlasticCup.prototype = Object.create(Cup.prototype);</span><br><span class=\"line\">//玻璃水杯的实现</span><br><span class=\"line\">var GlassCup = function() &#123;&#125;;</span><br><span class=\"line\">GlassCup.prototype = Object.create(Cup.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">//具体的工厂实现对象</span><br><span class=\"line\">var concretFactory = function() &#123;&#125;;</span><br><span class=\"line\">concretFactory.prototype = Object.create(AbstractFactory.prototype);</span><br><span class=\"line\">concretFactory.prototype.createPlasticCup = function() &#123;</span><br><span class=\"line\">  return new PlasticCup();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">concretFactory.prototype.createGlassCup = function() &#123;</span><br><span class=\"line\">  return new GlassCup();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//调用端</span><br><span class=\"line\">var factory = new concretFactory();</span><br><span class=\"line\">var plasticCup = factory.createPlasticCup();</span><br><span class=\"line\">var glassCup = factory.createGlassCup();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p><img src=\"//wx3.sinaimg.cn/mw690/79b5b053gy1fnilno2jknj20mb0algmy.jpg\" alt=\"\">　　还是上面的场景，但是你打算把你的水杯工厂代理给两个代理商，这两个代理商也代理生产塑料杯和玻璃杯的业务，只不过代理商 A 生产的是宝马牌塑料杯和玻璃杯，代理商 B 生产的是奔驰牌塑料杯和玻璃杯。此时问题的解决方式变为以下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//抽象工厂的接口</span><br><span class=\"line\">var AbstractFactory = function() &#123;&#125;;</span><br><span class=\"line\">AbstractFactory.prototype = &#123;</span><br><span class=\"line\">  createPlasticCup: function() &#123;&#125;, //生产抽象塑料杯</span><br><span class=\"line\">  createGlassCup: function() &#123;&#125; //生产抽象玻璃杯</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//塑料抽象水杯的接口</span><br><span class=\"line\">var PlasticCup = function() &#123;&#125;;</span><br><span class=\"line\">//塑料水杯的实现</span><br><span class=\"line\">var PlasticCupBM = function() &#123;&#125;;</span><br><span class=\"line\">PlasticCupBM.prototype = Object.create(PlasticCup.prototype);</span><br><span class=\"line\">var PlasticCupHD = function() &#123;&#125;;</span><br><span class=\"line\">PlasticCupHD.prototype = Object.create(PlasticCup.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">//玻璃抽象水杯的接口</span><br><span class=\"line\">var GlassCup = function() &#123;&#125;;</span><br><span class=\"line\">//玻璃水杯的实现</span><br><span class=\"line\">var GlassCupBM = function() &#123;&#125;;</span><br><span class=\"line\">GlassCupBM.prototype = Object.create(GlassCup.prototype);</span><br><span class=\"line\">var GlassCupHD = function() &#123;&#125;;</span><br><span class=\"line\">GlassCupHD.prototype = Object.create(GlassCup.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">//具体的BM工厂实现对象</span><br><span class=\"line\">var concretFactory = function() &#123;&#125;;</span><br><span class=\"line\">concretFactoryBM.prototype = Object.create(AbstractFactory.prototype);</span><br><span class=\"line\">concretFactoryBM.prototype.createPlasticCup = function() &#123;</span><br><span class=\"line\">  return new PlasticCupBM();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">concretFactoryBM.prototype.createGlassCup = function() &#123;</span><br><span class=\"line\">  return new GlassCupBM();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//具体的HD工厂实现对象</span><br><span class=\"line\">var concretFactoryHD = function() &#123;&#125;;</span><br><span class=\"line\">concretFactoryHD.prototype = Object.create(AbstractFactory.prototype);</span><br><span class=\"line\">concretFactoryHD.prototype.createPlasticCup = function() &#123;</span><br><span class=\"line\">  return new PlasticCupHD();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">concretFactoryHD.prototype.createGlassCup = function() &#123;</span><br><span class=\"line\">  return new GlassCupHD();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//调用端</span><br><span class=\"line\">var factoryBM = new concretFactoryBM();</span><br><span class=\"line\">var plasticCupBM = factory.createPlasticCup();</span><br><span class=\"line\">var glassCupBM = factory.createGlassCup();</span><br></pre></td></tr></table></figure></p>\n"},{"title":"JavaScript高级程序回顾(一)——JavaScript简介","date":"2018-01-08T04:38:40.000Z","_content":"\n### JavaScript的诞生\n　　在早期人们普遍使用电话拨号上网的时代，上网速度仅为 kb/s 级别。想象一下，你辛辛苦苦填完了一个表单，点击“提交”按钮后等待着奇迹的来临，然而...30秒以后，服务器返回消息说你有一个必填项没填好，是不是有一种拿小拳拳锤坏电脑的冲动！？有这种冲动的当然不止你一个人，当时就职于 Netscape 公司的 Brendan Eich 着手开发一门语言用以解决这个问题， 这就是后来的 JavaScript。\n\n### 什么是标准？\n　　然鹅，伴随着 Netscape Navigator2 的正式发布，其内置的 JavaScript1.0 取得了很大成功。微软会不眼红吗？所以在后来的 IE 浏览器中就看到了功能类似的 JScript。至此，意味着 JavaScript 的有了不同的版本，但是却没有标准规定 JavaScript 的语法和特性，两个公司之间的战争，最大的受害者是 Web 工作者，随着业界担心的加剧，JavaScript 的标准化问题被提上了日程。\n　　接下来，欧洲计算机制造商协会(ECMA) 经过数月的努力完成了 ECMA-262 —— 定义一种名为 ECMAScript 的新脚本语言的标准，第二年，ISO 也采用了 ECMAScript 作为标准。自此以后，浏览器开发商致力于在 ECMAScript 的基础上实现 JavaScript。\n\n### JavaScript实现\n　　虽然 JavaScript 和 ECMAScript 通常被人们用来表达相同的含义，但是 JavaScript 的含义却比 ECMA-262 中规定的要多得多。一个完整的 JavaScript 实现由下面三个部分组成：\n1. 核心(ECMAScript)\nECMA-262 第一版本质上与 JavaScript1.1 相同，只不过删除了所有针对浏览器的代码并作了一些小的改动。所以，ECMAScript 与 Web 浏览器并没有依赖关系。我们常见的 Web 浏览器只是 ECMAScript 实现的可能宿主环境之一，现在流行的 Node(一种服务端 JavaScript 平台)也是其宿主环境之一。\n2. 文档对象模型(DOM)\n本质上，DOM 是针对 HTML 的应用程序编程接口(API)。DOM 把整个页面映射为一个多层节点结构，也就是我们口中常说的“树结构”。借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。\n3. 浏览器对象模型(BOM)\n开发人员可以使用 BOM 控制浏览器显示的页面以外的部分，也就是跟浏览器本身相关的部分。\n","source":"_posts/JavaScript高级程序回顾-一-——JS的发展历程.md","raw":"---\ntitle: JavaScript高级程序回顾(一)——JavaScript简介\ndate: 2018-01-08 12:38:40\ntags:\n---\n\n### JavaScript的诞生\n　　在早期人们普遍使用电话拨号上网的时代，上网速度仅为 kb/s 级别。想象一下，你辛辛苦苦填完了一个表单，点击“提交”按钮后等待着奇迹的来临，然而...30秒以后，服务器返回消息说你有一个必填项没填好，是不是有一种拿小拳拳锤坏电脑的冲动！？有这种冲动的当然不止你一个人，当时就职于 Netscape 公司的 Brendan Eich 着手开发一门语言用以解决这个问题， 这就是后来的 JavaScript。\n\n### 什么是标准？\n　　然鹅，伴随着 Netscape Navigator2 的正式发布，其内置的 JavaScript1.0 取得了很大成功。微软会不眼红吗？所以在后来的 IE 浏览器中就看到了功能类似的 JScript。至此，意味着 JavaScript 的有了不同的版本，但是却没有标准规定 JavaScript 的语法和特性，两个公司之间的战争，最大的受害者是 Web 工作者，随着业界担心的加剧，JavaScript 的标准化问题被提上了日程。\n　　接下来，欧洲计算机制造商协会(ECMA) 经过数月的努力完成了 ECMA-262 —— 定义一种名为 ECMAScript 的新脚本语言的标准，第二年，ISO 也采用了 ECMAScript 作为标准。自此以后，浏览器开发商致力于在 ECMAScript 的基础上实现 JavaScript。\n\n### JavaScript实现\n　　虽然 JavaScript 和 ECMAScript 通常被人们用来表达相同的含义，但是 JavaScript 的含义却比 ECMA-262 中规定的要多得多。一个完整的 JavaScript 实现由下面三个部分组成：\n1. 核心(ECMAScript)\nECMA-262 第一版本质上与 JavaScript1.1 相同，只不过删除了所有针对浏览器的代码并作了一些小的改动。所以，ECMAScript 与 Web 浏览器并没有依赖关系。我们常见的 Web 浏览器只是 ECMAScript 实现的可能宿主环境之一，现在流行的 Node(一种服务端 JavaScript 平台)也是其宿主环境之一。\n2. 文档对象模型(DOM)\n本质上，DOM 是针对 HTML 的应用程序编程接口(API)。DOM 把整个页面映射为一个多层节点结构，也就是我们口中常说的“树结构”。借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。\n3. 浏览器对象模型(BOM)\n开发人员可以使用 BOM 控制浏览器显示的页面以外的部分，也就是跟浏览器本身相关的部分。\n","slug":"JavaScript高级程序回顾-一-——JS的发展历程","published":1,"updated":"2018-01-09T05:34:52.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdf0009vxsljvz5q4av","content":"<h3 id=\"JavaScript的诞生\"><a href=\"#JavaScript的诞生\" class=\"headerlink\" title=\"JavaScript的诞生\"></a>JavaScript的诞生</h3><p>　　在早期人们普遍使用电话拨号上网的时代，上网速度仅为 kb/s 级别。想象一下，你辛辛苦苦填完了一个表单，点击“提交”按钮后等待着奇迹的来临，然而…30秒以后，服务器返回消息说你有一个必填项没填好，是不是有一种拿小拳拳锤坏电脑的冲动！？有这种冲动的当然不止你一个人，当时就职于 Netscape 公司的 Brendan Eich 着手开发一门语言用以解决这个问题， 这就是后来的 JavaScript。</p>\n<h3 id=\"什么是标准？\"><a href=\"#什么是标准？\" class=\"headerlink\" title=\"什么是标准？\"></a>什么是标准？</h3><p>　　然鹅，伴随着 Netscape Navigator2 的正式发布，其内置的 JavaScript1.0 取得了很大成功。微软会不眼红吗？所以在后来的 IE 浏览器中就看到了功能类似的 JScript。至此，意味着 JavaScript 的有了不同的版本，但是却没有标准规定 JavaScript 的语法和特性，两个公司之间的战争，最大的受害者是 Web 工作者，随着业界担心的加剧，JavaScript 的标准化问题被提上了日程。<br>　　接下来，欧洲计算机制造商协会(ECMA) 经过数月的努力完成了 ECMA-262 —— 定义一种名为 ECMAScript 的新脚本语言的标准，第二年，ISO 也采用了 ECMAScript 作为标准。自此以后，浏览器开发商致力于在 ECMAScript 的基础上实现 JavaScript。</p>\n<h3 id=\"JavaScript实现\"><a href=\"#JavaScript实现\" class=\"headerlink\" title=\"JavaScript实现\"></a>JavaScript实现</h3><p>　　虽然 JavaScript 和 ECMAScript 通常被人们用来表达相同的含义，但是 JavaScript 的含义却比 ECMA-262 中规定的要多得多。一个完整的 JavaScript 实现由下面三个部分组成：</p>\n<ol>\n<li>核心(ECMAScript)<br>ECMA-262 第一版本质上与 JavaScript1.1 相同，只不过删除了所有针对浏览器的代码并作了一些小的改动。所以，ECMAScript 与 Web 浏览器并没有依赖关系。我们常见的 Web 浏览器只是 ECMAScript 实现的可能宿主环境之一，现在流行的 Node(一种服务端 JavaScript 平台)也是其宿主环境之一。</li>\n<li>文档对象模型(DOM)<br>本质上，DOM 是针对 HTML 的应用程序编程接口(API)。DOM 把整个页面映射为一个多层节点结构，也就是我们口中常说的“树结构”。借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。</li>\n<li>浏览器对象模型(BOM)<br>开发人员可以使用 BOM 控制浏览器显示的页面以外的部分，也就是跟浏览器本身相关的部分。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JavaScript的诞生\"><a href=\"#JavaScript的诞生\" class=\"headerlink\" title=\"JavaScript的诞生\"></a>JavaScript的诞生</h3><p>　　在早期人们普遍使用电话拨号上网的时代，上网速度仅为 kb/s 级别。想象一下，你辛辛苦苦填完了一个表单，点击“提交”按钮后等待着奇迹的来临，然而…30秒以后，服务器返回消息说你有一个必填项没填好，是不是有一种拿小拳拳锤坏电脑的冲动！？有这种冲动的当然不止你一个人，当时就职于 Netscape 公司的 Brendan Eich 着手开发一门语言用以解决这个问题， 这就是后来的 JavaScript。</p>\n<h3 id=\"什么是标准？\"><a href=\"#什么是标准？\" class=\"headerlink\" title=\"什么是标准？\"></a>什么是标准？</h3><p>　　然鹅，伴随着 Netscape Navigator2 的正式发布，其内置的 JavaScript1.0 取得了很大成功。微软会不眼红吗？所以在后来的 IE 浏览器中就看到了功能类似的 JScript。至此，意味着 JavaScript 的有了不同的版本，但是却没有标准规定 JavaScript 的语法和特性，两个公司之间的战争，最大的受害者是 Web 工作者，随着业界担心的加剧，JavaScript 的标准化问题被提上了日程。<br>　　接下来，欧洲计算机制造商协会(ECMA) 经过数月的努力完成了 ECMA-262 —— 定义一种名为 ECMAScript 的新脚本语言的标准，第二年，ISO 也采用了 ECMAScript 作为标准。自此以后，浏览器开发商致力于在 ECMAScript 的基础上实现 JavaScript。</p>\n<h3 id=\"JavaScript实现\"><a href=\"#JavaScript实现\" class=\"headerlink\" title=\"JavaScript实现\"></a>JavaScript实现</h3><p>　　虽然 JavaScript 和 ECMAScript 通常被人们用来表达相同的含义，但是 JavaScript 的含义却比 ECMA-262 中规定的要多得多。一个完整的 JavaScript 实现由下面三个部分组成：</p>\n<ol>\n<li>核心(ECMAScript)<br>ECMA-262 第一版本质上与 JavaScript1.1 相同，只不过删除了所有针对浏览器的代码并作了一些小的改动。所以，ECMAScript 与 Web 浏览器并没有依赖关系。我们常见的 Web 浏览器只是 ECMAScript 实现的可能宿主环境之一，现在流行的 Node(一种服务端 JavaScript 平台)也是其宿主环境之一。</li>\n<li>文档对象模型(DOM)<br>本质上，DOM 是针对 HTML 的应用程序编程接口(API)。DOM 把整个页面映射为一个多层节点结构，也就是我们口中常说的“树结构”。借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。</li>\n<li>浏览器对象模型(BOM)<br>开发人员可以使用 BOM 控制浏览器显示的页面以外的部分，也就是跟浏览器本身相关的部分。</li>\n</ol>\n"},{"title":"Promise的一些尝试","date":"2018-03-05T08:35:33.000Z","_content":"\n### 前言\n　　该文章不是 Promise 入门，不涉及基础讲解，只是博主对 Promise 的一些想法和尝试而已。\n\n### Promise 基本用法\n\n- __Promise 是一个容器，里面保存着某个未来才会结束的事件。当这个未来事件结束后，可以通过 resolve 函数和 reject 函数来改变 Promise 的状态，使它可以继续执行依赖该异步结果的代码（即 then 中或 catch 中的代码）__\n\n- __Promise 共有三种状态：pending（进行中），fulfilled（已成功）和 rejected（已失败），只有异步操作的结果能够决定当前是哪一种状态，并且一旦决定，就无法再改变__\n\n- __Promise 一旦新建就会立即执行，无法中途取消__\n```\nlet promise = new Promise(function(resolve, reject) {\n  console.log('Promise');\n  resolve();\n});\npromise.then(function() {\n  console.log('resolved.');\n});\nconsole.log('Hi!');\n// Promise\n// Hi!\n// resolved\n// 通过上面的输出顺序可以看出，Promise 是立即执行的，而 then 中的回调函数会在同步代码都执行完毕后才会执行\n```\n\n- __如果不设置回调函数，Promise 内部抛出的错误不会反应到外部。Promise 内部的错误包括两种：一是 throw 出来的异常，二是调用 reject__\n```\nlet promise = new Promise(function(resolve, reject) {\n  reject('error'); // or throw new Error('error');\n});\nconsole.log('Hi!');\n// Promise 内部抛出的错误并不会影响后续代码的执行，还是会输出 Hi!\n```\n\n- __Promise 中调用 resolve 和 reject 时都可以传入参数，这个参数会被传递给回调函数。如果该参数是一个 Promise，那么原 Promise 的状态就无效了，而是由传入的 Promise 的状态来决定__\n```\nconst p1 = new Promise(function(resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\nconst p2 = new Promise(function(resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n// Error: fail\n// 此时 p2 本身的状态无效，而是要依赖于 p1 的状态\n```\n\n- __Promise 并不会因 resolve 或 reject 函数的调用而终止自身的立即执行__\n```\nnew Promise(function(resolve, reject) {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n// 在 Promise 内部的代码都是立即执行的，不管它是否位于 resolve 之后\n```\n\n### Promise 原型函数\n\n#### Promise.prototype.then()\n\n- __then 可以接受两个参数，第一个参数是 resolved 状态的回调函数，第二个参数（可选）是 rejected 状态的回调函数__\n\n- __返回一个新的 Promise 实例，所以可以进行链式调用 then，后续 then 中回调函数所接受的参数来源于之前 then 中的返回值。如果这个返回值是非 Promise，那么会直接传给 resolve 回调函数；如果这个返回值是 Promise，那么则需要等待该 Promise 的状态改变__\n```\nnew Promise(function(resolve, reject) {\n  resolve('外层 resolve');\n}).then(val => {\n  console.log(val);\n  return new Promise(function(resolve, reject) {\n    resolve('内部 resolve');\n  });\n}).then(val => {\n  console.log(val);\n})\n// 外层 resolve\n// 内部 resolve\n// 后面输出内部 resolve，说明它等待了上一个 then 中返回的 Promise 的状态改变\n```\n\n#### Promise.prototype.catch()\n\n- __Promise.prototype.catch 方法是 .then(null, rejection) 的别名，用于指定错误发生时的回调函数__\n\n- __Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止__\n\n- __总是使用 catch 方法代替 then 方法的第二个参数，因为 catch 还可以捕获前面 then 方法执行中的错误__\n\n- __catch 返回的也是一个 Promise 对象，所以后面可以继续链式调用 then 或者 catch__\n\n### Promise 静态函数\n\n#### Promise.all()\n\n- __接受的参数往往是一个 Promise 实例数组。如果不是数组，也可以是任何具有 Iterator 接口的迭代器；如果不是 Promise 实例，则会先调用 `Promise.resolve`方法将参数转为 Promise 实例__\n```\nPromise.all([1, 2, 3])\n  .then(val => {\n    console.log(val);\n  });\n// [ 1, 2, 3 ]\n// 等价于\nPromise.all([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)])\n  .then(val => {\n    console.log(val);\n  });\n```\n\n- __返回一个新的 Promise（后面称为 p）。只有当传入的 Promise 实例都变成 fulfilled 状态，p 的状态才会变成 fulfilled；否则，如果传入的 Promise 实例有一个被 rejected，p 的状态就变成 rejected__\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n});\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n// 上面的情况其实是进入了 then 方法中。原因是虽然 p2 定义的 Promise 状态变为 rejected 中了，但是其中最终传入 Promise.all() 的 p2 是 catch 方法的返回值\n```\n\n- __返回的新的 Promise 实例 p 后的 then 也接受两个回调函数作为参数。如果是 fulfilled 的状态，那么回调函数参数为传入的 Promise 实例的返回值组成的数组；如果是 rejected 的状态，那么回调函数为第一个被 rejected 的实例的返回值__\n\n#### Promise.resolve()\n\n- __一般用于将现有对象转为 Promise 对象__\n```\nPromise.resolve('foo');\n// 等价于\nnew Promise(resolve => resolve('foo'));\n```\n\n- __立即 resolve 的 Promise 对象，是在本轮“事件循环”结束时而不是下一轮“事件循环”的开始时__\n```\nsetTimeout(function () {\n  console.log('three');\n}, 0);\nPromise.resolve().then(function () {\n  console.log('two');\n});\nconsole.log('one');\n// one\n// two\n// three\n```\n\n### 扩展题目\n// 实现一个方法 parallel(tasks, concurrency)，让 tasks 并发执行（并控制并发数为 concurrency)\n// 其中 tasks 为一个数组，每一个元素都是一个方法返回一个 promise\n// 当所有 tasks 执行完成时，resolve 一个数组保存所有的结果\n// 当任意一个 task 执行失败时，reject 这个错误\n\n```\nconst assert = require('assert');\n\nfunction task(input) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(input), 1000);\n  });\n}\n\nparallel([\n  task(1),\n  task(2),\n  task(3),\n  task(4),\n  task(5),\n], 2)\n.then(res => assert.deepEqual(res, [1, 2, 3, 4, 5]));\n\nfunction parallel(tasks, concurrency) {\n  \n}\n```\n　　参考答案如下：\n```\nfunction parallel(tasks, concurrency) {\n  let concurrentTasks = tasks.slice(0, concurrency);\n  tasks = tasks.slice(concurrency);\n  let promise = new Promise((resolve, reject) => {\n    const results = [];\n    for (let i = 0; i < concurrency; i++) {\n      concurrentTasks[i].then(done, error);\n    }\n\n    function done(result) {\n      results.push(result);\n      const task = tasks.shift();\n      if (task) {\n        task.then(done, error);\n      } else {\n        resolve(results);\n      }\n    }\n\n    function error(err) {\n      reject(err);\n    }\n  });\n  return promise;\n}\n```\n\n\n### 参考资料\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n","source":"_posts/Promise的一些尝试.md","raw":"---\ntitle: Promise的一些尝试\ndate: 2018-03-05 16:35:33\ntags:\n---\n\n### 前言\n　　该文章不是 Promise 入门，不涉及基础讲解，只是博主对 Promise 的一些想法和尝试而已。\n\n### Promise 基本用法\n\n- __Promise 是一个容器，里面保存着某个未来才会结束的事件。当这个未来事件结束后，可以通过 resolve 函数和 reject 函数来改变 Promise 的状态，使它可以继续执行依赖该异步结果的代码（即 then 中或 catch 中的代码）__\n\n- __Promise 共有三种状态：pending（进行中），fulfilled（已成功）和 rejected（已失败），只有异步操作的结果能够决定当前是哪一种状态，并且一旦决定，就无法再改变__\n\n- __Promise 一旦新建就会立即执行，无法中途取消__\n```\nlet promise = new Promise(function(resolve, reject) {\n  console.log('Promise');\n  resolve();\n});\npromise.then(function() {\n  console.log('resolved.');\n});\nconsole.log('Hi!');\n// Promise\n// Hi!\n// resolved\n// 通过上面的输出顺序可以看出，Promise 是立即执行的，而 then 中的回调函数会在同步代码都执行完毕后才会执行\n```\n\n- __如果不设置回调函数，Promise 内部抛出的错误不会反应到外部。Promise 内部的错误包括两种：一是 throw 出来的异常，二是调用 reject__\n```\nlet promise = new Promise(function(resolve, reject) {\n  reject('error'); // or throw new Error('error');\n});\nconsole.log('Hi!');\n// Promise 内部抛出的错误并不会影响后续代码的执行，还是会输出 Hi!\n```\n\n- __Promise 中调用 resolve 和 reject 时都可以传入参数，这个参数会被传递给回调函数。如果该参数是一个 Promise，那么原 Promise 的状态就无效了，而是由传入的 Promise 的状态来决定__\n```\nconst p1 = new Promise(function(resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\nconst p2 = new Promise(function(resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n// Error: fail\n// 此时 p2 本身的状态无效，而是要依赖于 p1 的状态\n```\n\n- __Promise 并不会因 resolve 或 reject 函数的调用而终止自身的立即执行__\n```\nnew Promise(function(resolve, reject) {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n// 在 Promise 内部的代码都是立即执行的，不管它是否位于 resolve 之后\n```\n\n### Promise 原型函数\n\n#### Promise.prototype.then()\n\n- __then 可以接受两个参数，第一个参数是 resolved 状态的回调函数，第二个参数（可选）是 rejected 状态的回调函数__\n\n- __返回一个新的 Promise 实例，所以可以进行链式调用 then，后续 then 中回调函数所接受的参数来源于之前 then 中的返回值。如果这个返回值是非 Promise，那么会直接传给 resolve 回调函数；如果这个返回值是 Promise，那么则需要等待该 Promise 的状态改变__\n```\nnew Promise(function(resolve, reject) {\n  resolve('外层 resolve');\n}).then(val => {\n  console.log(val);\n  return new Promise(function(resolve, reject) {\n    resolve('内部 resolve');\n  });\n}).then(val => {\n  console.log(val);\n})\n// 外层 resolve\n// 内部 resolve\n// 后面输出内部 resolve，说明它等待了上一个 then 中返回的 Promise 的状态改变\n```\n\n#### Promise.prototype.catch()\n\n- __Promise.prototype.catch 方法是 .then(null, rejection) 的别名，用于指定错误发生时的回调函数__\n\n- __Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止__\n\n- __总是使用 catch 方法代替 then 方法的第二个参数，因为 catch 还可以捕获前面 then 方法执行中的错误__\n\n- __catch 返回的也是一个 Promise 对象，所以后面可以继续链式调用 then 或者 catch__\n\n### Promise 静态函数\n\n#### Promise.all()\n\n- __接受的参数往往是一个 Promise 实例数组。如果不是数组，也可以是任何具有 Iterator 接口的迭代器；如果不是 Promise 实例，则会先调用 `Promise.resolve`方法将参数转为 Promise 实例__\n```\nPromise.all([1, 2, 3])\n  .then(val => {\n    console.log(val);\n  });\n// [ 1, 2, 3 ]\n// 等价于\nPromise.all([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)])\n  .then(val => {\n    console.log(val);\n  });\n```\n\n- __返回一个新的 Promise（后面称为 p）。只有当传入的 Promise 实例都变成 fulfilled 状态，p 的状态才会变成 fulfilled；否则，如果传入的 Promise 实例有一个被 rejected，p 的状态就变成 rejected__\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n});\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n// 上面的情况其实是进入了 then 方法中。原因是虽然 p2 定义的 Promise 状态变为 rejected 中了，但是其中最终传入 Promise.all() 的 p2 是 catch 方法的返回值\n```\n\n- __返回的新的 Promise 实例 p 后的 then 也接受两个回调函数作为参数。如果是 fulfilled 的状态，那么回调函数参数为传入的 Promise 实例的返回值组成的数组；如果是 rejected 的状态，那么回调函数为第一个被 rejected 的实例的返回值__\n\n#### Promise.resolve()\n\n- __一般用于将现有对象转为 Promise 对象__\n```\nPromise.resolve('foo');\n// 等价于\nnew Promise(resolve => resolve('foo'));\n```\n\n- __立即 resolve 的 Promise 对象，是在本轮“事件循环”结束时而不是下一轮“事件循环”的开始时__\n```\nsetTimeout(function () {\n  console.log('three');\n}, 0);\nPromise.resolve().then(function () {\n  console.log('two');\n});\nconsole.log('one');\n// one\n// two\n// three\n```\n\n### 扩展题目\n// 实现一个方法 parallel(tasks, concurrency)，让 tasks 并发执行（并控制并发数为 concurrency)\n// 其中 tasks 为一个数组，每一个元素都是一个方法返回一个 promise\n// 当所有 tasks 执行完成时，resolve 一个数组保存所有的结果\n// 当任意一个 task 执行失败时，reject 这个错误\n\n```\nconst assert = require('assert');\n\nfunction task(input) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(input), 1000);\n  });\n}\n\nparallel([\n  task(1),\n  task(2),\n  task(3),\n  task(4),\n  task(5),\n], 2)\n.then(res => assert.deepEqual(res, [1, 2, 3, 4, 5]));\n\nfunction parallel(tasks, concurrency) {\n  \n}\n```\n　　参考答案如下：\n```\nfunction parallel(tasks, concurrency) {\n  let concurrentTasks = tasks.slice(0, concurrency);\n  tasks = tasks.slice(concurrency);\n  let promise = new Promise((resolve, reject) => {\n    const results = [];\n    for (let i = 0; i < concurrency; i++) {\n      concurrentTasks[i].then(done, error);\n    }\n\n    function done(result) {\n      results.push(result);\n      const task = tasks.shift();\n      if (task) {\n        task.then(done, error);\n      } else {\n        resolve(results);\n      }\n    }\n\n    function error(err) {\n      reject(err);\n    }\n  });\n  return promise;\n}\n```\n\n\n### 参考资料\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n","slug":"Promise的一些尝试","published":1,"updated":"2018-03-05T13:38:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdg000avxslwo9ss3vo","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　该文章不是 Promise 入门，不涉及基础讲解，只是博主对 Promise 的一些想法和尝试而已。</p>\n<h3 id=\"Promise-基本用法\"><a href=\"#Promise-基本用法\" class=\"headerlink\" title=\"Promise 基本用法\"></a>Promise 基本用法</h3><ul>\n<li><p><strong>Promise 是一个容器，里面保存着某个未来才会结束的事件。当这个未来事件结束后，可以通过 resolve 函数和 reject 函数来改变 Promise 的状态，使它可以继续执行依赖该异步结果的代码（即 then 中或 catch 中的代码）</strong></p>\n</li>\n<li><p><strong>Promise 共有三种状态：pending（进行中），fulfilled（已成功）和 rejected（已失败），只有异步操作的结果能够决定当前是哪一种状态，并且一旦决定，就无法再改变</strong></p>\n</li>\n<li><p><strong>Promise 一旦新建就会立即执行，无法中途取消</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  console.log(&apos;Promise&apos;);</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(function() &#123;</span><br><span class=\"line\">  console.log(&apos;resolved.&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;Hi!&apos;);</span><br><span class=\"line\">// Promise</span><br><span class=\"line\">// Hi!</span><br><span class=\"line\">// resolved</span><br><span class=\"line\">// 通过上面的输出顺序可以看出，Promise 是立即执行的，而 then 中的回调函数会在同步代码都执行完毕后才会执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>如果不设置回调函数，Promise 内部抛出的错误不会反应到外部。Promise 内部的错误包括两种：一是 throw 出来的异常，二是调用 reject</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  reject(&apos;error&apos;); // or throw new Error(&apos;error&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;Hi!&apos;);</span><br><span class=\"line\">// Promise 内部抛出的错误并不会影响后续代码的执行，还是会输出 Hi!</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Promise 中调用 resolve 和 reject 时都可以传入参数，这个参数会被传递给回调函数。如果该参数是一个 Promise，那么原 Promise 的状态就无效了，而是由传入的 Promise 的状态来决定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; reject(new Error(&apos;fail&apos;)), 3000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const p2 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; resolve(p1), 1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p2</span><br><span class=\"line\">  .then(result =&gt; console.log(result))</span><br><span class=\"line\">  .catch(error =&gt; console.log(error))</span><br><span class=\"line\">// Error: fail</span><br><span class=\"line\">// 此时 p2 本身的状态无效，而是要依赖于 p1 的状态</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Promise 并不会因 resolve 或 reject 函数的调用而终止自身的立即执行</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  resolve(1);</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">&#125;).then(r =&gt; &#123;</span><br><span class=\"line\">  console.log(r);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 在 Promise 内部的代码都是立即执行的，不管它是否位于 resolve 之后</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-原型函数\"><a href=\"#Promise-原型函数\" class=\"headerlink\" title=\"Promise 原型函数\"></a>Promise 原型函数</h3><h4 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h4><ul>\n<li><p><strong>then 可以接受两个参数，第一个参数是 resolved 状态的回调函数，第二个参数（可选）是 rejected 状态的回调函数</strong></p>\n</li>\n<li><p><strong>返回一个新的 Promise 实例，所以可以进行链式调用 then，后续 then 中回调函数所接受的参数来源于之前 then 中的返回值。如果这个返回值是非 Promise，那么会直接传给 resolve 回调函数；如果这个返回值是 Promise，那么则需要等待该 Promise 的状态改变</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  resolve(&apos;外层 resolve&apos;);</span><br><span class=\"line\">&#125;).then(val =&gt; &#123;</span><br><span class=\"line\">  console.log(val);</span><br><span class=\"line\">  return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    resolve(&apos;内部 resolve&apos;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(val =&gt; &#123;</span><br><span class=\"line\">  console.log(val);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 外层 resolve</span><br><span class=\"line\">// 内部 resolve</span><br><span class=\"line\">// 后面输出内部 resolve，说明它等待了上一个 then 中返回的 Promise 的状态改变</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h4><ul>\n<li><p><strong>Promise.prototype.catch 方法是 .then(null, rejection) 的别名，用于指定错误发生时的回调函数</strong></p>\n</li>\n<li><p><strong>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止</strong></p>\n</li>\n<li><p><strong>总是使用 catch 方法代替 then 方法的第二个参数，因为 catch 还可以捕获前面 then 方法执行中的错误</strong></p>\n</li>\n<li><p><strong>catch 返回的也是一个 Promise 对象，所以后面可以继续链式调用 then 或者 catch</strong></p>\n</li>\n</ul>\n<h3 id=\"Promise-静态函数\"><a href=\"#Promise-静态函数\" class=\"headerlink\" title=\"Promise 静态函数\"></a>Promise 静态函数</h3><h4 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h4><ul>\n<li><p><strong>接受的参数往往是一个 Promise 实例数组。如果不是数组，也可以是任何具有 Iterator 接口的迭代器；如果不是 Promise 实例，则会先调用 <code>Promise.resolve</code>方法将参数转为 Promise 实例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all([1, 2, 3])</span><br><span class=\"line\">  .then(val =&gt; &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">// [ 1, 2, 3 ]</span><br><span class=\"line\">// 等价于</span><br><span class=\"line\">Promise.all([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)])</span><br><span class=\"line\">  .then(val =&gt; &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>返回一个新的 Promise（后面称为 p）。只有当传入的 Promise 实例都变成 fulfilled 状态，p 的状态才会变成 fulfilled；否则，如果传入的 Promise 实例有一个被 rejected，p 的状态就变成 rejected</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  resolve(&apos;hello&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">const p2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  throw new Error(&apos;报错了&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(e =&gt; e);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all([p1, p2])</span><br><span class=\"line\">.then(result =&gt; console.log(result))</span><br><span class=\"line\">.catch(e =&gt; console.log(e));</span><br><span class=\"line\">// [&quot;hello&quot;, Error: 报错了]</span><br><span class=\"line\">// 上面的情况其实是进入了 then 方法中。原因是虽然 p2 定义的 Promise 状态变为 rejected 中了，但是其中最终传入 Promise.all() 的 p2 是 catch 方法的返回值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>返回的新的 Promise 实例 p 后的 then 也接受两个回调函数作为参数。如果是 fulfilled 的状态，那么回调函数参数为传入的 Promise 实例的返回值组成的数组；如果是 rejected 的状态，那么回调函数为第一个被 rejected 的实例的返回值</strong></p>\n</li>\n</ul>\n<h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h4><ul>\n<li><p><strong>一般用于将现有对象转为 Promise 对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;);</span><br><span class=\"line\">// 等价于</span><br><span class=\"line\">new Promise(resolve =&gt; resolve(&apos;foo&apos;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>立即 resolve 的 Promise 对象，是在本轮“事件循环”结束时而不是下一轮“事件循环”的开始时</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">  console.log(&apos;three&apos;);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">Promise.resolve().then(function () &#123;</span><br><span class=\"line\">  console.log(&apos;two&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;one&apos;);</span><br><span class=\"line\">// one</span><br><span class=\"line\">// two</span><br><span class=\"line\">// three</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"扩展题目\"><a href=\"#扩展题目\" class=\"headerlink\" title=\"扩展题目\"></a>扩展题目</h3><p>// 实现一个方法 parallel(tasks, concurrency)，让 tasks 并发执行（并控制并发数为 concurrency)<br>// 其中 tasks 为一个数组，每一个元素都是一个方法返回一个 promise<br>// 当所有 tasks 执行完成时，resolve 一个数组保存所有的结果<br>// 当任意一个 task 执行失败时，reject 这个错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const assert = require(&apos;assert&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">function task(input) &#123;</span><br><span class=\"line\">  return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; resolve(input), 1000);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">parallel([</span><br><span class=\"line\">  task(1),</span><br><span class=\"line\">  task(2),</span><br><span class=\"line\">  task(3),</span><br><span class=\"line\">  task(4),</span><br><span class=\"line\">  task(5),</span><br><span class=\"line\">], 2)</span><br><span class=\"line\">.then(res =&gt; assert.deepEqual(res, [1, 2, 3, 4, 5]));</span><br><span class=\"line\"></span><br><span class=\"line\">function parallel(tasks, concurrency) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　参考答案如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function parallel(tasks, concurrency) &#123;</span><br><span class=\"line\">  let concurrentTasks = tasks.slice(0, concurrency);</span><br><span class=\"line\">  tasks = tasks.slice(concurrency);</span><br><span class=\"line\">  let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    const results = [];</span><br><span class=\"line\">    for (let i = 0; i &lt; concurrency; i++) &#123;</span><br><span class=\"line\">      concurrentTasks[i].then(done, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function done(result) &#123;</span><br><span class=\"line\">      results.push(result);</span><br><span class=\"line\">      const task = tasks.shift();</span><br><span class=\"line\">      if (task) &#123;</span><br><span class=\"line\">        task.then(done, error);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        resolve(results);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function error(err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　该文章不是 Promise 入门，不涉及基础讲解，只是博主对 Promise 的一些想法和尝试而已。</p>\n<h3 id=\"Promise-基本用法\"><a href=\"#Promise-基本用法\" class=\"headerlink\" title=\"Promise 基本用法\"></a>Promise 基本用法</h3><ul>\n<li><p><strong>Promise 是一个容器，里面保存着某个未来才会结束的事件。当这个未来事件结束后，可以通过 resolve 函数和 reject 函数来改变 Promise 的状态，使它可以继续执行依赖该异步结果的代码（即 then 中或 catch 中的代码）</strong></p>\n</li>\n<li><p><strong>Promise 共有三种状态：pending（进行中），fulfilled（已成功）和 rejected（已失败），只有异步操作的结果能够决定当前是哪一种状态，并且一旦决定，就无法再改变</strong></p>\n</li>\n<li><p><strong>Promise 一旦新建就会立即执行，无法中途取消</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  console.log(&apos;Promise&apos;);</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(function() &#123;</span><br><span class=\"line\">  console.log(&apos;resolved.&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;Hi!&apos;);</span><br><span class=\"line\">// Promise</span><br><span class=\"line\">// Hi!</span><br><span class=\"line\">// resolved</span><br><span class=\"line\">// 通过上面的输出顺序可以看出，Promise 是立即执行的，而 then 中的回调函数会在同步代码都执行完毕后才会执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>如果不设置回调函数，Promise 内部抛出的错误不会反应到外部。Promise 内部的错误包括两种：一是 throw 出来的异常，二是调用 reject</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  reject(&apos;error&apos;); // or throw new Error(&apos;error&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;Hi!&apos;);</span><br><span class=\"line\">// Promise 内部抛出的错误并不会影响后续代码的执行，还是会输出 Hi!</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Promise 中调用 resolve 和 reject 时都可以传入参数，这个参数会被传递给回调函数。如果该参数是一个 Promise，那么原 Promise 的状态就无效了，而是由传入的 Promise 的状态来决定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; reject(new Error(&apos;fail&apos;)), 3000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const p2 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; resolve(p1), 1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p2</span><br><span class=\"line\">  .then(result =&gt; console.log(result))</span><br><span class=\"line\">  .catch(error =&gt; console.log(error))</span><br><span class=\"line\">// Error: fail</span><br><span class=\"line\">// 此时 p2 本身的状态无效，而是要依赖于 p1 的状态</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Promise 并不会因 resolve 或 reject 函数的调用而终止自身的立即执行</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  resolve(1);</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">&#125;).then(r =&gt; &#123;</span><br><span class=\"line\">  console.log(r);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 在 Promise 内部的代码都是立即执行的，不管它是否位于 resolve 之后</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Promise-原型函数\"><a href=\"#Promise-原型函数\" class=\"headerlink\" title=\"Promise 原型函数\"></a>Promise 原型函数</h3><h4 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h4><ul>\n<li><p><strong>then 可以接受两个参数，第一个参数是 resolved 状态的回调函数，第二个参数（可选）是 rejected 状态的回调函数</strong></p>\n</li>\n<li><p><strong>返回一个新的 Promise 实例，所以可以进行链式调用 then，后续 then 中回调函数所接受的参数来源于之前 then 中的返回值。如果这个返回值是非 Promise，那么会直接传给 resolve 回调函数；如果这个返回值是 Promise，那么则需要等待该 Promise 的状态改变</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  resolve(&apos;外层 resolve&apos;);</span><br><span class=\"line\">&#125;).then(val =&gt; &#123;</span><br><span class=\"line\">  console.log(val);</span><br><span class=\"line\">  return new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    resolve(&apos;内部 resolve&apos;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(val =&gt; &#123;</span><br><span class=\"line\">  console.log(val);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 外层 resolve</span><br><span class=\"line\">// 内部 resolve</span><br><span class=\"line\">// 后面输出内部 resolve，说明它等待了上一个 then 中返回的 Promise 的状态改变</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h4><ul>\n<li><p><strong>Promise.prototype.catch 方法是 .then(null, rejection) 的别名，用于指定错误发生时的回调函数</strong></p>\n</li>\n<li><p><strong>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止</strong></p>\n</li>\n<li><p><strong>总是使用 catch 方法代替 then 方法的第二个参数，因为 catch 还可以捕获前面 then 方法执行中的错误</strong></p>\n</li>\n<li><p><strong>catch 返回的也是一个 Promise 对象，所以后面可以继续链式调用 then 或者 catch</strong></p>\n</li>\n</ul>\n<h3 id=\"Promise-静态函数\"><a href=\"#Promise-静态函数\" class=\"headerlink\" title=\"Promise 静态函数\"></a>Promise 静态函数</h3><h4 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h4><ul>\n<li><p><strong>接受的参数往往是一个 Promise 实例数组。如果不是数组，也可以是任何具有 Iterator 接口的迭代器；如果不是 Promise 实例，则会先调用 <code>Promise.resolve</code>方法将参数转为 Promise 实例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all([1, 2, 3])</span><br><span class=\"line\">  .then(val =&gt; &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">// [ 1, 2, 3 ]</span><br><span class=\"line\">// 等价于</span><br><span class=\"line\">Promise.all([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)])</span><br><span class=\"line\">  .then(val =&gt; &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>返回一个新的 Promise（后面称为 p）。只有当传入的 Promise 实例都变成 fulfilled 状态，p 的状态才会变成 fulfilled；否则，如果传入的 Promise 实例有一个被 rejected，p 的状态就变成 rejected</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  resolve(&apos;hello&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">const p2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  throw new Error(&apos;报错了&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(e =&gt; e);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all([p1, p2])</span><br><span class=\"line\">.then(result =&gt; console.log(result))</span><br><span class=\"line\">.catch(e =&gt; console.log(e));</span><br><span class=\"line\">// [&quot;hello&quot;, Error: 报错了]</span><br><span class=\"line\">// 上面的情况其实是进入了 then 方法中。原因是虽然 p2 定义的 Promise 状态变为 rejected 中了，但是其中最终传入 Promise.all() 的 p2 是 catch 方法的返回值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>返回的新的 Promise 实例 p 后的 then 也接受两个回调函数作为参数。如果是 fulfilled 的状态，那么回调函数参数为传入的 Promise 实例的返回值组成的数组；如果是 rejected 的状态，那么回调函数为第一个被 rejected 的实例的返回值</strong></p>\n</li>\n</ul>\n<h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h4><ul>\n<li><p><strong>一般用于将现有对象转为 Promise 对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.resolve(&apos;foo&apos;);</span><br><span class=\"line\">// 等价于</span><br><span class=\"line\">new Promise(resolve =&gt; resolve(&apos;foo&apos;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>立即 resolve 的 Promise 对象，是在本轮“事件循环”结束时而不是下一轮“事件循环”的开始时</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">  console.log(&apos;three&apos;);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">Promise.resolve().then(function () &#123;</span><br><span class=\"line\">  console.log(&apos;two&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;one&apos;);</span><br><span class=\"line\">// one</span><br><span class=\"line\">// two</span><br><span class=\"line\">// three</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"扩展题目\"><a href=\"#扩展题目\" class=\"headerlink\" title=\"扩展题目\"></a>扩展题目</h3><p>// 实现一个方法 parallel(tasks, concurrency)，让 tasks 并发执行（并控制并发数为 concurrency)<br>// 其中 tasks 为一个数组，每一个元素都是一个方法返回一个 promise<br>// 当所有 tasks 执行完成时，resolve 一个数组保存所有的结果<br>// 当任意一个 task 执行失败时，reject 这个错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const assert = require(&apos;assert&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">function task(input) &#123;</span><br><span class=\"line\">  return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; resolve(input), 1000);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">parallel([</span><br><span class=\"line\">  task(1),</span><br><span class=\"line\">  task(2),</span><br><span class=\"line\">  task(3),</span><br><span class=\"line\">  task(4),</span><br><span class=\"line\">  task(5),</span><br><span class=\"line\">], 2)</span><br><span class=\"line\">.then(res =&gt; assert.deepEqual(res, [1, 2, 3, 4, 5]));</span><br><span class=\"line\"></span><br><span class=\"line\">function parallel(tasks, concurrency) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　参考答案如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function parallel(tasks, concurrency) &#123;</span><br><span class=\"line\">  let concurrentTasks = tasks.slice(0, concurrency);</span><br><span class=\"line\">  tasks = tasks.slice(concurrency);</span><br><span class=\"line\">  let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    const results = [];</span><br><span class=\"line\">    for (let i = 0; i &lt; concurrency; i++) &#123;</span><br><span class=\"line\">      concurrentTasks[i].then(done, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function done(result) &#123;</span><br><span class=\"line\">      results.push(result);</span><br><span class=\"line\">      const task = tasks.shift();</span><br><span class=\"line\">      if (task) &#123;</span><br><span class=\"line\">        task.then(done, error);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        resolve(results);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function error(err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></p>\n"},{"title":"关于 MVC，MVP 和 MVVM 的一些理解","date":"2017-11-27T06:50:57.000Z","_content":"\nMVC，是我（自以为）很熟悉的一个编程模式，因为从大学以来搭建的各个项目来看，几乎每个项目都使用了 MVC 的思想。然而，在前一段时间的研究生课程中，旁边的同学问我 “MVC 是什么？” 的问题时，我竟一时语塞，答案也只能简单的介绍 M-V-C 三个字母分别代表什么，而不能做出更加深层次的回答。所以，就有了这篇文章。不过，这里的理解整体上还是比较浅显，大神们可以自动略过...\n\n### 什么是 MVC?\n\nM-Model，V-View，C-Controller 分别代表 模型-视图-控制器。\n\n- 模型，负责程序中的数据逻辑（既包括数据，也包括处理数据的逻辑），这是整个应用程序的核心。当我们面对一个问题时，对问题的本质的描述就是模型，而解决问题就是给问题建立模型，模型建立好了，问题的处理自然也会变得清晰。\n\n- 视图，是用户能够看到并与之交互的界面，我们每天浏览的网页就是视图。视图的职责比较单一，就是负责展示，至于展示的内容，还是由模型来决定的（所以说模型是核心嘛）。\n\n- 控制器，是模型和视图之间的桥梁。早起的 MVC 中，视图通过控制器来通知模型变更状态，模型履行了自己的职责后再通知视图来改变状态，简单来说，控制器和视图分别是模型的输入和输出。\n\n早期的 MVC 模式如图：\n\n![](http://image.beekka.com/blog/2015/bg2015020105.png)\n\n### 什么是 MVP?\n\nMVP 是 MVC 的一个变种。从上面的图中我们可以看出，在 MVC 中，Model 不依赖于 View，但是 View 是依赖于 Model 的，切断 Model 与 View 的联系，能够使得三者的关系更加清晰，职责也更加单一，因而这里对 Controller 做了改进。Controller 全权负责 Model 与 View 之间的通信而无需它们之间单独通信：Controller 将消息传递给 Model，Model 处理完数据后将数据的变化通知给 Controller，再由Controller 来通知 View 来变化视图，简单来说，它们之间的关系为  View <-> Controller <-> Model，以上说的 Controller 就是 MVP 中的 P-Presenter。这好像才是平时我熟悉的 MVC 模式，如图：\n\n![](http://image.beekka.com/blog/2015/bg2015020109.png)\n\n### 什么是 MVVM?\n\nMVVM 也是 MVC 的一个变种。MVP 中的 P 封装了 Model 和 View 之间的所有通信，那么能不能把这个通信自动化？也就是说，当 Model 变化 时，View 能够识别变化做出相应改变；当 View 变化时，Model 也能够识别变化做出相应改变。MVVM 就解决了这个问题。MVVM 与 MVP 十分相似，除了你需要为 View 量身定制一个 model，这个 model 就是 ViewModel，它实现了 Model 与 View 之间的双向数据绑定，从而能够达到 View 与 Model 之间的自动双向同步。MVVM 结构与 MVP 类似：\n\n![](http://images.cnitblog.com/i/380707/201403/152139487613221.png)\n\n\n### 参考文献：\n1. [MVC，MVP 和 MVVM 的图示 - 阮一峰](http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html)\n2. [从 Script 到 Code Blocks、Code Behind 到 MVC、MVP、MVVM](http://www.cnblogs.com/indream/p/3602348.html)\n3. [mvc、mvp、mvvm的架构简单解读](https://zhuanlan.zhihu.com/p/26287306)","source":"_posts/关于-MVC，MVP-和-MVVM-的一些理解.md","raw":"---\ntitle: 关于 MVC，MVP 和 MVVM 的一些理解\ndate: 2017-11-27 14:50:57\ntags:\n---\n\nMVC，是我（自以为）很熟悉的一个编程模式，因为从大学以来搭建的各个项目来看，几乎每个项目都使用了 MVC 的思想。然而，在前一段时间的研究生课程中，旁边的同学问我 “MVC 是什么？” 的问题时，我竟一时语塞，答案也只能简单的介绍 M-V-C 三个字母分别代表什么，而不能做出更加深层次的回答。所以，就有了这篇文章。不过，这里的理解整体上还是比较浅显，大神们可以自动略过...\n\n### 什么是 MVC?\n\nM-Model，V-View，C-Controller 分别代表 模型-视图-控制器。\n\n- 模型，负责程序中的数据逻辑（既包括数据，也包括处理数据的逻辑），这是整个应用程序的核心。当我们面对一个问题时，对问题的本质的描述就是模型，而解决问题就是给问题建立模型，模型建立好了，问题的处理自然也会变得清晰。\n\n- 视图，是用户能够看到并与之交互的界面，我们每天浏览的网页就是视图。视图的职责比较单一，就是负责展示，至于展示的内容，还是由模型来决定的（所以说模型是核心嘛）。\n\n- 控制器，是模型和视图之间的桥梁。早起的 MVC 中，视图通过控制器来通知模型变更状态，模型履行了自己的职责后再通知视图来改变状态，简单来说，控制器和视图分别是模型的输入和输出。\n\n早期的 MVC 模式如图：\n\n![](http://image.beekka.com/blog/2015/bg2015020105.png)\n\n### 什么是 MVP?\n\nMVP 是 MVC 的一个变种。从上面的图中我们可以看出，在 MVC 中，Model 不依赖于 View，但是 View 是依赖于 Model 的，切断 Model 与 View 的联系，能够使得三者的关系更加清晰，职责也更加单一，因而这里对 Controller 做了改进。Controller 全权负责 Model 与 View 之间的通信而无需它们之间单独通信：Controller 将消息传递给 Model，Model 处理完数据后将数据的变化通知给 Controller，再由Controller 来通知 View 来变化视图，简单来说，它们之间的关系为  View <-> Controller <-> Model，以上说的 Controller 就是 MVP 中的 P-Presenter。这好像才是平时我熟悉的 MVC 模式，如图：\n\n![](http://image.beekka.com/blog/2015/bg2015020109.png)\n\n### 什么是 MVVM?\n\nMVVM 也是 MVC 的一个变种。MVP 中的 P 封装了 Model 和 View 之间的所有通信，那么能不能把这个通信自动化？也就是说，当 Model 变化 时，View 能够识别变化做出相应改变；当 View 变化时，Model 也能够识别变化做出相应改变。MVVM 就解决了这个问题。MVVM 与 MVP 十分相似，除了你需要为 View 量身定制一个 model，这个 model 就是 ViewModel，它实现了 Model 与 View 之间的双向数据绑定，从而能够达到 View 与 Model 之间的自动双向同步。MVVM 结构与 MVP 类似：\n\n![](http://images.cnitblog.com/i/380707/201403/152139487613221.png)\n\n\n### 参考文献：\n1. [MVC，MVP 和 MVVM 的图示 - 阮一峰](http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html)\n2. [从 Script 到 Code Blocks、Code Behind 到 MVC、MVP、MVVM](http://www.cnblogs.com/indream/p/3602348.html)\n3. [mvc、mvp、mvvm的架构简单解读](https://zhuanlan.zhihu.com/p/26287306)","slug":"关于-MVC，MVP-和-MVVM-的一些理解","published":1,"updated":"2018-01-09T05:34:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdh000bvxslvjf5oh11","content":"<p>MVC，是我（自以为）很熟悉的一个编程模式，因为从大学以来搭建的各个项目来看，几乎每个项目都使用了 MVC 的思想。然而，在前一段时间的研究生课程中，旁边的同学问我 “MVC 是什么？” 的问题时，我竟一时语塞，答案也只能简单的介绍 M-V-C 三个字母分别代表什么，而不能做出更加深层次的回答。所以，就有了这篇文章。不过，这里的理解整体上还是比较浅显，大神们可以自动略过…</p>\n<h3 id=\"什么是-MVC\"><a href=\"#什么是-MVC\" class=\"headerlink\" title=\"什么是 MVC?\"></a>什么是 MVC?</h3><p>M-Model，V-View，C-Controller 分别代表 模型-视图-控制器。</p>\n<ul>\n<li><p>模型，负责程序中的数据逻辑（既包括数据，也包括处理数据的逻辑），这是整个应用程序的核心。当我们面对一个问题时，对问题的本质的描述就是模型，而解决问题就是给问题建立模型，模型建立好了，问题的处理自然也会变得清晰。</p>\n</li>\n<li><p>视图，是用户能够看到并与之交互的界面，我们每天浏览的网页就是视图。视图的职责比较单一，就是负责展示，至于展示的内容，还是由模型来决定的（所以说模型是核心嘛）。</p>\n</li>\n<li><p>控制器，是模型和视图之间的桥梁。早起的 MVC 中，视图通过控制器来通知模型变更状态，模型履行了自己的职责后再通知视图来改变状态，简单来说，控制器和视图分别是模型的输入和输出。</p>\n</li>\n</ul>\n<p>早期的 MVC 模式如图：</p>\n<p><img src=\"http://image.beekka.com/blog/2015/bg2015020105.png\" alt=\"\"></p>\n<h3 id=\"什么是-MVP\"><a href=\"#什么是-MVP\" class=\"headerlink\" title=\"什么是 MVP?\"></a>什么是 MVP?</h3><p>MVP 是 MVC 的一个变种。从上面的图中我们可以看出，在 MVC 中，Model 不依赖于 View，但是 View 是依赖于 Model 的，切断 Model 与 View 的联系，能够使得三者的关系更加清晰，职责也更加单一，因而这里对 Controller 做了改进。Controller 全权负责 Model 与 View 之间的通信而无需它们之间单独通信：Controller 将消息传递给 Model，Model 处理完数据后将数据的变化通知给 Controller，再由Controller 来通知 View 来变化视图，简单来说，它们之间的关系为  View &lt;-&gt; Controller &lt;-&gt; Model，以上说的 Controller 就是 MVP 中的 P-Presenter。这好像才是平时我熟悉的 MVC 模式，如图：</p>\n<p><img src=\"http://image.beekka.com/blog/2015/bg2015020109.png\" alt=\"\"></p>\n<h3 id=\"什么是-MVVM\"><a href=\"#什么是-MVVM\" class=\"headerlink\" title=\"什么是 MVVM?\"></a>什么是 MVVM?</h3><p>MVVM 也是 MVC 的一个变种。MVP 中的 P 封装了 Model 和 View 之间的所有通信，那么能不能把这个通信自动化？也就是说，当 Model 变化 时，View 能够识别变化做出相应改变；当 View 变化时，Model 也能够识别变化做出相应改变。MVVM 就解决了这个问题。MVVM 与 MVP 十分相似，除了你需要为 View 量身定制一个 model，这个 model 就是 ViewModel，它实现了 Model 与 View 之间的双向数据绑定，从而能够达到 View 与 Model 之间的自动双向同步。MVVM 结构与 MVP 类似：</p>\n<p><img src=\"http://images.cnitblog.com/i/380707/201403/152139487613221.png\" alt=\"\"></p>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\" target=\"_blank\" rel=\"external\">MVC，MVP 和 MVVM 的图示 - 阮一峰</a></li>\n<li><a href=\"http://www.cnblogs.com/indream/p/3602348.html\" target=\"_blank\" rel=\"external\">从 Script 到 Code Blocks、Code Behind 到 MVC、MVP、MVVM</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26287306\" target=\"_blank\" rel=\"external\">mvc、mvp、mvvm的架构简单解读</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>MVC，是我（自以为）很熟悉的一个编程模式，因为从大学以来搭建的各个项目来看，几乎每个项目都使用了 MVC 的思想。然而，在前一段时间的研究生课程中，旁边的同学问我 “MVC 是什么？” 的问题时，我竟一时语塞，答案也只能简单的介绍 M-V-C 三个字母分别代表什么，而不能做出更加深层次的回答。所以，就有了这篇文章。不过，这里的理解整体上还是比较浅显，大神们可以自动略过…</p>\n<h3 id=\"什么是-MVC\"><a href=\"#什么是-MVC\" class=\"headerlink\" title=\"什么是 MVC?\"></a>什么是 MVC?</h3><p>M-Model，V-View，C-Controller 分别代表 模型-视图-控制器。</p>\n<ul>\n<li><p>模型，负责程序中的数据逻辑（既包括数据，也包括处理数据的逻辑），这是整个应用程序的核心。当我们面对一个问题时，对问题的本质的描述就是模型，而解决问题就是给问题建立模型，模型建立好了，问题的处理自然也会变得清晰。</p>\n</li>\n<li><p>视图，是用户能够看到并与之交互的界面，我们每天浏览的网页就是视图。视图的职责比较单一，就是负责展示，至于展示的内容，还是由模型来决定的（所以说模型是核心嘛）。</p>\n</li>\n<li><p>控制器，是模型和视图之间的桥梁。早起的 MVC 中，视图通过控制器来通知模型变更状态，模型履行了自己的职责后再通知视图来改变状态，简单来说，控制器和视图分别是模型的输入和输出。</p>\n</li>\n</ul>\n<p>早期的 MVC 模式如图：</p>\n<p><img src=\"http://image.beekka.com/blog/2015/bg2015020105.png\" alt=\"\"></p>\n<h3 id=\"什么是-MVP\"><a href=\"#什么是-MVP\" class=\"headerlink\" title=\"什么是 MVP?\"></a>什么是 MVP?</h3><p>MVP 是 MVC 的一个变种。从上面的图中我们可以看出，在 MVC 中，Model 不依赖于 View，但是 View 是依赖于 Model 的，切断 Model 与 View 的联系，能够使得三者的关系更加清晰，职责也更加单一，因而这里对 Controller 做了改进。Controller 全权负责 Model 与 View 之间的通信而无需它们之间单独通信：Controller 将消息传递给 Model，Model 处理完数据后将数据的变化通知给 Controller，再由Controller 来通知 View 来变化视图，简单来说，它们之间的关系为  View &lt;-&gt; Controller &lt;-&gt; Model，以上说的 Controller 就是 MVP 中的 P-Presenter。这好像才是平时我熟悉的 MVC 模式，如图：</p>\n<p><img src=\"http://image.beekka.com/blog/2015/bg2015020109.png\" alt=\"\"></p>\n<h3 id=\"什么是-MVVM\"><a href=\"#什么是-MVVM\" class=\"headerlink\" title=\"什么是 MVVM?\"></a>什么是 MVVM?</h3><p>MVVM 也是 MVC 的一个变种。MVP 中的 P 封装了 Model 和 View 之间的所有通信，那么能不能把这个通信自动化？也就是说，当 Model 变化 时，View 能够识别变化做出相应改变；当 View 变化时，Model 也能够识别变化做出相应改变。MVVM 就解决了这个问题。MVVM 与 MVP 十分相似，除了你需要为 View 量身定制一个 model，这个 model 就是 ViewModel，它实现了 Model 与 View 之间的双向数据绑定，从而能够达到 View 与 Model 之间的自动双向同步。MVVM 结构与 MVP 类似：</p>\n<p><img src=\"http://images.cnitblog.com/i/380707/201403/152139487613221.png\" alt=\"\"></p>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\" target=\"_blank\" rel=\"external\">MVC，MVP 和 MVVM 的图示 - 阮一峰</a></li>\n<li><a href=\"http://www.cnblogs.com/indream/p/3602348.html\" target=\"_blank\" rel=\"external\">从 Script 到 Code Blocks、Code Behind 到 MVC、MVP、MVVM</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26287306\" target=\"_blank\" rel=\"external\">mvc、mvp、mvvm的架构简单解读</a></li>\n</ol>\n"},{"title":"异步编程通用解决方案","date":"2018-02-26T02:58:35.000Z","_content":"\n　　在该文中，我们希望封装一个异步函数的语法糖，使得它能够兼具回调函数、Promise、Generator 以及 async/await 的写法特点，形成一个通用的异步编程解决方案。目的是在异步编程的过程中，以不变的方法，应万变的方式。在本文中，前四小节主要介绍如何使用各种方式来进行异步函数 asyncMethod 的调用，了解了如何调用后，最后一节的着重点在于设计该异步函数 asyncMethod，使得它满足之前提到的所有调用场景。\n\n### 回调函数\n　　回调函数可以说是 JS 语言一个非常鲜明的特性，它允许我们在未来的某个时间执行一个函数。JS 语言本身就提供了非常多支持回调函数的 API，比如定时器函数：\n```\nsetTimeout(function() {\n  // 执行逻辑\n}, 1000);\n```\n　　在 Node.js 中，设计回调函数的一个通用原则是把错误和结果都放到回调函数中做处理，往往是把错误 err 作为第一个参数，结果 val 作为第二个参数。所以 asyncMethod 的调用方式设计如下：\n```\nasyncMethod(data, (err, val) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(val);\n  }\n});\n```\n\n### Promise\n　　Promise 是异步编程的一种解决方案，它的出现完美优雅的解决了回调地狱的问题。Promise 的用法如下：\n```\nconst promise = new Promise(function(resolve, reject) {\n  // ... 执行逻辑\n  if (/* 异步操作成功 */){\n    resolve(val);\n  } else {\n    reject(err);\n  }\n});\n\npromise.then(function(value) {\n  // 成功\n}, function(error) {\n  // 失败\n});\n```\n有了对 Promise 基本用法的掌握后，我们希望 asyncMethod 的调用方式兼容 Promise：\n```\nasyncMethod(data)\n  .then(val => {\n    console.log(val);\n  })\n  .catch(err => {\n    console.log(err);\n  });\n```\n\n### Generator 函数\n　　Generator 是 ES6 提出的一种异步编程解决方案。它是一个状态机，封装了多个内部状态。Generator 函数的基本形式如下：\n```\nfunction *numberGenerator() {\n  yield 1;\n  yield 2;\n  return 3;\n}\nconst ng = numberGenerator();\nng.next(); // { value: 1, done: false }\nng.next(); // { value: 2, done: false }\nng.next(); // { value: 3, done: true }\n```\n　　该函数包含三个状态：1，2 和 3。调用该函数时，返回一个遍历器对象，代表 Generator 函数的内部指针。当该遍历器调用 next 方法时，才会遍历下一个状态，所以其实是提供了一种可以暂停执行的函数，而这一点其实是将 Generator 函数用于异步场景的关键点。所以 Generator 函数的一个特点就是每遇到一个 yield，函数就将执行权交出，等到 yield 后面的操作执行完毕后，继续执行；若 yield 后面跟了一个异步操作，那么我们可以在这之后得到本次异步操作的结果，这种写法的优点之一就是可以变异步为“同步”，写起来会十分流畅。理解了 Generator 函数的异步理念后，可以设想 asyncMethod 的用法如下：\n```\nfunction *gen() {\n  try {\n    let val = yield asyncMethod(data);\n    console.log(val);\n  } catch (err) {\n    console.log(err);\n  }\n}\n```\n　　但是 Generator 函数的执行是需要通过不断调用 next 函数来实现的，因而可以在上面函数的最外层再套一个 genWrapper 用来控制流程的执行，genWrapper 可以自行进行实现，当然最好使用 tj 大神写的 co 模块。具体代码如下：\n```\nco(gen);\n```\n　　讲到这里呢，其实可以发现 asyncMethod 对待 Generator 函数并没有特殊之处，所以 Generator 的异步方式对 asyncMethod 的具体实现不产生影响。\n\n### async/await\n　　async 函数是 Generator 函数的语法糖。\n- 它的语法类似于 Generator 函数，把 * 换成 async，把 yield 换成 await\n- Generator 函数的执行必须依靠执行器，async 函数通过封装自带执行器\n- 返回 Promise 对象，可以使用 then 指定下一步的操作\n　　async 函数在调用时与同步操作一样，只要一行就可以搞定。asyncMethod 的用法如下：\n```\nasync function asyncWrapper(data) {\n  try {\n    let val = await asyncMethod(data);\n    console.log(val);\n  } catch (err) {\n    console.log(err);\n  }\n}\nasyncWrapper(data);\n```\n\n### 通用异步编程方案\n　　终于进入正题，前面已经总结过使用回调函数，Promise，Generator 函数和 async 函数调用 asyncMethod 的方法，其实不难发现，真正有启发性的是回调函数和 Promise，因为另外两种用法只要返回 Promise 就可支持。asyncMethod 的实现如下：\n```\nconst asyncMethod = function () {\n  const args = Array.prototype.slice.call(arguments);\n  const data = args[0];\n  const cb = args[1];\n\n  const promise = new Promise((resolve, reject) => {\n    if (typeof data === 'number') {\n      resolve(data);\n    } else {\n      reject(data);\n    }\n  });\n\n  if (typeof cb === 'function') {\n    return promise\n      .then(val => {\n        cb.call(this, null, val);\n      })\n      .catch(err => {\n        cb.call(this, err);\n      });\n  }\n\n  return promise;\n};\n```\n\n### 注明\n- data 是应该替换为真实的数据，我使用如下两个变量来进行的测试（你可以把 data 替换为 number 或者 error）\n```\nconst number = 1;\nconst error = new Error('error');\n```\n- 以上的代码全部复制到编辑器中就可以运行（不要忘记安装 co 模块）\n- 本文主要说明思想，很多场景可能无法覆盖，望见谅\n\n### 参考资料\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/)","source":"_posts/异步编程通用解决方案.md","raw":"---\ntitle: 异步编程通用解决方案\ndate: 2018-02-26 10:58:35\ntags:\n---\n\n　　在该文中，我们希望封装一个异步函数的语法糖，使得它能够兼具回调函数、Promise、Generator 以及 async/await 的写法特点，形成一个通用的异步编程解决方案。目的是在异步编程的过程中，以不变的方法，应万变的方式。在本文中，前四小节主要介绍如何使用各种方式来进行异步函数 asyncMethod 的调用，了解了如何调用后，最后一节的着重点在于设计该异步函数 asyncMethod，使得它满足之前提到的所有调用场景。\n\n### 回调函数\n　　回调函数可以说是 JS 语言一个非常鲜明的特性，它允许我们在未来的某个时间执行一个函数。JS 语言本身就提供了非常多支持回调函数的 API，比如定时器函数：\n```\nsetTimeout(function() {\n  // 执行逻辑\n}, 1000);\n```\n　　在 Node.js 中，设计回调函数的一个通用原则是把错误和结果都放到回调函数中做处理，往往是把错误 err 作为第一个参数，结果 val 作为第二个参数。所以 asyncMethod 的调用方式设计如下：\n```\nasyncMethod(data, (err, val) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(val);\n  }\n});\n```\n\n### Promise\n　　Promise 是异步编程的一种解决方案，它的出现完美优雅的解决了回调地狱的问题。Promise 的用法如下：\n```\nconst promise = new Promise(function(resolve, reject) {\n  // ... 执行逻辑\n  if (/* 异步操作成功 */){\n    resolve(val);\n  } else {\n    reject(err);\n  }\n});\n\npromise.then(function(value) {\n  // 成功\n}, function(error) {\n  // 失败\n});\n```\n有了对 Promise 基本用法的掌握后，我们希望 asyncMethod 的调用方式兼容 Promise：\n```\nasyncMethod(data)\n  .then(val => {\n    console.log(val);\n  })\n  .catch(err => {\n    console.log(err);\n  });\n```\n\n### Generator 函数\n　　Generator 是 ES6 提出的一种异步编程解决方案。它是一个状态机，封装了多个内部状态。Generator 函数的基本形式如下：\n```\nfunction *numberGenerator() {\n  yield 1;\n  yield 2;\n  return 3;\n}\nconst ng = numberGenerator();\nng.next(); // { value: 1, done: false }\nng.next(); // { value: 2, done: false }\nng.next(); // { value: 3, done: true }\n```\n　　该函数包含三个状态：1，2 和 3。调用该函数时，返回一个遍历器对象，代表 Generator 函数的内部指针。当该遍历器调用 next 方法时，才会遍历下一个状态，所以其实是提供了一种可以暂停执行的函数，而这一点其实是将 Generator 函数用于异步场景的关键点。所以 Generator 函数的一个特点就是每遇到一个 yield，函数就将执行权交出，等到 yield 后面的操作执行完毕后，继续执行；若 yield 后面跟了一个异步操作，那么我们可以在这之后得到本次异步操作的结果，这种写法的优点之一就是可以变异步为“同步”，写起来会十分流畅。理解了 Generator 函数的异步理念后，可以设想 asyncMethod 的用法如下：\n```\nfunction *gen() {\n  try {\n    let val = yield asyncMethod(data);\n    console.log(val);\n  } catch (err) {\n    console.log(err);\n  }\n}\n```\n　　但是 Generator 函数的执行是需要通过不断调用 next 函数来实现的，因而可以在上面函数的最外层再套一个 genWrapper 用来控制流程的执行，genWrapper 可以自行进行实现，当然最好使用 tj 大神写的 co 模块。具体代码如下：\n```\nco(gen);\n```\n　　讲到这里呢，其实可以发现 asyncMethod 对待 Generator 函数并没有特殊之处，所以 Generator 的异步方式对 asyncMethod 的具体实现不产生影响。\n\n### async/await\n　　async 函数是 Generator 函数的语法糖。\n- 它的语法类似于 Generator 函数，把 * 换成 async，把 yield 换成 await\n- Generator 函数的执行必须依靠执行器，async 函数通过封装自带执行器\n- 返回 Promise 对象，可以使用 then 指定下一步的操作\n　　async 函数在调用时与同步操作一样，只要一行就可以搞定。asyncMethod 的用法如下：\n```\nasync function asyncWrapper(data) {\n  try {\n    let val = await asyncMethod(data);\n    console.log(val);\n  } catch (err) {\n    console.log(err);\n  }\n}\nasyncWrapper(data);\n```\n\n### 通用异步编程方案\n　　终于进入正题，前面已经总结过使用回调函数，Promise，Generator 函数和 async 函数调用 asyncMethod 的方法，其实不难发现，真正有启发性的是回调函数和 Promise，因为另外两种用法只要返回 Promise 就可支持。asyncMethod 的实现如下：\n```\nconst asyncMethod = function () {\n  const args = Array.prototype.slice.call(arguments);\n  const data = args[0];\n  const cb = args[1];\n\n  const promise = new Promise((resolve, reject) => {\n    if (typeof data === 'number') {\n      resolve(data);\n    } else {\n      reject(data);\n    }\n  });\n\n  if (typeof cb === 'function') {\n    return promise\n      .then(val => {\n        cb.call(this, null, val);\n      })\n      .catch(err => {\n        cb.call(this, err);\n      });\n  }\n\n  return promise;\n};\n```\n\n### 注明\n- data 是应该替换为真实的数据，我使用如下两个变量来进行的测试（你可以把 data 替换为 number 或者 error）\n```\nconst number = 1;\nconst error = new Error('error');\n```\n- 以上的代码全部复制到编辑器中就可以运行（不要忘记安装 co 模块）\n- 本文主要说明思想，很多场景可能无法覆盖，望见谅\n\n### 参考资料\n[ECMAScript 6 入门](http://es6.ruanyifeng.com/)","slug":"异步编程通用解决方案","published":1,"updated":"2018-03-21T13:54:32.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdi000cvxsl0vlu1i2i","content":"<p>　　在该文中，我们希望封装一个异步函数的语法糖，使得它能够兼具回调函数、Promise、Generator 以及 async/await 的写法特点，形成一个通用的异步编程解决方案。目的是在异步编程的过程中，以不变的方法，应万变的方式。在本文中，前四小节主要介绍如何使用各种方式来进行异步函数 asyncMethod 的调用，了解了如何调用后，最后一节的着重点在于设计该异步函数 asyncMethod，使得它满足之前提到的所有调用场景。</p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>　　回调函数可以说是 JS 语言一个非常鲜明的特性，它允许我们在未来的某个时间执行一个函数。JS 语言本身就提供了非常多支持回调函数的 API，比如定时器函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">  // 执行逻辑</span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure></p>\n<p>　　在 Node.js 中，设计回调函数的一个通用原则是把错误和结果都放到回调函数中做处理，往往是把错误 err 作为第一个参数，结果 val 作为第二个参数。所以 asyncMethod 的调用方式设计如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncMethod(data, (err, val) =&gt; &#123;</span><br><span class=\"line\">  if (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>　　Promise 是异步编程的一种解决方案，它的出现完美优雅的解决了回调地狱的问题。Promise 的用法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  // ... 执行逻辑</span><br><span class=\"line\">  if (/* 异步操作成功 */)&#123;</span><br><span class=\"line\">    resolve(val);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    reject(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(function(value) &#123;</span><br><span class=\"line\">  // 成功</span><br><span class=\"line\">&#125;, function(error) &#123;</span><br><span class=\"line\">  // 失败</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>有了对 Promise 基本用法的掌握后，我们希望 asyncMethod 的调用方式兼容 Promise：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncMethod(data)</span><br><span class=\"line\">  .then(val =&gt; &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(err =&gt; &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h3><p>　　Generator 是 ES6 提出的一种异步编程解决方案。它是一个状态机，封装了多个内部状态。Generator 函数的基本形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function *numberGenerator() &#123;</span><br><span class=\"line\">  yield 1;</span><br><span class=\"line\">  yield 2;</span><br><span class=\"line\">  return 3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const ng = numberGenerator();</span><br><span class=\"line\">ng.next(); // &#123; value: 1, done: false &#125;</span><br><span class=\"line\">ng.next(); // &#123; value: 2, done: false &#125;</span><br><span class=\"line\">ng.next(); // &#123; value: 3, done: true &#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　该函数包含三个状态：1，2 和 3。调用该函数时，返回一个遍历器对象，代表 Generator 函数的内部指针。当该遍历器调用 next 方法时，才会遍历下一个状态，所以其实是提供了一种可以暂停执行的函数，而这一点其实是将 Generator 函数用于异步场景的关键点。所以 Generator 函数的一个特点就是每遇到一个 yield，函数就将执行权交出，等到 yield 后面的操作执行完毕后，继续执行；若 yield 后面跟了一个异步操作，那么我们可以在这之后得到本次异步操作的结果，这种写法的优点之一就是可以变异步为“同步”，写起来会十分流畅。理解了 Generator 函数的异步理念后，可以设想 asyncMethod 的用法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function *gen() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    let val = yield asyncMethod(data);</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　但是 Generator 函数的执行是需要通过不断调用 next 函数来实现的，因而可以在上面函数的最外层再套一个 genWrapper 用来控制流程的执行，genWrapper 可以自行进行实现，当然最好使用 tj 大神写的 co 模块。具体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(gen);</span><br></pre></td></tr></table></figure></p>\n<p>　　讲到这里呢，其实可以发现 asyncMethod 对待 Generator 函数并没有特殊之处，所以 Generator 的异步方式对 asyncMethod 的具体实现不产生影响。</p>\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><p>　　async 函数是 Generator 函数的语法糖。</p>\n<ul>\n<li>它的语法类似于 Generator 函数，把 * 换成 async，把 yield 换成 await</li>\n<li>Generator 函数的执行必须依靠执行器，async 函数通过封装自带执行器</li>\n<li>返回 Promise 对象，可以使用 then 指定下一步的操作<br>　　async 函数在调用时与同步操作一样，只要一行就可以搞定。asyncMethod 的用法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function asyncWrapper(data) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    let val = await asyncMethod(data);</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">asyncWrapper(data);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"通用异步编程方案\"><a href=\"#通用异步编程方案\" class=\"headerlink\" title=\"通用异步编程方案\"></a>通用异步编程方案</h3><p>　　终于进入正题，前面已经总结过使用回调函数，Promise，Generator 函数和 async 函数调用 asyncMethod 的方法，其实不难发现，真正有启发性的是回调函数和 Promise，因为另外两种用法只要返回 Promise 就可支持。asyncMethod 的实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const asyncMethod = function () &#123;</span><br><span class=\"line\">  const args = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">  const data = args[0];</span><br><span class=\"line\">  const cb = args[1];</span><br><span class=\"line\"></span><br><span class=\"line\">  const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    if (typeof data === &apos;number&apos;) &#123;</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      reject(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  if (typeof cb === &apos;function&apos;) &#123;</span><br><span class=\"line\">    return promise</span><br><span class=\"line\">      .then(val =&gt; &#123;</span><br><span class=\"line\">        cb.call(this, null, val);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(err =&gt; &#123;</span><br><span class=\"line\">        cb.call(this, err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注明\"><a href=\"#注明\" class=\"headerlink\" title=\"注明\"></a>注明</h3><ul>\n<li><p>data 是应该替换为真实的数据，我使用如下两个变量来进行的测试（你可以把 data 替换为 number 或者 error）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const number = 1;</span><br><span class=\"line\">const error = new Error(&apos;error&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以上的代码全部复制到编辑器中就可以运行（不要忘记安装 co 模块）</p>\n</li>\n<li>本文主要说明思想，很多场景可能无法覆盖，望见谅</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　在该文中，我们希望封装一个异步函数的语法糖，使得它能够兼具回调函数、Promise、Generator 以及 async/await 的写法特点，形成一个通用的异步编程解决方案。目的是在异步编程的过程中，以不变的方法，应万变的方式。在本文中，前四小节主要介绍如何使用各种方式来进行异步函数 asyncMethod 的调用，了解了如何调用后，最后一节的着重点在于设计该异步函数 asyncMethod，使得它满足之前提到的所有调用场景。</p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>　　回调函数可以说是 JS 语言一个非常鲜明的特性，它允许我们在未来的某个时间执行一个函数。JS 语言本身就提供了非常多支持回调函数的 API，比如定时器函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">  // 执行逻辑</span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure></p>\n<p>　　在 Node.js 中，设计回调函数的一个通用原则是把错误和结果都放到回调函数中做处理，往往是把错误 err 作为第一个参数，结果 val 作为第二个参数。所以 asyncMethod 的调用方式设计如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncMethod(data, (err, val) =&gt; &#123;</span><br><span class=\"line\">  if (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>　　Promise 是异步编程的一种解决方案，它的出现完美优雅的解决了回调地狱的问题。Promise 的用法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  // ... 执行逻辑</span><br><span class=\"line\">  if (/* 异步操作成功 */)&#123;</span><br><span class=\"line\">    resolve(val);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    reject(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(function(value) &#123;</span><br><span class=\"line\">  // 成功</span><br><span class=\"line\">&#125;, function(error) &#123;</span><br><span class=\"line\">  // 失败</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>有了对 Promise 基本用法的掌握后，我们希望 asyncMethod 的调用方式兼容 Promise：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncMethod(data)</span><br><span class=\"line\">  .then(val =&gt; &#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(err =&gt; &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h3><p>　　Generator 是 ES6 提出的一种异步编程解决方案。它是一个状态机，封装了多个内部状态。Generator 函数的基本形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function *numberGenerator() &#123;</span><br><span class=\"line\">  yield 1;</span><br><span class=\"line\">  yield 2;</span><br><span class=\"line\">  return 3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const ng = numberGenerator();</span><br><span class=\"line\">ng.next(); // &#123; value: 1, done: false &#125;</span><br><span class=\"line\">ng.next(); // &#123; value: 2, done: false &#125;</span><br><span class=\"line\">ng.next(); // &#123; value: 3, done: true &#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　该函数包含三个状态：1，2 和 3。调用该函数时，返回一个遍历器对象，代表 Generator 函数的内部指针。当该遍历器调用 next 方法时，才会遍历下一个状态，所以其实是提供了一种可以暂停执行的函数，而这一点其实是将 Generator 函数用于异步场景的关键点。所以 Generator 函数的一个特点就是每遇到一个 yield，函数就将执行权交出，等到 yield 后面的操作执行完毕后，继续执行；若 yield 后面跟了一个异步操作，那么我们可以在这之后得到本次异步操作的结果，这种写法的优点之一就是可以变异步为“同步”，写起来会十分流畅。理解了 Generator 函数的异步理念后，可以设想 asyncMethod 的用法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function *gen() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    let val = yield asyncMethod(data);</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　但是 Generator 函数的执行是需要通过不断调用 next 函数来实现的，因而可以在上面函数的最外层再套一个 genWrapper 用来控制流程的执行，genWrapper 可以自行进行实现，当然最好使用 tj 大神写的 co 模块。具体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(gen);</span><br></pre></td></tr></table></figure></p>\n<p>　　讲到这里呢，其实可以发现 asyncMethod 对待 Generator 函数并没有特殊之处，所以 Generator 的异步方式对 asyncMethod 的具体实现不产生影响。</p>\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><p>　　async 函数是 Generator 函数的语法糖。</p>\n<ul>\n<li>它的语法类似于 Generator 函数，把 * 换成 async，把 yield 换成 await</li>\n<li>Generator 函数的执行必须依靠执行器，async 函数通过封装自带执行器</li>\n<li>返回 Promise 对象，可以使用 then 指定下一步的操作<br>　　async 函数在调用时与同步操作一样，只要一行就可以搞定。asyncMethod 的用法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function asyncWrapper(data) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    let val = await asyncMethod(data);</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">asyncWrapper(data);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"通用异步编程方案\"><a href=\"#通用异步编程方案\" class=\"headerlink\" title=\"通用异步编程方案\"></a>通用异步编程方案</h3><p>　　终于进入正题，前面已经总结过使用回调函数，Promise，Generator 函数和 async 函数调用 asyncMethod 的方法，其实不难发现，真正有启发性的是回调函数和 Promise，因为另外两种用法只要返回 Promise 就可支持。asyncMethod 的实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const asyncMethod = function () &#123;</span><br><span class=\"line\">  const args = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">  const data = args[0];</span><br><span class=\"line\">  const cb = args[1];</span><br><span class=\"line\"></span><br><span class=\"line\">  const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    if (typeof data === &apos;number&apos;) &#123;</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      reject(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  if (typeof cb === &apos;function&apos;) &#123;</span><br><span class=\"line\">    return promise</span><br><span class=\"line\">      .then(val =&gt; &#123;</span><br><span class=\"line\">        cb.call(this, null, val);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(err =&gt; &#123;</span><br><span class=\"line\">        cb.call(this, err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注明\"><a href=\"#注明\" class=\"headerlink\" title=\"注明\"></a>注明</h3><ul>\n<li><p>data 是应该替换为真实的数据，我使用如下两个变量来进行的测试（你可以把 data 替换为 number 或者 error）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const number = 1;</span><br><span class=\"line\">const error = new Error(&apos;error&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以上的代码全部复制到编辑器中就可以运行（不要忘记安装 co 模块）</p>\n</li>\n<li>本文主要说明思想，很多场景可能无法覆盖，望见谅</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></p>\n"},{"title":"JavaScript高级程序回顾(三)——吓唬人的闭包","date":"2018-01-09T11:30:41.000Z","_content":"\n### 碎碎念\n　　初学前端时，觉得闭包是个好难好难理解的概念啊。再加上本身闭包的重要性，以及各类看不懂的关于闭包的文章，更是打击了我的自信心。后来看了 JS 高程三中的相关章节，豁然开朗。下面，我尽量以最通俗的方式给大家讲一下神秘的闭包。\n\n### 执行环境和作用域\n　　要理解*闭包*，必须先对*执行环境*和*作用域*有一个概念。\n　　(代码的)*执行环境*，顾名思义，是指当前的代码处在怎样的环境中执行，类似于人类周边的环境有水、空气等等，代码的环境里有变量、函数等。(代码的)执行环境是代码能够真实感触到的变量和函数，它定义了代码有权访问的其他数据，环境中定义的所有变量和函数都保存在一个*变量对象*中。\n　　*全局执行环境*是最外围的一个执行环境。当我们在浏览器控制台时，总能访问到 window 对象；当我们在 node 终端时，总能访问到 global 对象。其实这两个对象都可以被认为是全局执行环境，因为所有的全局变量和函数都是作为它的属性和方法创建的。全局执行环境会一直持续到应用程序退出，例如关闭网页或者关闭 node 控制台。\n　　当代码在一个环境中执行时，会创建变量对象的一个*作用域链*。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。通过这句话，我觉得可以得到很多的信息。首先，作用域链，是将变量对象链起来的，变量对象用来存储执行环境中的变量和函数（这里我觉得也可以认为作用域链将执行环境链起来了）；再者，它保证了有序访问，那什么是有序访问呢？当然是先访问自己的变量对象，自己没有了就去上层变量对象找，直至将回溯到链条顶端，也就是全局执行环境。为了帮助理解，可以看下面的代码和图：\n```\nfunction A() {\n  var a = 1;\n  function B() {\n    var b = 2;\n  }\n}\n```\n![](https://wx4.sinaimg.cn/mw690/79b5b053ly1fnanavvykqj20gb089t9w.jpg)　　可以看图中我的标注。红色的箭头链条代表函数 B 内的作用域链，该链所经过之处的所有变量和函数，就是函数 B 内部可以访问到的，而该链的方向就代表的是上面提到的有序访问的访问方向。黄色的矩形代表一个一个的执行环境，将其认为作变量对象我觉得也可以。\n\n### 闭包\n　　在我还不清楚究竟什么是闭包的时候，别人问我闭包是什么，我就说“匿名函数”，可想而知，网络上有多少的流言蜚语是这样冤枉闭包的。闭包是指有权访问另一个函数作用域中的变量的函数，之所以很多人混用匿名函数和闭包，是因为匿名函数往往是造成闭包的原因之一。\n\n#### 可怕的闭包\n无法进行的内存回收\n　　闭包是不是真的能够造成内存泄漏，我拿不准。但是它总是阻碍内存的释放。下面看一个例子：\n```\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2) {\n    var value1 = object1[propertyName];\n    var value2 = objects[propertyName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\n```\n　　这个函数的返回值是一个匿名函数，在该匿名函数中用到了外层函数的 propertyName 变量。想象一下，该匿名函数被返回后，在其他地方被调用了，它仍能够访问 propertyName 变量，这是因为它的作用域链中包含了 createComparisonFunction 函数的活动对象。本来 createComparisonFunction 执行完毕后，它的活动对象就应该销毁，却因为这里的引用而迟迟留在内存中。为了释放这部分内存，应该解除对匿名函数的引用。如下代码：\n```\nvar compareNames = createComparisonFunction('name');\ncompareNames({ name: 'Julia' }, { name: 'Zhuyali' });\ncompareNames = null;//解除引用\n```\n\n#### 可爱的闭包\n\n- 模仿块级作用域\n\n　　在 JS 这门神奇的语言里，是没有块级作用域的概念的。运行这段代码得到的结果是`前端`。\n```\nvar str1 = 'web';\nif(true) {\n    var str1 = '前端';\n};\nconsole.log(str1);\n```\n　　不过匿名函数可以用来模仿块级作用域。如下代码为例，得到的结果是`web`。\n```\nvar str1 = 'web';\n(function() {\n  var str1 = '前端';\n})();\nconsole.log(str1);\n```\n　　可以说，用闭包模拟块级作用域，实际上就是用函数作用域来替代块级作用域。\n\n- 私有变量\n\n　　严格来讲，JS 没有私有成员的概念，所有对象属性都是公有的。不过，倒是有一个私有变量的概念（其实翻来倒去还是因为作用域）。我们可以利用闭包的作用域链，来创建用于访问私有变量的公有方法。如下示例代码：\n```\nfunction MyObject() {\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  this.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  }\n}\n```\n　　分析上面的代码，在创建了 MyObject 的实例后，除了使用 publicMethod() 这一个途径外，没有任何办法可以直接访问私有变量 privateVariable 和私有方法 privateFunction()。\n\n### 好像不吓人\n　　讲道理，闭包的概念并不难理解，而且用途多而广泛，如果大开脑洞，也许还有更加神奇的效果哦~\n\n### 参考资料\n1. [从一个小题目谈谈 JS 函数闭包](http://chanchun.com.cn/2016/10/05/Closure/)\n2. [JavaScript系列----作用域链和闭包](https://www.cnblogs.com/renlong0602/p/4398883.html)","source":"_posts/吓唬人的闭包.md","raw":"---\ntitle: JavaScript高级程序回顾(三)——吓唬人的闭包\ndate: 2018-01-09 19:30:41\ntags:\n---\n\n### 碎碎念\n　　初学前端时，觉得闭包是个好难好难理解的概念啊。再加上本身闭包的重要性，以及各类看不懂的关于闭包的文章，更是打击了我的自信心。后来看了 JS 高程三中的相关章节，豁然开朗。下面，我尽量以最通俗的方式给大家讲一下神秘的闭包。\n\n### 执行环境和作用域\n　　要理解*闭包*，必须先对*执行环境*和*作用域*有一个概念。\n　　(代码的)*执行环境*，顾名思义，是指当前的代码处在怎样的环境中执行，类似于人类周边的环境有水、空气等等，代码的环境里有变量、函数等。(代码的)执行环境是代码能够真实感触到的变量和函数，它定义了代码有权访问的其他数据，环境中定义的所有变量和函数都保存在一个*变量对象*中。\n　　*全局执行环境*是最外围的一个执行环境。当我们在浏览器控制台时，总能访问到 window 对象；当我们在 node 终端时，总能访问到 global 对象。其实这两个对象都可以被认为是全局执行环境，因为所有的全局变量和函数都是作为它的属性和方法创建的。全局执行环境会一直持续到应用程序退出，例如关闭网页或者关闭 node 控制台。\n　　当代码在一个环境中执行时，会创建变量对象的一个*作用域链*。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。通过这句话，我觉得可以得到很多的信息。首先，作用域链，是将变量对象链起来的，变量对象用来存储执行环境中的变量和函数（这里我觉得也可以认为作用域链将执行环境链起来了）；再者，它保证了有序访问，那什么是有序访问呢？当然是先访问自己的变量对象，自己没有了就去上层变量对象找，直至将回溯到链条顶端，也就是全局执行环境。为了帮助理解，可以看下面的代码和图：\n```\nfunction A() {\n  var a = 1;\n  function B() {\n    var b = 2;\n  }\n}\n```\n![](https://wx4.sinaimg.cn/mw690/79b5b053ly1fnanavvykqj20gb089t9w.jpg)　　可以看图中我的标注。红色的箭头链条代表函数 B 内的作用域链，该链所经过之处的所有变量和函数，就是函数 B 内部可以访问到的，而该链的方向就代表的是上面提到的有序访问的访问方向。黄色的矩形代表一个一个的执行环境，将其认为作变量对象我觉得也可以。\n\n### 闭包\n　　在我还不清楚究竟什么是闭包的时候，别人问我闭包是什么，我就说“匿名函数”，可想而知，网络上有多少的流言蜚语是这样冤枉闭包的。闭包是指有权访问另一个函数作用域中的变量的函数，之所以很多人混用匿名函数和闭包，是因为匿名函数往往是造成闭包的原因之一。\n\n#### 可怕的闭包\n无法进行的内存回收\n　　闭包是不是真的能够造成内存泄漏，我拿不准。但是它总是阻碍内存的释放。下面看一个例子：\n```\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2) {\n    var value1 = object1[propertyName];\n    var value2 = objects[propertyName];\n    if (value1 < value2) {\n      return -1;\n    } else if (value1 > value2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n}\n```\n　　这个函数的返回值是一个匿名函数，在该匿名函数中用到了外层函数的 propertyName 变量。想象一下，该匿名函数被返回后，在其他地方被调用了，它仍能够访问 propertyName 变量，这是因为它的作用域链中包含了 createComparisonFunction 函数的活动对象。本来 createComparisonFunction 执行完毕后，它的活动对象就应该销毁，却因为这里的引用而迟迟留在内存中。为了释放这部分内存，应该解除对匿名函数的引用。如下代码：\n```\nvar compareNames = createComparisonFunction('name');\ncompareNames({ name: 'Julia' }, { name: 'Zhuyali' });\ncompareNames = null;//解除引用\n```\n\n#### 可爱的闭包\n\n- 模仿块级作用域\n\n　　在 JS 这门神奇的语言里，是没有块级作用域的概念的。运行这段代码得到的结果是`前端`。\n```\nvar str1 = 'web';\nif(true) {\n    var str1 = '前端';\n};\nconsole.log(str1);\n```\n　　不过匿名函数可以用来模仿块级作用域。如下代码为例，得到的结果是`web`。\n```\nvar str1 = 'web';\n(function() {\n  var str1 = '前端';\n})();\nconsole.log(str1);\n```\n　　可以说，用闭包模拟块级作用域，实际上就是用函数作用域来替代块级作用域。\n\n- 私有变量\n\n　　严格来讲，JS 没有私有成员的概念，所有对象属性都是公有的。不过，倒是有一个私有变量的概念（其实翻来倒去还是因为作用域）。我们可以利用闭包的作用域链，来创建用于访问私有变量的公有方法。如下示例代码：\n```\nfunction MyObject() {\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  this.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  }\n}\n```\n　　分析上面的代码，在创建了 MyObject 的实例后，除了使用 publicMethod() 这一个途径外，没有任何办法可以直接访问私有变量 privateVariable 和私有方法 privateFunction()。\n\n### 好像不吓人\n　　讲道理，闭包的概念并不难理解，而且用途多而广泛，如果大开脑洞，也许还有更加神奇的效果哦~\n\n### 参考资料\n1. [从一个小题目谈谈 JS 函数闭包](http://chanchun.com.cn/2016/10/05/Closure/)\n2. [JavaScript系列----作用域链和闭包](https://www.cnblogs.com/renlong0602/p/4398883.html)","slug":"吓唬人的闭包","published":1,"updated":"2018-01-15T07:48:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdj000dvxslc3xwozwb","content":"<h3 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h3><p>　　初学前端时，觉得闭包是个好难好难理解的概念啊。再加上本身闭包的重要性，以及各类看不懂的关于闭包的文章，更是打击了我的自信心。后来看了 JS 高程三中的相关章节，豁然开朗。下面，我尽量以最通俗的方式给大家讲一下神秘的闭包。</p>\n<h3 id=\"执行环境和作用域\"><a href=\"#执行环境和作用域\" class=\"headerlink\" title=\"执行环境和作用域\"></a>执行环境和作用域</h3><p>　　要理解<em>闭包</em>，必须先对<em>执行环境</em>和<em>作用域</em>有一个概念。<br>　　(代码的)<em>执行环境</em>，顾名思义，是指当前的代码处在怎样的环境中执行，类似于人类周边的环境有水、空气等等，代码的环境里有变量、函数等。(代码的)执行环境是代码能够真实感触到的变量和函数，它定义了代码有权访问的其他数据，环境中定义的所有变量和函数都保存在一个<em>变量对象</em>中。<br>　　<em>全局执行环境</em>是最外围的一个执行环境。当我们在浏览器控制台时，总能访问到 window 对象；当我们在 node 终端时，总能访问到 global 对象。其实这两个对象都可以被认为是全局执行环境，因为所有的全局变量和函数都是作为它的属性和方法创建的。全局执行环境会一直持续到应用程序退出，例如关闭网页或者关闭 node 控制台。<br>　　当代码在一个环境中执行时，会创建变量对象的一个<em>作用域链</em>。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。通过这句话，我觉得可以得到很多的信息。首先，作用域链，是将变量对象链起来的，变量对象用来存储执行环境中的变量和函数（这里我觉得也可以认为作用域链将执行环境链起来了）；再者，它保证了有序访问，那什么是有序访问呢？当然是先访问自己的变量对象，自己没有了就去上层变量对象找，直至将回溯到链条顶端，也就是全局执行环境。为了帮助理解，可以看下面的代码和图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A() &#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">  function B() &#123;</span><br><span class=\"line\">    var b = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/79b5b053ly1fnanavvykqj20gb089t9w.jpg\" alt=\"\">　　可以看图中我的标注。红色的箭头链条代表函数 B 内的作用域链，该链所经过之处的所有变量和函数，就是函数 B 内部可以访问到的，而该链的方向就代表的是上面提到的有序访问的访问方向。黄色的矩形代表一个一个的执行环境，将其认为作变量对象我觉得也可以。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>　　在我还不清楚究竟什么是闭包的时候，别人问我闭包是什么，我就说“匿名函数”，可想而知，网络上有多少的流言蜚语是这样冤枉闭包的。闭包是指有权访问另一个函数作用域中的变量的函数，之所以很多人混用匿名函数和闭包，是因为匿名函数往往是造成闭包的原因之一。</p>\n<h4 id=\"可怕的闭包\"><a href=\"#可怕的闭包\" class=\"headerlink\" title=\"可怕的闭包\"></a>可怕的闭包</h4><p>无法进行的内存回收<br>　　闭包是不是真的能够造成内存泄漏，我拿不准。但是它总是阻碍内存的释放。下面看一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createComparisonFunction(propertyName) &#123;</span><br><span class=\"line\">  return function(object1, object2) &#123;</span><br><span class=\"line\">    var value1 = object1[propertyName];</span><br><span class=\"line\">    var value2 = objects[propertyName];</span><br><span class=\"line\">    if (value1 &lt; value2) &#123;</span><br><span class=\"line\">      return -1;</span><br><span class=\"line\">    &#125; else if (value1 &gt; value2) &#123;</span><br><span class=\"line\">      return 1;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　这个函数的返回值是一个匿名函数，在该匿名函数中用到了外层函数的 propertyName 变量。想象一下，该匿名函数被返回后，在其他地方被调用了，它仍能够访问 propertyName 变量，这是因为它的作用域链中包含了 createComparisonFunction 函数的活动对象。本来 createComparisonFunction 执行完毕后，它的活动对象就应该销毁，却因为这里的引用而迟迟留在内存中。为了释放这部分内存，应该解除对匿名函数的引用。如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var compareNames = createComparisonFunction(&apos;name&apos;);</span><br><span class=\"line\">compareNames(&#123; name: &apos;Julia&apos; &#125;, &#123; name: &apos;Zhuyali&apos; &#125;);</span><br><span class=\"line\">compareNames = null;//解除引用</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"可爱的闭包\"><a href=\"#可爱的闭包\" class=\"headerlink\" title=\"可爱的闭包\"></a>可爱的闭包</h4><ul>\n<li>模仿块级作用域</li>\n</ul>\n<p>　　在 JS 这门神奇的语言里，是没有块级作用域的概念的。运行这段代码得到的结果是<code>前端</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str1 = &apos;web&apos;;</span><br><span class=\"line\">if(true) &#123;</span><br><span class=\"line\">    var str1 = &apos;前端&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(str1);</span><br></pre></td></tr></table></figure></p>\n<p>　　不过匿名函数可以用来模仿块级作用域。如下代码为例，得到的结果是<code>web</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str1 = &apos;web&apos;;</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">  var str1 = &apos;前端&apos;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">console.log(str1);</span><br></pre></td></tr></table></figure></p>\n<p>　　可以说，用闭包模拟块级作用域，实际上就是用函数作用域来替代块级作用域。</p>\n<ul>\n<li>私有变量</li>\n</ul>\n<p>　　严格来讲，JS 没有私有成员的概念，所有对象属性都是公有的。不过，倒是有一个私有变量的概念（其实翻来倒去还是因为作用域）。我们可以利用闭包的作用域链，来创建用于访问私有变量的公有方法。如下示例代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MyObject() &#123;</span><br><span class=\"line\">  var privateVariable = 10;</span><br><span class=\"line\">  function privateFunction() &#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.publicMethod = function() &#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    return privateFunction();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　分析上面的代码，在创建了 MyObject 的实例后，除了使用 publicMethod() 这一个途径外，没有任何办法可以直接访问私有变量 privateVariable 和私有方法 privateFunction()。</p>\n<h3 id=\"好像不吓人\"><a href=\"#好像不吓人\" class=\"headerlink\" title=\"好像不吓人\"></a>好像不吓人</h3><p>　　讲道理，闭包的概念并不难理解，而且用途多而广泛，如果大开脑洞，也许还有更加神奇的效果哦~</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"http://chanchun.com.cn/2016/10/05/Closure/\" target=\"_blank\" rel=\"external\">从一个小题目谈谈 JS 函数闭包</a></li>\n<li><a href=\"https://www.cnblogs.com/renlong0602/p/4398883.html\" target=\"_blank\" rel=\"external\">JavaScript系列—-作用域链和闭包</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h3><p>　　初学前端时，觉得闭包是个好难好难理解的概念啊。再加上本身闭包的重要性，以及各类看不懂的关于闭包的文章，更是打击了我的自信心。后来看了 JS 高程三中的相关章节，豁然开朗。下面，我尽量以最通俗的方式给大家讲一下神秘的闭包。</p>\n<h3 id=\"执行环境和作用域\"><a href=\"#执行环境和作用域\" class=\"headerlink\" title=\"执行环境和作用域\"></a>执行环境和作用域</h3><p>　　要理解<em>闭包</em>，必须先对<em>执行环境</em>和<em>作用域</em>有一个概念。<br>　　(代码的)<em>执行环境</em>，顾名思义，是指当前的代码处在怎样的环境中执行，类似于人类周边的环境有水、空气等等，代码的环境里有变量、函数等。(代码的)执行环境是代码能够真实感触到的变量和函数，它定义了代码有权访问的其他数据，环境中定义的所有变量和函数都保存在一个<em>变量对象</em>中。<br>　　<em>全局执行环境</em>是最外围的一个执行环境。当我们在浏览器控制台时，总能访问到 window 对象；当我们在 node 终端时，总能访问到 global 对象。其实这两个对象都可以被认为是全局执行环境，因为所有的全局变量和函数都是作为它的属性和方法创建的。全局执行环境会一直持续到应用程序退出，例如关闭网页或者关闭 node 控制台。<br>　　当代码在一个环境中执行时，会创建变量对象的一个<em>作用域链</em>。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。通过这句话，我觉得可以得到很多的信息。首先，作用域链，是将变量对象链起来的，变量对象用来存储执行环境中的变量和函数（这里我觉得也可以认为作用域链将执行环境链起来了）；再者，它保证了有序访问，那什么是有序访问呢？当然是先访问自己的变量对象，自己没有了就去上层变量对象找，直至将回溯到链条顶端，也就是全局执行环境。为了帮助理解，可以看下面的代码和图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A() &#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">  function B() &#123;</span><br><span class=\"line\">    var b = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/79b5b053ly1fnanavvykqj20gb089t9w.jpg\" alt=\"\">　　可以看图中我的标注。红色的箭头链条代表函数 B 内的作用域链，该链所经过之处的所有变量和函数，就是函数 B 内部可以访问到的，而该链的方向就代表的是上面提到的有序访问的访问方向。黄色的矩形代表一个一个的执行环境，将其认为作变量对象我觉得也可以。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>　　在我还不清楚究竟什么是闭包的时候，别人问我闭包是什么，我就说“匿名函数”，可想而知，网络上有多少的流言蜚语是这样冤枉闭包的。闭包是指有权访问另一个函数作用域中的变量的函数，之所以很多人混用匿名函数和闭包，是因为匿名函数往往是造成闭包的原因之一。</p>\n<h4 id=\"可怕的闭包\"><a href=\"#可怕的闭包\" class=\"headerlink\" title=\"可怕的闭包\"></a>可怕的闭包</h4><p>无法进行的内存回收<br>　　闭包是不是真的能够造成内存泄漏，我拿不准。但是它总是阻碍内存的释放。下面看一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createComparisonFunction(propertyName) &#123;</span><br><span class=\"line\">  return function(object1, object2) &#123;</span><br><span class=\"line\">    var value1 = object1[propertyName];</span><br><span class=\"line\">    var value2 = objects[propertyName];</span><br><span class=\"line\">    if (value1 &lt; value2) &#123;</span><br><span class=\"line\">      return -1;</span><br><span class=\"line\">    &#125; else if (value1 &gt; value2) &#123;</span><br><span class=\"line\">      return 1;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　这个函数的返回值是一个匿名函数，在该匿名函数中用到了外层函数的 propertyName 变量。想象一下，该匿名函数被返回后，在其他地方被调用了，它仍能够访问 propertyName 变量，这是因为它的作用域链中包含了 createComparisonFunction 函数的活动对象。本来 createComparisonFunction 执行完毕后，它的活动对象就应该销毁，却因为这里的引用而迟迟留在内存中。为了释放这部分内存，应该解除对匿名函数的引用。如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var compareNames = createComparisonFunction(&apos;name&apos;);</span><br><span class=\"line\">compareNames(&#123; name: &apos;Julia&apos; &#125;, &#123; name: &apos;Zhuyali&apos; &#125;);</span><br><span class=\"line\">compareNames = null;//解除引用</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"可爱的闭包\"><a href=\"#可爱的闭包\" class=\"headerlink\" title=\"可爱的闭包\"></a>可爱的闭包</h4><ul>\n<li>模仿块级作用域</li>\n</ul>\n<p>　　在 JS 这门神奇的语言里，是没有块级作用域的概念的。运行这段代码得到的结果是<code>前端</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str1 = &apos;web&apos;;</span><br><span class=\"line\">if(true) &#123;</span><br><span class=\"line\">    var str1 = &apos;前端&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(str1);</span><br></pre></td></tr></table></figure></p>\n<p>　　不过匿名函数可以用来模仿块级作用域。如下代码为例，得到的结果是<code>web</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str1 = &apos;web&apos;;</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">  var str1 = &apos;前端&apos;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">console.log(str1);</span><br></pre></td></tr></table></figure></p>\n<p>　　可以说，用闭包模拟块级作用域，实际上就是用函数作用域来替代块级作用域。</p>\n<ul>\n<li>私有变量</li>\n</ul>\n<p>　　严格来讲，JS 没有私有成员的概念，所有对象属性都是公有的。不过，倒是有一个私有变量的概念（其实翻来倒去还是因为作用域）。我们可以利用闭包的作用域链，来创建用于访问私有变量的公有方法。如下示例代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MyObject() &#123;</span><br><span class=\"line\">  var privateVariable = 10;</span><br><span class=\"line\">  function privateFunction() &#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.publicMethod = function() &#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    return privateFunction();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　分析上面的代码，在创建了 MyObject 的实例后，除了使用 publicMethod() 这一个途径外，没有任何办法可以直接访问私有变量 privateVariable 和私有方法 privateFunction()。</p>\n<h3 id=\"好像不吓人\"><a href=\"#好像不吓人\" class=\"headerlink\" title=\"好像不吓人\"></a>好像不吓人</h3><p>　　讲道理，闭包的概念并不难理解，而且用途多而广泛，如果大开脑洞，也许还有更加神奇的效果哦~</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"http://chanchun.com.cn/2016/10/05/Closure/\" target=\"_blank\" rel=\"external\">从一个小题目谈谈 JS 函数闭包</a></li>\n<li><a href=\"https://www.cnblogs.com/renlong0602/p/4398883.html\" target=\"_blank\" rel=\"external\">JavaScript系列—-作用域链和闭包</a></li>\n</ol>\n"},{"title":"JavaScript高级程序回顾(四)——飘忽不定的 this?","date":"2018-01-11T09:43:15.000Z","_content":"　　this 可谓是一个很让人头疼的问题了。以我的经验来看，我刚学完 this 的时候，看待 this 好像是看待自己亲儿子；一天以后，差不多就是干儿子了；再过一天，可能是充话费送的；然后，可能就是陌生人了...虽然这么说有点夸张，但是 this 确实是需要反复学习和琢磨的。这篇文章在我头脑比较清晰的时候记录下来，以备以后的不时之需。\n\n### 进入正题\n　　this 是在函数被调用时才发生绑定的，它指向什么完全取决于函数在哪里被调用。这里需要先明确两个概念：调用位置和调用栈，看完以下的代码后，你会了然于心。\n```\nfunction baz() {\n  // 当前调用栈为 baz\n  console.log('baz');\n  bar(); // 函数 bar 的调用位置\n}\nfuncion bar() {\n  // 当前调用栈为 baz -> bar\n  console.log('bar');\n  foo(); // 函数 foo 的调用位置\n}\nfunction foo() {\n  // 当前调用栈为 baz -> bar -> foo\n  console.log('foo');\n}\nbaz(); // 函数 baz 的调用位置\n```\n\n### this 的绑定规则\n　　接下来，我们正式开启寻秘 this 的旅程。开始之前，我觉得有必要提醒一下读者，时刻谨记“this 的指向完全取决于函数在哪里被调用”这句话，把这个思想贯穿到对 this 的思考中，可能你很快就能得到答案。\n\n#### 默认绑定\n　　思考如下代码：\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar a = 2;\nfoo(); // 输出 2\n```\n　　毫不意外，这种模式的 this 是非常普遍的。可以看出，foo 的调用位置在全局环境中，并且它不带任何修饰，所以 this 指向了全局对象，this.a 访问的自然是全局环境中的 a 了。\n\n#### 隐式绑定\n　　思考如下代码：\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar obj = {\n  a: 2,\n  foo: foo\n};\nobj.foo(); // 输出 2\n```\n　　上面的代码可以稍作分析。在 obj 中定义了属性 foo，它指向了全局函数 foo 的引用；然后在全局环境中，obj 调用了自己的 foo 函数，可以说最终调用时 foo 函数的落脚点是 obj 对象。此时 foo 函数中的 this 上下文是 obj 对象。\n\n#### 显式绑定\n　　思考如下代码：\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar obj = {\n  a:2\n};\nfoo.call(obj); // 输出 2\n```\n　　通过 foo.call(...)，我们可以在调用 foo 时强制把它内部的 this 绑定到 obj 上，apply 函数也可以达到相同的效果。这是基础 API，详情可以参考 [Function.prototype.apply()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) 和 [Function.prototype.call()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)。\n\n#### new 绑定\n　　思考如下代码：\n```\nfunction foo(a) {\n  this.a = a;\n}\nvar bar = new foo(2);\nconsole.log(bar.a); // 输出 2\n```\n　　这种绑定形式也十分常见，具体细节可以参考我的另一篇文章[面向对象的 JS](https://zhuyali.github.io/2018/01/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JS/)\n\n#### 小结\n　　以上四种 this 的绑定规则我们都已经有所了解，接下来你所要做的就是找到函数的调用位置并判断应该应用哪条规则。但是，如果某个调用位置可以同时应用很多条规则怎么办？答案是优先级！四种规则的优先级如下：默认绑定 < 隐式绑定 < 显式绑定 < new 绑定。\n\n### 一个栗子\n　　以下是我在刷知乎的时候，看到的一道题目。这道题目很好地展示了一种现象：“绑定丢失”。先贴代码：\n```\nvar foo = function(){\n  this.myName = 'Foo function.';\n}\nfoo.prototype.sayHello = function(){\n  alert(this.myName);\n}\nfoo.prototype.bar = function(){\n  setTimeout(this.sayHello, 1000);\n}\nvar f = new foo();\nf.bar(); // undefined\n```\n　　为什么答案是 `undefined` 而不是 `Foo function.` 呢？这里我们就来分析一下。首先，从调用位置来看，bar 函数的调用位置是在 f 上，所以 bar 函数内部的 this 应该指向 f。你可以验证一下，在 bar 中输出 this 试试。然后进入 bar 函数之后，内部执行了 `setTimeout(this.sayHello, 1000)`，setTimeout 函数传入了两个参数，第一个参数是 this.sayHello，这里的 this 仍然指向 f，原因是这时候只是传参数而已，还没有涉及到任何的调用逻辑。然后，调用了 this.sayHello 之后，神奇的事情发生了，undefined 的结果说明 this 的指向变了，可是到底在哪里发生了变化呢？我们先揭露一下 setTimeout 的本质：\n```\nfunction setTimeout(fn, delay) {\n  // 等待 delay 毫秒\n  fn();\n}\n```\n　　接下来分析函数的调用栈，进入 sayHello 函数以后，函数的调用栈为 bar -> setTimeout -> sayHello。诶，中间多了一个 setTimeout，我想这就是问题的关键所在了。sayHello 函数调用时，它处在 setTimeout 函数中，而 setTimeout 是全局对象的函数，所以这时候的 this 指向全局对象，全局对象上没有定义 myName，所以得到 undefined 的结果。要不，你试试全局定义一个 myName，看看会发生什么吧！\n\n### 留下思考\n　　最后留下一个简单的思考题，看看你能不能迅速 GET 到答案吧！\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar obj = {\n  a: 2,\n  foo: foo\n};\nvar bar = obj.foo;\nvar a = 'oops, global';\nbar();\n```","source":"_posts/飘忽不定的-this.md","raw":"---\ntitle: JavaScript高级程序回顾(四)——飘忽不定的 this?\ndate: 2018-01-11 17:43:15\ntags:\n---\n　　this 可谓是一个很让人头疼的问题了。以我的经验来看，我刚学完 this 的时候，看待 this 好像是看待自己亲儿子；一天以后，差不多就是干儿子了；再过一天，可能是充话费送的；然后，可能就是陌生人了...虽然这么说有点夸张，但是 this 确实是需要反复学习和琢磨的。这篇文章在我头脑比较清晰的时候记录下来，以备以后的不时之需。\n\n### 进入正题\n　　this 是在函数被调用时才发生绑定的，它指向什么完全取决于函数在哪里被调用。这里需要先明确两个概念：调用位置和调用栈，看完以下的代码后，你会了然于心。\n```\nfunction baz() {\n  // 当前调用栈为 baz\n  console.log('baz');\n  bar(); // 函数 bar 的调用位置\n}\nfuncion bar() {\n  // 当前调用栈为 baz -> bar\n  console.log('bar');\n  foo(); // 函数 foo 的调用位置\n}\nfunction foo() {\n  // 当前调用栈为 baz -> bar -> foo\n  console.log('foo');\n}\nbaz(); // 函数 baz 的调用位置\n```\n\n### this 的绑定规则\n　　接下来，我们正式开启寻秘 this 的旅程。开始之前，我觉得有必要提醒一下读者，时刻谨记“this 的指向完全取决于函数在哪里被调用”这句话，把这个思想贯穿到对 this 的思考中，可能你很快就能得到答案。\n\n#### 默认绑定\n　　思考如下代码：\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar a = 2;\nfoo(); // 输出 2\n```\n　　毫不意外，这种模式的 this 是非常普遍的。可以看出，foo 的调用位置在全局环境中，并且它不带任何修饰，所以 this 指向了全局对象，this.a 访问的自然是全局环境中的 a 了。\n\n#### 隐式绑定\n　　思考如下代码：\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar obj = {\n  a: 2,\n  foo: foo\n};\nobj.foo(); // 输出 2\n```\n　　上面的代码可以稍作分析。在 obj 中定义了属性 foo，它指向了全局函数 foo 的引用；然后在全局环境中，obj 调用了自己的 foo 函数，可以说最终调用时 foo 函数的落脚点是 obj 对象。此时 foo 函数中的 this 上下文是 obj 对象。\n\n#### 显式绑定\n　　思考如下代码：\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar obj = {\n  a:2\n};\nfoo.call(obj); // 输出 2\n```\n　　通过 foo.call(...)，我们可以在调用 foo 时强制把它内部的 this 绑定到 obj 上，apply 函数也可以达到相同的效果。这是基础 API，详情可以参考 [Function.prototype.apply()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) 和 [Function.prototype.call()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)。\n\n#### new 绑定\n　　思考如下代码：\n```\nfunction foo(a) {\n  this.a = a;\n}\nvar bar = new foo(2);\nconsole.log(bar.a); // 输出 2\n```\n　　这种绑定形式也十分常见，具体细节可以参考我的另一篇文章[面向对象的 JS](https://zhuyali.github.io/2018/01/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JS/)\n\n#### 小结\n　　以上四种 this 的绑定规则我们都已经有所了解，接下来你所要做的就是找到函数的调用位置并判断应该应用哪条规则。但是，如果某个调用位置可以同时应用很多条规则怎么办？答案是优先级！四种规则的优先级如下：默认绑定 < 隐式绑定 < 显式绑定 < new 绑定。\n\n### 一个栗子\n　　以下是我在刷知乎的时候，看到的一道题目。这道题目很好地展示了一种现象：“绑定丢失”。先贴代码：\n```\nvar foo = function(){\n  this.myName = 'Foo function.';\n}\nfoo.prototype.sayHello = function(){\n  alert(this.myName);\n}\nfoo.prototype.bar = function(){\n  setTimeout(this.sayHello, 1000);\n}\nvar f = new foo();\nf.bar(); // undefined\n```\n　　为什么答案是 `undefined` 而不是 `Foo function.` 呢？这里我们就来分析一下。首先，从调用位置来看，bar 函数的调用位置是在 f 上，所以 bar 函数内部的 this 应该指向 f。你可以验证一下，在 bar 中输出 this 试试。然后进入 bar 函数之后，内部执行了 `setTimeout(this.sayHello, 1000)`，setTimeout 函数传入了两个参数，第一个参数是 this.sayHello，这里的 this 仍然指向 f，原因是这时候只是传参数而已，还没有涉及到任何的调用逻辑。然后，调用了 this.sayHello 之后，神奇的事情发生了，undefined 的结果说明 this 的指向变了，可是到底在哪里发生了变化呢？我们先揭露一下 setTimeout 的本质：\n```\nfunction setTimeout(fn, delay) {\n  // 等待 delay 毫秒\n  fn();\n}\n```\n　　接下来分析函数的调用栈，进入 sayHello 函数以后，函数的调用栈为 bar -> setTimeout -> sayHello。诶，中间多了一个 setTimeout，我想这就是问题的关键所在了。sayHello 函数调用时，它处在 setTimeout 函数中，而 setTimeout 是全局对象的函数，所以这时候的 this 指向全局对象，全局对象上没有定义 myName，所以得到 undefined 的结果。要不，你试试全局定义一个 myName，看看会发生什么吧！\n\n### 留下思考\n　　最后留下一个简单的思考题，看看你能不能迅速 GET 到答案吧！\n```\nfunction foo() {\n  console.log(this.a);\n}\nvar obj = {\n  a: 2,\n  foo: foo\n};\nvar bar = obj.foo;\nvar a = 'oops, global';\nbar();\n```","slug":"飘忽不定的-this","published":1,"updated":"2018-01-12T09:28:46.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdl000evxslmvnj5h42","content":"<p>　　this 可谓是一个很让人头疼的问题了。以我的经验来看，我刚学完 this 的时候，看待 this 好像是看待自己亲儿子；一天以后，差不多就是干儿子了；再过一天，可能是充话费送的；然后，可能就是陌生人了…虽然这么说有点夸张，但是 this 确实是需要反复学习和琢磨的。这篇文章在我头脑比较清晰的时候记录下来，以备以后的不时之需。</p>\n<h3 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h3><p>　　this 是在函数被调用时才发生绑定的，它指向什么完全取决于函数在哪里被调用。这里需要先明确两个概念：调用位置和调用栈，看完以下的代码后，你会了然于心。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function baz() &#123;</span><br><span class=\"line\">  // 当前调用栈为 baz</span><br><span class=\"line\">  console.log(&apos;baz&apos;);</span><br><span class=\"line\">  bar(); // 函数 bar 的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcion bar() &#123;</span><br><span class=\"line\">  // 当前调用栈为 baz -&gt; bar</span><br><span class=\"line\">  console.log(&apos;bar&apos;);</span><br><span class=\"line\">  foo(); // 函数 foo 的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  // 当前调用栈为 baz -&gt; bar -&gt; foo</span><br><span class=\"line\">  console.log(&apos;foo&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">baz(); // 函数 baz 的调用位置</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"this-的绑定规则\"><a href=\"#this-的绑定规则\" class=\"headerlink\" title=\"this 的绑定规则\"></a>this 的绑定规则</h3><p>　　接下来，我们正式开启寻秘 this 的旅程。开始之前，我觉得有必要提醒一下读者，时刻谨记“this 的指向完全取决于函数在哪里被调用”这句话，把这个思想贯穿到对 this 的思考中，可能你很快就能得到答案。</p>\n<h4 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo(); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　毫不意外，这种模式的 this 是非常普遍的。可以看出，foo 的调用位置在全局环境中，并且它不带任何修饰，所以 this 指向了全局对象，this.a 访问的自然是全局环境中的 a 了。</p>\n<h4 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo(); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　上面的代码可以稍作分析。在 obj 中定义了属性 foo，它指向了全局函数 foo 的引用；然后在全局环境中，obj 调用了自己的 foo 函数，可以说最终调用时 foo 函数的落脚点是 obj 对象。此时 foo 函数中的 this 上下文是 obj 对象。</p>\n<h4 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a:2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call(obj); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　通过 foo.call(…)，我们可以在调用 foo 时强制把它内部的 this 绑定到 obj 上，apply 函数也可以达到相同的效果。这是基础 API，详情可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\">Function.prototype.apply()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"external\">Function.prototype.call()</a>。</p>\n<h4 id=\"new-绑定\"><a href=\"#new-绑定\" class=\"headerlink\" title=\"new 绑定\"></a>new 绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a) &#123;</span><br><span class=\"line\">  this.a = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = new foo(2);</span><br><span class=\"line\">console.log(bar.a); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　这种绑定形式也十分常见，具体细节可以参考我的另一篇文章<a href=\"https://zhuyali.github.io/2018/01/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JS/\" target=\"_blank\" rel=\"external\">面向对象的 JS</a></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>　　以上四种 this 的绑定规则我们都已经有所了解，接下来你所要做的就是找到函数的调用位置并判断应该应用哪条规则。但是，如果某个调用位置可以同时应用很多条规则怎么办？答案是优先级！四种规则的优先级如下：默认绑定 &lt; 隐式绑定 &lt; 显式绑定 &lt; new 绑定。</p>\n<h3 id=\"一个栗子\"><a href=\"#一个栗子\" class=\"headerlink\" title=\"一个栗子\"></a>一个栗子</h3><p>　　以下是我在刷知乎的时候，看到的一道题目。这道题目很好地展示了一种现象：“绑定丢失”。先贴代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = function()&#123;</span><br><span class=\"line\">  this.myName = &apos;Foo function.&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.prototype.sayHello = function()&#123;</span><br><span class=\"line\">  alert(this.myName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.prototype.bar = function()&#123;</span><br><span class=\"line\">  setTimeout(this.sayHello, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f = new foo();</span><br><span class=\"line\">f.bar(); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>　　为什么答案是 <code>undefined</code> 而不是 <code>Foo function.</code> 呢？这里我们就来分析一下。首先，从调用位置来看，bar 函数的调用位置是在 f 上，所以 bar 函数内部的 this 应该指向 f。你可以验证一下，在 bar 中输出 this 试试。然后进入 bar 函数之后，内部执行了 <code>setTimeout(this.sayHello, 1000)</code>，setTimeout 函数传入了两个参数，第一个参数是 this.sayHello，这里的 this 仍然指向 f，原因是这时候只是传参数而已，还没有涉及到任何的调用逻辑。然后，调用了 this.sayHello 之后，神奇的事情发生了，undefined 的结果说明 this 的指向变了，可是到底在哪里发生了变化呢？我们先揭露一下 setTimeout 的本质：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setTimeout(fn, delay) &#123;</span><br><span class=\"line\">  // 等待 delay 毫秒</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　接下来分析函数的调用栈，进入 sayHello 函数以后，函数的调用栈为 bar -&gt; setTimeout -&gt; sayHello。诶，中间多了一个 setTimeout，我想这就是问题的关键所在了。sayHello 函数调用时，它处在 setTimeout 函数中，而 setTimeout 是全局对象的函数，所以这时候的 this 指向全局对象，全局对象上没有定义 myName，所以得到 undefined 的结果。要不，你试试全局定义一个 myName，看看会发生什么吧！</p>\n<h3 id=\"留下思考\"><a href=\"#留下思考\" class=\"headerlink\" title=\"留下思考\"></a>留下思考</h3><p>　　最后留下一个简单的思考题，看看你能不能迅速 GET 到答案吧！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var bar = obj.foo;</span><br><span class=\"line\">var a = &apos;oops, global&apos;;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　this 可谓是一个很让人头疼的问题了。以我的经验来看，我刚学完 this 的时候，看待 this 好像是看待自己亲儿子；一天以后，差不多就是干儿子了；再过一天，可能是充话费送的；然后，可能就是陌生人了…虽然这么说有点夸张，但是 this 确实是需要反复学习和琢磨的。这篇文章在我头脑比较清晰的时候记录下来，以备以后的不时之需。</p>\n<h3 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h3><p>　　this 是在函数被调用时才发生绑定的，它指向什么完全取决于函数在哪里被调用。这里需要先明确两个概念：调用位置和调用栈，看完以下的代码后，你会了然于心。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function baz() &#123;</span><br><span class=\"line\">  // 当前调用栈为 baz</span><br><span class=\"line\">  console.log(&apos;baz&apos;);</span><br><span class=\"line\">  bar(); // 函数 bar 的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcion bar() &#123;</span><br><span class=\"line\">  // 当前调用栈为 baz -&gt; bar</span><br><span class=\"line\">  console.log(&apos;bar&apos;);</span><br><span class=\"line\">  foo(); // 函数 foo 的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  // 当前调用栈为 baz -&gt; bar -&gt; foo</span><br><span class=\"line\">  console.log(&apos;foo&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">baz(); // 函数 baz 的调用位置</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"this-的绑定规则\"><a href=\"#this-的绑定规则\" class=\"headerlink\" title=\"this 的绑定规则\"></a>this 的绑定规则</h3><p>　　接下来，我们正式开启寻秘 this 的旅程。开始之前，我觉得有必要提醒一下读者，时刻谨记“this 的指向完全取决于函数在哪里被调用”这句话，把这个思想贯穿到对 this 的思考中，可能你很快就能得到答案。</p>\n<h4 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo(); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　毫不意外，这种模式的 this 是非常普遍的。可以看出，foo 的调用位置在全局环境中，并且它不带任何修饰，所以 this 指向了全局对象，this.a 访问的自然是全局环境中的 a 了。</p>\n<h4 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo(); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　上面的代码可以稍作分析。在 obj 中定义了属性 foo，它指向了全局函数 foo 的引用；然后在全局环境中，obj 调用了自己的 foo 函数，可以说最终调用时 foo 函数的落脚点是 obj 对象。此时 foo 函数中的 this 上下文是 obj 对象。</p>\n<h4 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a:2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call(obj); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　通过 foo.call(…)，我们可以在调用 foo 时强制把它内部的 this 绑定到 obj 上，apply 函数也可以达到相同的效果。这是基础 API，详情可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\">Function.prototype.apply()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"external\">Function.prototype.call()</a>。</p>\n<h4 id=\"new-绑定\"><a href=\"#new-绑定\" class=\"headerlink\" title=\"new 绑定\"></a>new 绑定</h4><p>　　思考如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a) &#123;</span><br><span class=\"line\">  this.a = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = new foo(2);</span><br><span class=\"line\">console.log(bar.a); // 输出 2</span><br></pre></td></tr></table></figure></p>\n<p>　　这种绑定形式也十分常见，具体细节可以参考我的另一篇文章<a href=\"https://zhuyali.github.io/2018/01/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JS/\" target=\"_blank\" rel=\"external\">面向对象的 JS</a></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>　　以上四种 this 的绑定规则我们都已经有所了解，接下来你所要做的就是找到函数的调用位置并判断应该应用哪条规则。但是，如果某个调用位置可以同时应用很多条规则怎么办？答案是优先级！四种规则的优先级如下：默认绑定 &lt; 隐式绑定 &lt; 显式绑定 &lt; new 绑定。</p>\n<h3 id=\"一个栗子\"><a href=\"#一个栗子\" class=\"headerlink\" title=\"一个栗子\"></a>一个栗子</h3><p>　　以下是我在刷知乎的时候，看到的一道题目。这道题目很好地展示了一种现象：“绑定丢失”。先贴代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = function()&#123;</span><br><span class=\"line\">  this.myName = &apos;Foo function.&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.prototype.sayHello = function()&#123;</span><br><span class=\"line\">  alert(this.myName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.prototype.bar = function()&#123;</span><br><span class=\"line\">  setTimeout(this.sayHello, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f = new foo();</span><br><span class=\"line\">f.bar(); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>　　为什么答案是 <code>undefined</code> 而不是 <code>Foo function.</code> 呢？这里我们就来分析一下。首先，从调用位置来看，bar 函数的调用位置是在 f 上，所以 bar 函数内部的 this 应该指向 f。你可以验证一下，在 bar 中输出 this 试试。然后进入 bar 函数之后，内部执行了 <code>setTimeout(this.sayHello, 1000)</code>，setTimeout 函数传入了两个参数，第一个参数是 this.sayHello，这里的 this 仍然指向 f，原因是这时候只是传参数而已，还没有涉及到任何的调用逻辑。然后，调用了 this.sayHello 之后，神奇的事情发生了，undefined 的结果说明 this 的指向变了，可是到底在哪里发生了变化呢？我们先揭露一下 setTimeout 的本质：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setTimeout(fn, delay) &#123;</span><br><span class=\"line\">  // 等待 delay 毫秒</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　接下来分析函数的调用栈，进入 sayHello 函数以后，函数的调用栈为 bar -&gt; setTimeout -&gt; sayHello。诶，中间多了一个 setTimeout，我想这就是问题的关键所在了。sayHello 函数调用时，它处在 setTimeout 函数中，而 setTimeout 是全局对象的函数，所以这时候的 this 指向全局对象，全局对象上没有定义 myName，所以得到 undefined 的结果。要不，你试试全局定义一个 myName，看看会发生什么吧！</p>\n<h3 id=\"留下思考\"><a href=\"#留下思考\" class=\"headerlink\" title=\"留下思考\"></a>留下思考</h3><p>　　最后留下一个简单的思考题，看看你能不能迅速 GET 到答案吧！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var bar = obj.foo;</span><br><span class=\"line\">var a = &apos;oops, global&apos;;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n"},{"title":"JavaScript高级程序回顾(五)——面向对象的JS","date":"2018-01-12T10:03:24.000Z","_content":"\n### 对象的构造\n\n#### 字面量方式\n　　使用对象字面量形式是一种常见的构造对象的方式，不再多说。如下：\n```\nvar person = {\n  name: 'Julia',\n  age: 23,\n  address: {\n    prov: 'Zhejiang',\n    city: 'hangzhou'\n  },\n  'test attr': 1, //当属性名不是有效标识符时，需要给属性名加上''\n  sayHi: function(name) {\n    console.log(`Hi, ${name}, I'm ${this.name}`);\n  }\n};\n```\n\n#### 构造器方式\n　　类似于 Java 中使用构造器进行对象构造的形式，JS 中也可以用构造器的方式来构造对象。如下：\n```\nfunction Person(name, age, address, test) {\n  this.name = name;\n  this.age = age;\n  this.address = address;\n  this['test attr'] = test;\n}\nPerson.prototype.sayHi = function(name) {\n  console.log(`Hi ${name}, I'm ${this.name}`);\n}\nvar person = new Person('Julia', 23, { prov: 'Zhejiang', city: 'hangzhou' }, 1);\n```\n　　这是常用的一种构造对象的方式，它组合了构造器的方式和原型的方式。构造器主要用于构造对象自身有的属性，比如本例中的姓名、年龄等；原型方式主要用于构造对象之间公有的特征，比如 sayHi 方法。最后，通过 new 操作符构造出了 Person，以这种方式调用构造函数实际会经历如下四个步骤：\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象(因此 this 就指向了这个新对象)\n3. 执行构造函数中的代码(为这个新对象添加属性)\n4. 返回新对象\n\n#### Object.create 方法\n　　使用这种方法可以为你要创建的对象指定其原型，而不用定义一个构造函数。如下：\n```\nvar person = {\n  name: 'Julia',\n  age: 23,\n  address: {\n    prov: 'Zhejiang',\n    city: 'hangzhou'\n  },\n  'test attr': 1, //当属性名不是有效标识符时，需要给属性名加上''\n  sayHi: function(name) {\n    console.log(`Hi, ${name}, I'm ${this.name}`);\n  }\n};\nvar person1 = Object.create(person);\n```\n　　以上代码构造了一个 person1 对象，它是以 person 对象作为其原型的。换言之，如果我使用 Object.create(person) 构造了 person2，person3...很多个对象，它们都会拥有 person 对象上的所有属性和方法。\n\n### 原型与原型属性\n　　原型指的是 prototype，原型属性指的是 \\__proto\\__。偶然看到过的一句话，我觉得可以深刻地解释它们分别是什么：prototype 代表胚胎，\\__proto\\__ 代表父亲。这句话很值得挖掘。先说 prototype，它代表的是胚胎，意味着它是可以用来产生新的对象的，可以不基于已有对象，并且用来产生新对象的方法是通过使用函数，所以 prototype 属性是函数才有的(这是个人看法，这样理解会变得十分简单)。而所有的对象都有父亲，所以每个对象都有 \\__proto\\__ 属性。为了更清楚的理解这两个属性，这里结合以上三种构造对象的方式来进行解释。\n\n#### 字面量方式\n```\nvar a = {};\n```\n![](//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7cpj5j20el06rjrz.jpg)\n\n#### 构造器方式\n```\nvar A = function() {};\nvar a = new A();\n```\n![](//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7505lj20ef06xgm4.jpg)\n\n#### Object.create 方法\n```\nvar a1 = {};\nvar a2 = Object.create(a1);\n```\n![](//wx3.sinaimg.cn/mw690/79b5b053gy1fne3p7bzh9j20eq06v3yw.jpg)\n\n### 原型链\n　　原型链是 JS 中实现继承的主要方式。原型链这个词中的原型二字，指的实际上是 \\__proto\\__ 属性而非 prototype 属性。可以这么理解，JS 中万物皆对象，而 \\__proto\\__ 是所有对象都有的属性，prototype 只是函数才有的属性，所以 prototype 是无法形成链条的，而 \\__proto\\__ 是可以做到的。下面一张图，可以清楚地展示出原型链。\n```\nvar A = function() {};\nvar a = new A();\n```\n![](https://wx2.sinaimg.cn/mw690/79b5b053gy1fne3v9tn5sj20la053q3p.jpg)\n　　从这张图我们可以看出一条由 \\__proto\\__ 链起来的链条，这就是原型链。在 JS 中，Object 是所有对象的基类，这一点我们也可以从图中观察到，null 总是位于原型链的顶端，Object 仅次于 null。当 JS 引擎查找属性时，会先查找对象本身是否存在该属性，如果不存在，会在原型链上查找，直至回溯到原型链的顶端。\n\n### 参考资料\n[三张图搞懂JavaScript的原型对象与原型链](http://www.cnblogs.com/shuiyi/p/5305435.html)\n","source":"_posts/面向对象的JS.md","raw":"---\ntitle: JavaScript高级程序回顾(五)——面向对象的JS\ndate: 2018-01-12 18:03:24\ntags:\n---\n\n### 对象的构造\n\n#### 字面量方式\n　　使用对象字面量形式是一种常见的构造对象的方式，不再多说。如下：\n```\nvar person = {\n  name: 'Julia',\n  age: 23,\n  address: {\n    prov: 'Zhejiang',\n    city: 'hangzhou'\n  },\n  'test attr': 1, //当属性名不是有效标识符时，需要给属性名加上''\n  sayHi: function(name) {\n    console.log(`Hi, ${name}, I'm ${this.name}`);\n  }\n};\n```\n\n#### 构造器方式\n　　类似于 Java 中使用构造器进行对象构造的形式，JS 中也可以用构造器的方式来构造对象。如下：\n```\nfunction Person(name, age, address, test) {\n  this.name = name;\n  this.age = age;\n  this.address = address;\n  this['test attr'] = test;\n}\nPerson.prototype.sayHi = function(name) {\n  console.log(`Hi ${name}, I'm ${this.name}`);\n}\nvar person = new Person('Julia', 23, { prov: 'Zhejiang', city: 'hangzhou' }, 1);\n```\n　　这是常用的一种构造对象的方式，它组合了构造器的方式和原型的方式。构造器主要用于构造对象自身有的属性，比如本例中的姓名、年龄等；原型方式主要用于构造对象之间公有的特征，比如 sayHi 方法。最后，通过 new 操作符构造出了 Person，以这种方式调用构造函数实际会经历如下四个步骤：\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象(因此 this 就指向了这个新对象)\n3. 执行构造函数中的代码(为这个新对象添加属性)\n4. 返回新对象\n\n#### Object.create 方法\n　　使用这种方法可以为你要创建的对象指定其原型，而不用定义一个构造函数。如下：\n```\nvar person = {\n  name: 'Julia',\n  age: 23,\n  address: {\n    prov: 'Zhejiang',\n    city: 'hangzhou'\n  },\n  'test attr': 1, //当属性名不是有效标识符时，需要给属性名加上''\n  sayHi: function(name) {\n    console.log(`Hi, ${name}, I'm ${this.name}`);\n  }\n};\nvar person1 = Object.create(person);\n```\n　　以上代码构造了一个 person1 对象，它是以 person 对象作为其原型的。换言之，如果我使用 Object.create(person) 构造了 person2，person3...很多个对象，它们都会拥有 person 对象上的所有属性和方法。\n\n### 原型与原型属性\n　　原型指的是 prototype，原型属性指的是 \\__proto\\__。偶然看到过的一句话，我觉得可以深刻地解释它们分别是什么：prototype 代表胚胎，\\__proto\\__ 代表父亲。这句话很值得挖掘。先说 prototype，它代表的是胚胎，意味着它是可以用来产生新的对象的，可以不基于已有对象，并且用来产生新对象的方法是通过使用函数，所以 prototype 属性是函数才有的(这是个人看法，这样理解会变得十分简单)。而所有的对象都有父亲，所以每个对象都有 \\__proto\\__ 属性。为了更清楚的理解这两个属性，这里结合以上三种构造对象的方式来进行解释。\n\n#### 字面量方式\n```\nvar a = {};\n```\n![](//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7cpj5j20el06rjrz.jpg)\n\n#### 构造器方式\n```\nvar A = function() {};\nvar a = new A();\n```\n![](//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7505lj20ef06xgm4.jpg)\n\n#### Object.create 方法\n```\nvar a1 = {};\nvar a2 = Object.create(a1);\n```\n![](//wx3.sinaimg.cn/mw690/79b5b053gy1fne3p7bzh9j20eq06v3yw.jpg)\n\n### 原型链\n　　原型链是 JS 中实现继承的主要方式。原型链这个词中的原型二字，指的实际上是 \\__proto\\__ 属性而非 prototype 属性。可以这么理解，JS 中万物皆对象，而 \\__proto\\__ 是所有对象都有的属性，prototype 只是函数才有的属性，所以 prototype 是无法形成链条的，而 \\__proto\\__ 是可以做到的。下面一张图，可以清楚地展示出原型链。\n```\nvar A = function() {};\nvar a = new A();\n```\n![](https://wx2.sinaimg.cn/mw690/79b5b053gy1fne3v9tn5sj20la053q3p.jpg)\n　　从这张图我们可以看出一条由 \\__proto\\__ 链起来的链条，这就是原型链。在 JS 中，Object 是所有对象的基类，这一点我们也可以从图中观察到，null 总是位于原型链的顶端，Object 仅次于 null。当 JS 引擎查找属性时，会先查找对象本身是否存在该属性，如果不存在，会在原型链上查找，直至回溯到原型链的顶端。\n\n### 参考资料\n[三张图搞懂JavaScript的原型对象与原型链](http://www.cnblogs.com/shuiyi/p/5305435.html)\n","slug":"面向对象的JS","published":1,"updated":"2018-01-15T09:53:47.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdm000fvxsle23nw225","content":"<h3 id=\"对象的构造\"><a href=\"#对象的构造\" class=\"headerlink\" title=\"对象的构造\"></a>对象的构造</h3><h4 id=\"字面量方式\"><a href=\"#字面量方式\" class=\"headerlink\" title=\"字面量方式\"></a>字面量方式</h4><p>　　使用对象字面量形式是一种常见的构造对象的方式，不再多说。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  name: &apos;Julia&apos;,</span><br><span class=\"line\">  age: 23,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    prov: &apos;Zhejiang&apos;,</span><br><span class=\"line\">    city: &apos;hangzhou&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &apos;test attr&apos;: 1, //当属性名不是有效标识符时，需要给属性名加上&apos;&apos;</span><br><span class=\"line\">  sayHi: function(name) &#123;</span><br><span class=\"line\">    console.log(`Hi, $&#123;name&#125;, I&apos;m $&#123;this.name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"构造器方式\"><a href=\"#构造器方式\" class=\"headerlink\" title=\"构造器方式\"></a>构造器方式</h4><p>　　类似于 Java 中使用构造器进行对象构造的形式，JS 中也可以用构造器的方式来构造对象。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, address, test) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">  this.address = address;</span><br><span class=\"line\">  this[&apos;test attr&apos;] = test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = function(name) &#123;</span><br><span class=\"line\">  console.log(`Hi $&#123;name&#125;, I&apos;m $&#123;this.name&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Person(&apos;Julia&apos;, 23, &#123; prov: &apos;Zhejiang&apos;, city: &apos;hangzhou&apos; &#125;, 1);</span><br></pre></td></tr></table></figure></p>\n<p>　　这是常用的一种构造对象的方式，它组合了构造器的方式和原型的方式。构造器主要用于构造对象自身有的属性，比如本例中的姓名、年龄等；原型方式主要用于构造对象之间公有的特征，比如 sayHi 方法。最后，通过 new 操作符构造出了 Person，以这种方式调用构造函数实际会经历如下四个步骤：</p>\n<ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象(因此 this 就指向了这个新对象)</li>\n<li>执行构造函数中的代码(为这个新对象添加属性)</li>\n<li>返回新对象</li>\n</ol>\n<h4 id=\"Object-create-方法\"><a href=\"#Object-create-方法\" class=\"headerlink\" title=\"Object.create 方法\"></a>Object.create 方法</h4><p>　　使用这种方法可以为你要创建的对象指定其原型，而不用定义一个构造函数。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  name: &apos;Julia&apos;,</span><br><span class=\"line\">  age: 23,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    prov: &apos;Zhejiang&apos;,</span><br><span class=\"line\">    city: &apos;hangzhou&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &apos;test attr&apos;: 1, //当属性名不是有效标识符时，需要给属性名加上&apos;&apos;</span><br><span class=\"line\">  sayHi: function(name) &#123;</span><br><span class=\"line\">    console.log(`Hi, $&#123;name&#125;, I&apos;m $&#123;this.name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var person1 = Object.create(person);</span><br></pre></td></tr></table></figure></p>\n<p>　　以上代码构造了一个 person1 对象，它是以 person 对象作为其原型的。换言之，如果我使用 Object.create(person) 构造了 person2，person3…很多个对象，它们都会拥有 person 对象上的所有属性和方法。</p>\n<h3 id=\"原型与原型属性\"><a href=\"#原型与原型属性\" class=\"headerlink\" title=\"原型与原型属性\"></a>原型与原型属性</h3><p>　　原型指的是 prototype，原型属性指的是 __proto__。偶然看到过的一句话，我觉得可以深刻地解释它们分别是什么：prototype 代表胚胎，__proto__ 代表父亲。这句话很值得挖掘。先说 prototype，它代表的是胚胎，意味着它是可以用来产生新的对象的，可以不基于已有对象，并且用来产生新对象的方法是通过使用函数，所以 prototype 属性是函数才有的(这是个人看法，这样理解会变得十分简单)。而所有的对象都有父亲，所以每个对象都有 __proto__ 属性。为了更清楚的理解这两个属性，这里结合以上三种构造对象的方式来进行解释。</p>\n<h4 id=\"字面量方式-1\"><a href=\"#字面量方式-1\" class=\"headerlink\" title=\"字面量方式\"></a>字面量方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7cpj5j20el06rjrz.jpg\" alt=\"\"></p>\n<h4 id=\"构造器方式-1\"><a href=\"#构造器方式-1\" class=\"headerlink\" title=\"构造器方式\"></a>构造器方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var A = function() &#123;&#125;;</span><br><span class=\"line\">var a = new A();</span><br></pre></td></tr></table></figure>\n<p><img src=\"//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7505lj20ef06xgm4.jpg\" alt=\"\"></p>\n<h4 id=\"Object-create-方法-1\"><a href=\"#Object-create-方法-1\" class=\"headerlink\" title=\"Object.create 方法\"></a>Object.create 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a1 = &#123;&#125;;</span><br><span class=\"line\">var a2 = Object.create(a1);</span><br></pre></td></tr></table></figure>\n<p><img src=\"//wx3.sinaimg.cn/mw690/79b5b053gy1fne3p7bzh9j20eq06v3yw.jpg\" alt=\"\"></p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>　　原型链是 JS 中实现继承的主要方式。原型链这个词中的原型二字，指的实际上是 __proto__ 属性而非 prototype 属性。可以这么理解，JS 中万物皆对象，而 __proto__ 是所有对象都有的属性，prototype 只是函数才有的属性，所以 prototype 是无法形成链条的，而 __proto__ 是可以做到的。下面一张图，可以清楚地展示出原型链。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var A = function() &#123;&#125;;</span><br><span class=\"line\">var a = new A();</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/79b5b053gy1fne3v9tn5sj20la053q3p.jpg\" alt=\"\"><br>　　从这张图我们可以看出一条由 __proto__ 链起来的链条，这就是原型链。在 JS 中，Object 是所有对象的基类，这一点我们也可以从图中观察到，null 总是位于原型链的顶端，Object 仅次于 null。当 JS 引擎查找属性时，会先查找对象本身是否存在该属性，如果不存在，会在原型链上查找，直至回溯到原型链的顶端。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.cnblogs.com/shuiyi/p/5305435.html\" target=\"_blank\" rel=\"external\">三张图搞懂JavaScript的原型对象与原型链</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"对象的构造\"><a href=\"#对象的构造\" class=\"headerlink\" title=\"对象的构造\"></a>对象的构造</h3><h4 id=\"字面量方式\"><a href=\"#字面量方式\" class=\"headerlink\" title=\"字面量方式\"></a>字面量方式</h4><p>　　使用对象字面量形式是一种常见的构造对象的方式，不再多说。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  name: &apos;Julia&apos;,</span><br><span class=\"line\">  age: 23,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    prov: &apos;Zhejiang&apos;,</span><br><span class=\"line\">    city: &apos;hangzhou&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &apos;test attr&apos;: 1, //当属性名不是有效标识符时，需要给属性名加上&apos;&apos;</span><br><span class=\"line\">  sayHi: function(name) &#123;</span><br><span class=\"line\">    console.log(`Hi, $&#123;name&#125;, I&apos;m $&#123;this.name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"构造器方式\"><a href=\"#构造器方式\" class=\"headerlink\" title=\"构造器方式\"></a>构造器方式</h4><p>　　类似于 Java 中使用构造器进行对象构造的形式，JS 中也可以用构造器的方式来构造对象。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, address, test) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">  this.address = address;</span><br><span class=\"line\">  this[&apos;test attr&apos;] = test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = function(name) &#123;</span><br><span class=\"line\">  console.log(`Hi $&#123;name&#125;, I&apos;m $&#123;this.name&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Person(&apos;Julia&apos;, 23, &#123; prov: &apos;Zhejiang&apos;, city: &apos;hangzhou&apos; &#125;, 1);</span><br></pre></td></tr></table></figure></p>\n<p>　　这是常用的一种构造对象的方式，它组合了构造器的方式和原型的方式。构造器主要用于构造对象自身有的属性，比如本例中的姓名、年龄等；原型方式主要用于构造对象之间公有的特征，比如 sayHi 方法。最后，通过 new 操作符构造出了 Person，以这种方式调用构造函数实际会经历如下四个步骤：</p>\n<ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象(因此 this 就指向了这个新对象)</li>\n<li>执行构造函数中的代码(为这个新对象添加属性)</li>\n<li>返回新对象</li>\n</ol>\n<h4 id=\"Object-create-方法\"><a href=\"#Object-create-方法\" class=\"headerlink\" title=\"Object.create 方法\"></a>Object.create 方法</h4><p>　　使用这种方法可以为你要创建的对象指定其原型，而不用定义一个构造函数。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  name: &apos;Julia&apos;,</span><br><span class=\"line\">  age: 23,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    prov: &apos;Zhejiang&apos;,</span><br><span class=\"line\">    city: &apos;hangzhou&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &apos;test attr&apos;: 1, //当属性名不是有效标识符时，需要给属性名加上&apos;&apos;</span><br><span class=\"line\">  sayHi: function(name) &#123;</span><br><span class=\"line\">    console.log(`Hi, $&#123;name&#125;, I&apos;m $&#123;this.name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var person1 = Object.create(person);</span><br></pre></td></tr></table></figure></p>\n<p>　　以上代码构造了一个 person1 对象，它是以 person 对象作为其原型的。换言之，如果我使用 Object.create(person) 构造了 person2，person3…很多个对象，它们都会拥有 person 对象上的所有属性和方法。</p>\n<h3 id=\"原型与原型属性\"><a href=\"#原型与原型属性\" class=\"headerlink\" title=\"原型与原型属性\"></a>原型与原型属性</h3><p>　　原型指的是 prototype，原型属性指的是 __proto__。偶然看到过的一句话，我觉得可以深刻地解释它们分别是什么：prototype 代表胚胎，__proto__ 代表父亲。这句话很值得挖掘。先说 prototype，它代表的是胚胎，意味着它是可以用来产生新的对象的，可以不基于已有对象，并且用来产生新对象的方法是通过使用函数，所以 prototype 属性是函数才有的(这是个人看法，这样理解会变得十分简单)。而所有的对象都有父亲，所以每个对象都有 __proto__ 属性。为了更清楚的理解这两个属性，这里结合以上三种构造对象的方式来进行解释。</p>\n<h4 id=\"字面量方式-1\"><a href=\"#字面量方式-1\" class=\"headerlink\" title=\"字面量方式\"></a>字面量方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7cpj5j20el06rjrz.jpg\" alt=\"\"></p>\n<h4 id=\"构造器方式-1\"><a href=\"#构造器方式-1\" class=\"headerlink\" title=\"构造器方式\"></a>构造器方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var A = function() &#123;&#125;;</span><br><span class=\"line\">var a = new A();</span><br></pre></td></tr></table></figure>\n<p><img src=\"//wx4.sinaimg.cn/mw690/79b5b053gy1fne3p7505lj20ef06xgm4.jpg\" alt=\"\"></p>\n<h4 id=\"Object-create-方法-1\"><a href=\"#Object-create-方法-1\" class=\"headerlink\" title=\"Object.create 方法\"></a>Object.create 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a1 = &#123;&#125;;</span><br><span class=\"line\">var a2 = Object.create(a1);</span><br></pre></td></tr></table></figure>\n<p><img src=\"//wx3.sinaimg.cn/mw690/79b5b053gy1fne3p7bzh9j20eq06v3yw.jpg\" alt=\"\"></p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>　　原型链是 JS 中实现继承的主要方式。原型链这个词中的原型二字，指的实际上是 __proto__ 属性而非 prototype 属性。可以这么理解，JS 中万物皆对象，而 __proto__ 是所有对象都有的属性，prototype 只是函数才有的属性，所以 prototype 是无法形成链条的，而 __proto__ 是可以做到的。下面一张图，可以清楚地展示出原型链。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var A = function() &#123;&#125;;</span><br><span class=\"line\">var a = new A();</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/79b5b053gy1fne3v9tn5sj20la053q3p.jpg\" alt=\"\"><br>　　从这张图我们可以看出一条由 __proto__ 链起来的链条，这就是原型链。在 JS 中，Object 是所有对象的基类，这一点我们也可以从图中观察到，null 总是位于原型链的顶端，Object 仅次于 null。当 JS 引擎查找属性时，会先查找对象本身是否存在该属性，如果不存在，会在原型链上查找，直至回溯到原型链的顶端。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.cnblogs.com/shuiyi/p/5305435.html\" target=\"_blank\" rel=\"external\">三张图搞懂JavaScript的原型对象与原型链</a></p>\n"},{"title":"JavaScript高级程序回顾(六)——高级技巧","date":"2018-01-15T07:37:44.000Z","_content":"### 高级函数\n\n#### 安全的类型检测\n　　JavaScript 内置的类型检测机制并非完全可靠。一个众所周知的问题就是在运行`typeof null`时，会返回`object`，这往往不是我们想要的结果，这会使得真正的对象类型与`null`得到的结果相同。解决该问题的方法之一是使用`Object.prototype.toString.call(value)`，如果该表达式中`value = null`，则会返回`[object Null]`；如果`value = {}`，则返回`[object Object]`。\n\n#### 作用域安全的构造函数\n　　当使用构造器方式构造对象时，构造器内部使用了 this 来指向新的对象实例，然而这仅仅是在正确调用构造函数时出现的结果（使用了 new 操作符）。如果忘记使用 new 操作符，与调用普通函数无异，此时构造器内部的 this 指向的是全局对象。为了避免这种错误的构造器调用方式，我们在构造器内部添加一个容错：\n```\nfunction Person(name) {\n  if (this instanceof Person) {\n    this.name = name;\n  } else {\n    return new Person(name);\n  }\n}\n```\n　　通过在构造函数中增加`this instanceof Person`的判断，可以确保作用域安全。\n\n#### 惰性载入函数\n　　先来看以下伪代码，它想表达的意思就是在 IE、Chrome 和其它浏览器的情况下分别返回不同的对象。\n```\nfunction createObj() {\n  if (IE 浏览器) {\n    return IEObj;\n  } else if (Chrome 浏览器) {\n    return ChromeObj;\n  } else {\n    return otherObj;\n  }\n}\n```\n　　假设该函数要调用多次，就意味着要进行多次的分支语句的判断，而这是不必要的：因为一旦确定是在某个浏览器中，每次运行结果都是一样的。那么如何避免判断多次这种不必要的分支呢？解决方案就是称之为惰性载入的技巧。有两种实现惰性载入的方式，第一种是在函数被调用时再处理函数。例如按照如下方式改写上例：\n```\nfunction createObj() {\n  if (IE) {\n    createObj = function () {\n      return IEObj;\n    }\n  } else if (Chrome) {\n    createObj = function () {\n      return ChromeObj;\n    }\n  } else {\n    createObj = function () {\n      return otherObj;\n    }\n  }\n  return createObj();\n}\n```\n　　在上面这种方式下，if 语句的每个分支都会为 createObj 变量赋值，有效覆盖了原有的函数。最后一步就是调用新赋的函数并返回。以后再调用 createObj() 的时候，就会直接调用被分配的函数，无需再次执行 if 语句。第二种惰性载入的方式是在声明函数时就指定适当的函数，这样，在第一次调用函数时就不会损失性能了，而在代码首次加载时会损失一点性能。。例如按照如下方式改写上例：\n```\nvar createObj = (function() {\n  if (IE) {\n    return function() {\n      return IEObj;\n    }\n  } else if (Chrome) {\n    return function() {\n      return ChromeObj;\n    }\n  } else {\n    return function() {\n      return otherObj;\n    }\n  }\n})();\n```\n\n#### 函数柯里化\n　　函数柯里化用于创建已经设置好了一个或多个参数的函数。一个熟悉的应用场景是 [Function.prototype.bind()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)，MDN 上对该函数的定义是：bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，*在调用新函数时，在任何提供之前提供一个给定的参数序列*。这句话中的斜体部分，就是使用的函数柯里化的思想。以下是 bind 函数的一种实现方式：\n```\nfunction bind(fn, context) {\n  var args = Array.prototype.slice.call(arguments, 2); //提取第三个及以后的参数\n  return function() {\n    var innerArgs = Array.prototype.slice.call(arguments); //该匿名函数的参数\n    var finalArgs = args.concat(innerArgs); //外层参数和内层参数连接\n    return fn.apply(context, finalArgs); //将 fn 上下文设置为 context，并传入 finalArgs 参数\n  };\n}\n```\n\n### 防篡改对象\n- 不可扩展对象：不能给对象添加新成员。涉及的方法有：[Object.preventExtensions()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) 和 [Object.isExtensible()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n- 密封的对象：只能改变可写属性的值。涉及的方法有：[Object.seal()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) 和 [Object.isSealed()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n- 冻结的对象：该对象永远不可变。涉及的方法有：[Object.freeze()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) 和 [Object.isFrozen()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n\n### 高级定时器\n　　我们常常使用 `setTimeout()` 和 `setInterval()` 函数来创建定时器，但是不难发现，假如你设定了 setInterval 的间隔时间是 1s，但是函数的执行间隔好像并不是 1s，这是很普遍的现象，它的原因主要在于：在 JavaScript 中没有任何代码是立刻执行的，但一旦线程空闲则尽快执行。由于 JavaScript 是单线程的，看似好像与它的异步机制有所冲突，实则没有。异步的本质实际上是计划代码在未来的某个时间执行，具体在哪个时间执行取决于它前面有多少任务需要执行，这是一种队列的机制。定时器对队列的工作方式是，当特定时间过去后将代码插入，等待执行。根据以下的代码想象一个场景：该例中的 onclick 事件处理程序执行了 300ms，那么定时器的代码至少要在定时器设置之后的 300ms 后才会被执行，见下图。\n```\nvar btn = document.getElementById('my-btn');\nbtn.onclick = function() {\n  setTimeout(function() {\n    //一些操作\n  }, 250);\n  //其它代码\n}\n```\n![](https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhet819cnj20be05474l.jpg)\n　　如图，尽管在 255ms 处添加了定时器代码，但这时候 JS 线程不空闲，onclick 事件处理程序还在运行。所以定时器代码最早能执行的时机是 300ms 处。\n\n#### 重复的定时器\n　　setInterval 定时器确保代码能够规则地插入队列中。但是该方式的问题在于，定时器代码在再次被添加到队列之前还没有完成执行，结果导致定时器代码连续运行好几次而之间没有任何停顿。幸好，JS 引擎够聪明，能避免这个问题：在使用 setInterval 时，仅当队列中没有该定时器的其它任何代码实例时，才将定时器代码添加到队列中，这确保了定时器代码加入到队列中的最小时间间隔为指定间隔。\n　　这种定时器规则有两个问题：1)某些间隔会被跳过；2)多个定时器的代码执行之间间隔可能会比预期的小。我们改写上例代码为：\n```\nvar btn = document.getElementById('my-btn');\nbtn.onclick = function() {\n  setInterval(function() {\n    //一些操作\n  }, 200);\n  //其它代码\n}\n```\n　　设想场景：事件处理程序花了 300ms 多一点的时间完成，同时定时器也花了差不多的时间，就会同时出现跳过间隔且连续运行定时器代码的情况。参见下图：\n![](https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhf6iw7fmj20e905jq3f.jpg)\n　　205ms 时，第一个定时器代码被添加到队列中，到 300ms 处时才能执行。在执行过程中，405ms 时又给队列添加了定时器代码。在下个间隔，即 605ms 处，由于队列中存在一个定时器代码的实例，因而这个时间点的定时器代码不会被添加到队列中。当第一个定时器代码执行完之后，紧接着就执行第二个定时器代码。为了避免以上提到的两个缺点，可以采取以下方案代替 setInterval：\n```\nsetTimeout(function() {\n  //一些操作\n  setTimeout(arguments.callee, interval);\n}, interval)\n```\n　　这样做的好处时，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，这样不会跳过间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。\n\n#### 数组分块\n　　当代码中存在进行大量处理的循环时，会导致脚本的长时间运行。如果该循环无需同步完成，也不必按顺序完成时，我们可以使用定时器分割这个循环，使其可以分散在不同的时间完成。基本模式如下：\n```\nsetTimeout(function() {\n  var item = array.shift();\n  process(item);\n  if (array.length) {\n    setTimeout(arguments.callee, 100);\n  }\n}, 100);\n```\n\n#### 函数节流\n　　先来看个例子：\n```\nwindow.onresize = function() {\n  var div = document.getElementById('myDiv');\n  div.style.height = div.offsetWidth + 'px';\n}\n```\n　　就问你吓不吓人。当你改变 window 的大小的时候，浏览器连续不断地去执行上面的代码，可想而知会有多慢。为了解决这个问题，可以用定时器对该函数进行节流。函数节流背后的思想是指，某些代码不可以在没有间断的情况下连续重复运行。也就是说，在一段时间内，一段代码函数只能执行一次，这段代码就是被节流的代码。以下是函数节流的一种应用场景：\n　　假设调用方式如下：\n```\nwindow.addEventListener('resize', throttle(func, 100));\n```\n　　那么对应的函数节流形式如下：\n```\nvar isRun = true;\nfunction throttle(func, duration) {\n  let me = this;\n  return function() {\n    if (!isRun) {\n      return;\n    }\n    let args = arguments;\n    isRun = false;\n    setTimeout(function() {\n      isRun = true;\n      func.apply(me, arguments);\n    }, duration);\n  }\n}\n```\n　　上面的这段代码有效的控制了 resize 函数的执行频率，使其保持为 1 / duration。*函数节流的要点是声明一个变量作为标志位，记录当前代码是否在执行*。\n\n#### 函数防抖\n　　有点类似于函数节流，函数防抖也往往用来解决频繁的事件触发所造成的性能问题。但是它与函数节流的理念不同，如果说节流是进行频率控制的话，那么防抖则是进行空闲控制，只有当调用动作 n 毫秒后，才会再次执行该动作，如果这 n 毫秒内又调用此动作则将重新计算执行时间。还有一种常见的防抖场景是验证用户输入：只有当用户输入完毕后，前端才需要检查格式是否正确。以下是函数防抖的一种应用场景：\n　　假设调用方式如下：\n```\nwindow.addEventListener('resize', debounce(func, 100));\n```\n　　那么对应的函数防抖形式如下：\n```\nvar timeoutId = null;\nfunction debounce(func, duration) {\n  let me = this;\n  return function() {\n    let args = arguments;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(function() {\n      func.apply(me, args);\n    }, duration);\n  };\n}\n```\n　　上面的这段代码同样有效控制了 resize 函数的执行频率，与函数节流有点不同的是，它在执行函数时，多了一个延迟时间。\n\n### 参考资料\n[JavaScript函数节流和函数防抖之间的区别](http://www.jb51.net/article/105601.htm)","source":"_posts/高级技巧.md","raw":"---\ntitle: JavaScript高级程序回顾(六)——高级技巧\ndate: 2018-01-15 15:37:44\ntags:\n---\n### 高级函数\n\n#### 安全的类型检测\n　　JavaScript 内置的类型检测机制并非完全可靠。一个众所周知的问题就是在运行`typeof null`时，会返回`object`，这往往不是我们想要的结果，这会使得真正的对象类型与`null`得到的结果相同。解决该问题的方法之一是使用`Object.prototype.toString.call(value)`，如果该表达式中`value = null`，则会返回`[object Null]`；如果`value = {}`，则返回`[object Object]`。\n\n#### 作用域安全的构造函数\n　　当使用构造器方式构造对象时，构造器内部使用了 this 来指向新的对象实例，然而这仅仅是在正确调用构造函数时出现的结果（使用了 new 操作符）。如果忘记使用 new 操作符，与调用普通函数无异，此时构造器内部的 this 指向的是全局对象。为了避免这种错误的构造器调用方式，我们在构造器内部添加一个容错：\n```\nfunction Person(name) {\n  if (this instanceof Person) {\n    this.name = name;\n  } else {\n    return new Person(name);\n  }\n}\n```\n　　通过在构造函数中增加`this instanceof Person`的判断，可以确保作用域安全。\n\n#### 惰性载入函数\n　　先来看以下伪代码，它想表达的意思就是在 IE、Chrome 和其它浏览器的情况下分别返回不同的对象。\n```\nfunction createObj() {\n  if (IE 浏览器) {\n    return IEObj;\n  } else if (Chrome 浏览器) {\n    return ChromeObj;\n  } else {\n    return otherObj;\n  }\n}\n```\n　　假设该函数要调用多次，就意味着要进行多次的分支语句的判断，而这是不必要的：因为一旦确定是在某个浏览器中，每次运行结果都是一样的。那么如何避免判断多次这种不必要的分支呢？解决方案就是称之为惰性载入的技巧。有两种实现惰性载入的方式，第一种是在函数被调用时再处理函数。例如按照如下方式改写上例：\n```\nfunction createObj() {\n  if (IE) {\n    createObj = function () {\n      return IEObj;\n    }\n  } else if (Chrome) {\n    createObj = function () {\n      return ChromeObj;\n    }\n  } else {\n    createObj = function () {\n      return otherObj;\n    }\n  }\n  return createObj();\n}\n```\n　　在上面这种方式下，if 语句的每个分支都会为 createObj 变量赋值，有效覆盖了原有的函数。最后一步就是调用新赋的函数并返回。以后再调用 createObj() 的时候，就会直接调用被分配的函数，无需再次执行 if 语句。第二种惰性载入的方式是在声明函数时就指定适当的函数，这样，在第一次调用函数时就不会损失性能了，而在代码首次加载时会损失一点性能。。例如按照如下方式改写上例：\n```\nvar createObj = (function() {\n  if (IE) {\n    return function() {\n      return IEObj;\n    }\n  } else if (Chrome) {\n    return function() {\n      return ChromeObj;\n    }\n  } else {\n    return function() {\n      return otherObj;\n    }\n  }\n})();\n```\n\n#### 函数柯里化\n　　函数柯里化用于创建已经设置好了一个或多个参数的函数。一个熟悉的应用场景是 [Function.prototype.bind()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)，MDN 上对该函数的定义是：bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，*在调用新函数时，在任何提供之前提供一个给定的参数序列*。这句话中的斜体部分，就是使用的函数柯里化的思想。以下是 bind 函数的一种实现方式：\n```\nfunction bind(fn, context) {\n  var args = Array.prototype.slice.call(arguments, 2); //提取第三个及以后的参数\n  return function() {\n    var innerArgs = Array.prototype.slice.call(arguments); //该匿名函数的参数\n    var finalArgs = args.concat(innerArgs); //外层参数和内层参数连接\n    return fn.apply(context, finalArgs); //将 fn 上下文设置为 context，并传入 finalArgs 参数\n  };\n}\n```\n\n### 防篡改对象\n- 不可扩展对象：不能给对象添加新成员。涉及的方法有：[Object.preventExtensions()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) 和 [Object.isExtensible()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n- 密封的对象：只能改变可写属性的值。涉及的方法有：[Object.seal()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) 和 [Object.isSealed()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n- 冻结的对象：该对象永远不可变。涉及的方法有：[Object.freeze()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) 和 [Object.isFrozen()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n\n### 高级定时器\n　　我们常常使用 `setTimeout()` 和 `setInterval()` 函数来创建定时器，但是不难发现，假如你设定了 setInterval 的间隔时间是 1s，但是函数的执行间隔好像并不是 1s，这是很普遍的现象，它的原因主要在于：在 JavaScript 中没有任何代码是立刻执行的，但一旦线程空闲则尽快执行。由于 JavaScript 是单线程的，看似好像与它的异步机制有所冲突，实则没有。异步的本质实际上是计划代码在未来的某个时间执行，具体在哪个时间执行取决于它前面有多少任务需要执行，这是一种队列的机制。定时器对队列的工作方式是，当特定时间过去后将代码插入，等待执行。根据以下的代码想象一个场景：该例中的 onclick 事件处理程序执行了 300ms，那么定时器的代码至少要在定时器设置之后的 300ms 后才会被执行，见下图。\n```\nvar btn = document.getElementById('my-btn');\nbtn.onclick = function() {\n  setTimeout(function() {\n    //一些操作\n  }, 250);\n  //其它代码\n}\n```\n![](https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhet819cnj20be05474l.jpg)\n　　如图，尽管在 255ms 处添加了定时器代码，但这时候 JS 线程不空闲，onclick 事件处理程序还在运行。所以定时器代码最早能执行的时机是 300ms 处。\n\n#### 重复的定时器\n　　setInterval 定时器确保代码能够规则地插入队列中。但是该方式的问题在于，定时器代码在再次被添加到队列之前还没有完成执行，结果导致定时器代码连续运行好几次而之间没有任何停顿。幸好，JS 引擎够聪明，能避免这个问题：在使用 setInterval 时，仅当队列中没有该定时器的其它任何代码实例时，才将定时器代码添加到队列中，这确保了定时器代码加入到队列中的最小时间间隔为指定间隔。\n　　这种定时器规则有两个问题：1)某些间隔会被跳过；2)多个定时器的代码执行之间间隔可能会比预期的小。我们改写上例代码为：\n```\nvar btn = document.getElementById('my-btn');\nbtn.onclick = function() {\n  setInterval(function() {\n    //一些操作\n  }, 200);\n  //其它代码\n}\n```\n　　设想场景：事件处理程序花了 300ms 多一点的时间完成，同时定时器也花了差不多的时间，就会同时出现跳过间隔且连续运行定时器代码的情况。参见下图：\n![](https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhf6iw7fmj20e905jq3f.jpg)\n　　205ms 时，第一个定时器代码被添加到队列中，到 300ms 处时才能执行。在执行过程中，405ms 时又给队列添加了定时器代码。在下个间隔，即 605ms 处，由于队列中存在一个定时器代码的实例，因而这个时间点的定时器代码不会被添加到队列中。当第一个定时器代码执行完之后，紧接着就执行第二个定时器代码。为了避免以上提到的两个缺点，可以采取以下方案代替 setInterval：\n```\nsetTimeout(function() {\n  //一些操作\n  setTimeout(arguments.callee, interval);\n}, interval)\n```\n　　这样做的好处时，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，这样不会跳过间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。\n\n#### 数组分块\n　　当代码中存在进行大量处理的循环时，会导致脚本的长时间运行。如果该循环无需同步完成，也不必按顺序完成时，我们可以使用定时器分割这个循环，使其可以分散在不同的时间完成。基本模式如下：\n```\nsetTimeout(function() {\n  var item = array.shift();\n  process(item);\n  if (array.length) {\n    setTimeout(arguments.callee, 100);\n  }\n}, 100);\n```\n\n#### 函数节流\n　　先来看个例子：\n```\nwindow.onresize = function() {\n  var div = document.getElementById('myDiv');\n  div.style.height = div.offsetWidth + 'px';\n}\n```\n　　就问你吓不吓人。当你改变 window 的大小的时候，浏览器连续不断地去执行上面的代码，可想而知会有多慢。为了解决这个问题，可以用定时器对该函数进行节流。函数节流背后的思想是指，某些代码不可以在没有间断的情况下连续重复运行。也就是说，在一段时间内，一段代码函数只能执行一次，这段代码就是被节流的代码。以下是函数节流的一种应用场景：\n　　假设调用方式如下：\n```\nwindow.addEventListener('resize', throttle(func, 100));\n```\n　　那么对应的函数节流形式如下：\n```\nvar isRun = true;\nfunction throttle(func, duration) {\n  let me = this;\n  return function() {\n    if (!isRun) {\n      return;\n    }\n    let args = arguments;\n    isRun = false;\n    setTimeout(function() {\n      isRun = true;\n      func.apply(me, arguments);\n    }, duration);\n  }\n}\n```\n　　上面的这段代码有效的控制了 resize 函数的执行频率，使其保持为 1 / duration。*函数节流的要点是声明一个变量作为标志位，记录当前代码是否在执行*。\n\n#### 函数防抖\n　　有点类似于函数节流，函数防抖也往往用来解决频繁的事件触发所造成的性能问题。但是它与函数节流的理念不同，如果说节流是进行频率控制的话，那么防抖则是进行空闲控制，只有当调用动作 n 毫秒后，才会再次执行该动作，如果这 n 毫秒内又调用此动作则将重新计算执行时间。还有一种常见的防抖场景是验证用户输入：只有当用户输入完毕后，前端才需要检查格式是否正确。以下是函数防抖的一种应用场景：\n　　假设调用方式如下：\n```\nwindow.addEventListener('resize', debounce(func, 100));\n```\n　　那么对应的函数防抖形式如下：\n```\nvar timeoutId = null;\nfunction debounce(func, duration) {\n  let me = this;\n  return function() {\n    let args = arguments;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(function() {\n      func.apply(me, args);\n    }, duration);\n  };\n}\n```\n　　上面的这段代码同样有效控制了 resize 函数的执行频率，与函数节流有点不同的是，它在执行函数时，多了一个延迟时间。\n\n### 参考资料\n[JavaScript函数节流和函数防抖之间的区别](http://www.jb51.net/article/105601.htm)","slug":"高级技巧","published":1,"updated":"2018-03-21T11:38:19.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf9oxmdn000gvxslbi0u0jtv","content":"<h3 id=\"高级函数\"><a href=\"#高级函数\" class=\"headerlink\" title=\"高级函数\"></a>高级函数</h3><h4 id=\"安全的类型检测\"><a href=\"#安全的类型检测\" class=\"headerlink\" title=\"安全的类型检测\"></a>安全的类型检测</h4><p>　　JavaScript 内置的类型检测机制并非完全可靠。一个众所周知的问题就是在运行<code>typeof null</code>时，会返回<code>object</code>，这往往不是我们想要的结果，这会使得真正的对象类型与<code>null</code>得到的结果相同。解决该问题的方法之一是使用<code>Object.prototype.toString.call(value)</code>，如果该表达式中<code>value = null</code>，则会返回<code>[object Null]</code>；如果<code>value = {}</code>，则返回<code>[object Object]</code>。</p>\n<h4 id=\"作用域安全的构造函数\"><a href=\"#作用域安全的构造函数\" class=\"headerlink\" title=\"作用域安全的构造函数\"></a>作用域安全的构造函数</h4><p>　　当使用构造器方式构造对象时，构造器内部使用了 this 来指向新的对象实例，然而这仅仅是在正确调用构造函数时出现的结果（使用了 new 操作符）。如果忘记使用 new 操作符，与调用普通函数无异，此时构造器内部的 this 指向的是全局对象。为了避免这种错误的构造器调用方式，我们在构造器内部添加一个容错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  if (this instanceof Person) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return new Person(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　通过在构造函数中增加<code>this instanceof Person</code>的判断，可以确保作用域安全。</p>\n<h4 id=\"惰性载入函数\"><a href=\"#惰性载入函数\" class=\"headerlink\" title=\"惰性载入函数\"></a>惰性载入函数</h4><p>　　先来看以下伪代码，它想表达的意思就是在 IE、Chrome 和其它浏览器的情况下分别返回不同的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObj() &#123;</span><br><span class=\"line\">  if (IE 浏览器) &#123;</span><br><span class=\"line\">    return IEObj;</span><br><span class=\"line\">  &#125; else if (Chrome 浏览器) &#123;</span><br><span class=\"line\">    return ChromeObj;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return otherObj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　假设该函数要调用多次，就意味着要进行多次的分支语句的判断，而这是不必要的：因为一旦确定是在某个浏览器中，每次运行结果都是一样的。那么如何避免判断多次这种不必要的分支呢？解决方案就是称之为惰性载入的技巧。有两种实现惰性载入的方式，第一种是在函数被调用时再处理函数。例如按照如下方式改写上例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObj() &#123;</span><br><span class=\"line\">  if (IE) &#123;</span><br><span class=\"line\">    createObj = function () &#123;</span><br><span class=\"line\">      return IEObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (Chrome) &#123;</span><br><span class=\"line\">    createObj = function () &#123;</span><br><span class=\"line\">      return ChromeObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    createObj = function () &#123;</span><br><span class=\"line\">      return otherObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return createObj();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　在上面这种方式下，if 语句的每个分支都会为 createObj 变量赋值，有效覆盖了原有的函数。最后一步就是调用新赋的函数并返回。以后再调用 createObj() 的时候，就会直接调用被分配的函数，无需再次执行 if 语句。第二种惰性载入的方式是在声明函数时就指定适当的函数，这样，在第一次调用函数时就不会损失性能了，而在代码首次加载时会损失一点性能。。例如按照如下方式改写上例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var createObj = (function() &#123;</span><br><span class=\"line\">  if (IE) &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return IEObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (Chrome) &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return ChromeObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return otherObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h4><p>　　函数柯里化用于创建已经设置好了一个或多个参数的函数。一个熟悉的应用场景是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"external\">Function.prototype.bind()</a>，MDN 上对该函数的定义是：bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，<em>在调用新函数时，在任何提供之前提供一个给定的参数序列</em>。这句话中的斜体部分，就是使用的函数柯里化的思想。以下是 bind 函数的一种实现方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bind(fn, context) &#123;</span><br><span class=\"line\">  var args = Array.prototype.slice.call(arguments, 2); //提取第三个及以后的参数</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    var innerArgs = Array.prototype.slice.call(arguments); //该匿名函数的参数</span><br><span class=\"line\">    var finalArgs = args.concat(innerArgs); //外层参数和内层参数连接</span><br><span class=\"line\">    return fn.apply(context, finalArgs); //将 fn 上下文设置为 context，并传入 finalArgs 参数</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"防篡改对象\"><a href=\"#防篡改对象\" class=\"headerlink\" title=\"防篡改对象\"></a>防篡改对象</h3><ul>\n<li>不可扩展对象：不能给对象添加新成员。涉及的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\" target=\"_blank\" rel=\"external\">Object.preventExtensions()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\" target=\"_blank\" rel=\"external\">Object.isExtensible()</a></li>\n<li>密封的对象：只能改变可写属性的值。涉及的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"external\">Object.seal()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\" target=\"_blank\" rel=\"external\">Object.isSealed()</a></li>\n<li>冻结的对象：该对象永远不可变。涉及的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"external\">Object.freeze()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\" target=\"_blank\" rel=\"external\">Object.isFrozen()</a></li>\n</ul>\n<h3 id=\"高级定时器\"><a href=\"#高级定时器\" class=\"headerlink\" title=\"高级定时器\"></a>高级定时器</h3><p>　　我们常常使用 <code>setTimeout()</code> 和 <code>setInterval()</code> 函数来创建定时器，但是不难发现，假如你设定了 setInterval 的间隔时间是 1s，但是函数的执行间隔好像并不是 1s，这是很普遍的现象，它的原因主要在于：在 JavaScript 中没有任何代码是立刻执行的，但一旦线程空闲则尽快执行。由于 JavaScript 是单线程的，看似好像与它的异步机制有所冲突，实则没有。异步的本质实际上是计划代码在未来的某个时间执行，具体在哪个时间执行取决于它前面有多少任务需要执行，这是一种队列的机制。定时器对队列的工作方式是，当特定时间过去后将代码插入，等待执行。根据以下的代码想象一个场景：该例中的 onclick 事件处理程序执行了 300ms，那么定时器的代码至少要在定时器设置之后的 300ms 后才会被执行，见下图。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;my-btn&apos;);</span><br><span class=\"line\">btn.onclick = function() &#123;</span><br><span class=\"line\">  setTimeout(function() &#123;</span><br><span class=\"line\">    //一些操作</span><br><span class=\"line\">  &#125;, 250);</span><br><span class=\"line\">  //其它代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhet819cnj20be05474l.jpg\" alt=\"\"><br>　　如图，尽管在 255ms 处添加了定时器代码，但这时候 JS 线程不空闲，onclick 事件处理程序还在运行。所以定时器代码最早能执行的时机是 300ms 处。</p>\n<h4 id=\"重复的定时器\"><a href=\"#重复的定时器\" class=\"headerlink\" title=\"重复的定时器\"></a>重复的定时器</h4><p>　　setInterval 定时器确保代码能够规则地插入队列中。但是该方式的问题在于，定时器代码在再次被添加到队列之前还没有完成执行，结果导致定时器代码连续运行好几次而之间没有任何停顿。幸好，JS 引擎够聪明，能避免这个问题：在使用 setInterval 时，仅当队列中没有该定时器的其它任何代码实例时，才将定时器代码添加到队列中，这确保了定时器代码加入到队列中的最小时间间隔为指定间隔。<br>　　这种定时器规则有两个问题：1)某些间隔会被跳过；2)多个定时器的代码执行之间间隔可能会比预期的小。我们改写上例代码为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;my-btn&apos;);</span><br><span class=\"line\">btn.onclick = function() &#123;</span><br><span class=\"line\">  setInterval(function() &#123;</span><br><span class=\"line\">    //一些操作</span><br><span class=\"line\">  &#125;, 200);</span><br><span class=\"line\">  //其它代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　设想场景：事件处理程序花了 300ms 多一点的时间完成，同时定时器也花了差不多的时间，就会同时出现跳过间隔且连续运行定时器代码的情况。参见下图：<br><img src=\"https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhf6iw7fmj20e905jq3f.jpg\" alt=\"\"><br>　　205ms 时，第一个定时器代码被添加到队列中，到 300ms 处时才能执行。在执行过程中，405ms 时又给队列添加了定时器代码。在下个间隔，即 605ms 处，由于队列中存在一个定时器代码的实例，因而这个时间点的定时器代码不会被添加到队列中。当第一个定时器代码执行完之后，紧接着就执行第二个定时器代码。为了避免以上提到的两个缺点，可以采取以下方案代替 setInterval：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">  //一些操作</span><br><span class=\"line\">  setTimeout(arguments.callee, interval);</span><br><span class=\"line\">&#125;, interval)</span><br></pre></td></tr></table></figure></p>\n<p>　　这样做的好处时，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，这样不会跳过间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。</p>\n<h4 id=\"数组分块\"><a href=\"#数组分块\" class=\"headerlink\" title=\"数组分块\"></a>数组分块</h4><p>　　当代码中存在进行大量处理的循环时，会导致脚本的长时间运行。如果该循环无需同步完成，也不必按顺序完成时，我们可以使用定时器分割这个循环，使其可以分散在不同的时间完成。基本模式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">  var item = array.shift();</span><br><span class=\"line\">  process(item);</span><br><span class=\"line\">  if (array.length) &#123;</span><br><span class=\"line\">    setTimeout(arguments.callee, 100);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, 100);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>　　先来看个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onresize = function() &#123;</span><br><span class=\"line\">  var div = document.getElementById(&apos;myDiv&apos;);</span><br><span class=\"line\">  div.style.height = div.offsetWidth + &apos;px&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　就问你吓不吓人。当你改变 window 的大小的时候，浏览器连续不断地去执行上面的代码，可想而知会有多慢。为了解决这个问题，可以用定时器对该函数进行节流。函数节流背后的思想是指，某些代码不可以在没有间断的情况下连续重复运行。也就是说，在一段时间内，一段代码函数只能执行一次，这段代码就是被节流的代码。以下是函数节流的一种应用场景：<br>　　假设调用方式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;resize&apos;, throttle(func, 100));</span><br></pre></td></tr></table></figure></p>\n<p>　　那么对应的函数节流形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isRun = true;</span><br><span class=\"line\">function throttle(func, duration) &#123;</span><br><span class=\"line\">  let me = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    if (!isRun) &#123;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let args = arguments;</span><br><span class=\"line\">    isRun = false;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">      isRun = true;</span><br><span class=\"line\">      func.apply(me, arguments);</span><br><span class=\"line\">    &#125;, duration);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　上面的这段代码有效的控制了 resize 函数的执行频率，使其保持为 1 / duration。<em>函数节流的要点是声明一个变量作为标志位，记录当前代码是否在执行</em>。</p>\n<h4 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h4><p>　　有点类似于函数节流，函数防抖也往往用来解决频繁的事件触发所造成的性能问题。但是它与函数节流的理念不同，如果说节流是进行频率控制的话，那么防抖则是进行空闲控制，只有当调用动作 n 毫秒后，才会再次执行该动作，如果这 n 毫秒内又调用此动作则将重新计算执行时间。还有一种常见的防抖场景是验证用户输入：只有当用户输入完毕后，前端才需要检查格式是否正确。以下是函数防抖的一种应用场景：<br>　　假设调用方式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;resize&apos;, debounce(func, 100));</span><br></pre></td></tr></table></figure></p>\n<p>　　那么对应的函数防抖形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timeoutId = null;</span><br><span class=\"line\">function debounce(func, duration) &#123;</span><br><span class=\"line\">  let me = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    let args = arguments;</span><br><span class=\"line\">    clearTimeout(timeoutId);</span><br><span class=\"line\">    timeoutId = setTimeout(function() &#123;</span><br><span class=\"line\">      func.apply(me, args);</span><br><span class=\"line\">    &#125;, duration);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　上面的这段代码同样有效控制了 resize 函数的执行频率，与函数节流有点不同的是，它在执行函数时，多了一个延迟时间。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.jb51.net/article/105601.htm\" target=\"_blank\" rel=\"external\">JavaScript函数节流和函数防抖之间的区别</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"高级函数\"><a href=\"#高级函数\" class=\"headerlink\" title=\"高级函数\"></a>高级函数</h3><h4 id=\"安全的类型检测\"><a href=\"#安全的类型检测\" class=\"headerlink\" title=\"安全的类型检测\"></a>安全的类型检测</h4><p>　　JavaScript 内置的类型检测机制并非完全可靠。一个众所周知的问题就是在运行<code>typeof null</code>时，会返回<code>object</code>，这往往不是我们想要的结果，这会使得真正的对象类型与<code>null</code>得到的结果相同。解决该问题的方法之一是使用<code>Object.prototype.toString.call(value)</code>，如果该表达式中<code>value = null</code>，则会返回<code>[object Null]</code>；如果<code>value = {}</code>，则返回<code>[object Object]</code>。</p>\n<h4 id=\"作用域安全的构造函数\"><a href=\"#作用域安全的构造函数\" class=\"headerlink\" title=\"作用域安全的构造函数\"></a>作用域安全的构造函数</h4><p>　　当使用构造器方式构造对象时，构造器内部使用了 this 来指向新的对象实例，然而这仅仅是在正确调用构造函数时出现的结果（使用了 new 操作符）。如果忘记使用 new 操作符，与调用普通函数无异，此时构造器内部的 this 指向的是全局对象。为了避免这种错误的构造器调用方式，我们在构造器内部添加一个容错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  if (this instanceof Person) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return new Person(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　通过在构造函数中增加<code>this instanceof Person</code>的判断，可以确保作用域安全。</p>\n<h4 id=\"惰性载入函数\"><a href=\"#惰性载入函数\" class=\"headerlink\" title=\"惰性载入函数\"></a>惰性载入函数</h4><p>　　先来看以下伪代码，它想表达的意思就是在 IE、Chrome 和其它浏览器的情况下分别返回不同的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObj() &#123;</span><br><span class=\"line\">  if (IE 浏览器) &#123;</span><br><span class=\"line\">    return IEObj;</span><br><span class=\"line\">  &#125; else if (Chrome 浏览器) &#123;</span><br><span class=\"line\">    return ChromeObj;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return otherObj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　假设该函数要调用多次，就意味着要进行多次的分支语句的判断，而这是不必要的：因为一旦确定是在某个浏览器中，每次运行结果都是一样的。那么如何避免判断多次这种不必要的分支呢？解决方案就是称之为惰性载入的技巧。有两种实现惰性载入的方式，第一种是在函数被调用时再处理函数。例如按照如下方式改写上例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObj() &#123;</span><br><span class=\"line\">  if (IE) &#123;</span><br><span class=\"line\">    createObj = function () &#123;</span><br><span class=\"line\">      return IEObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (Chrome) &#123;</span><br><span class=\"line\">    createObj = function () &#123;</span><br><span class=\"line\">      return ChromeObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    createObj = function () &#123;</span><br><span class=\"line\">      return otherObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return createObj();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　在上面这种方式下，if 语句的每个分支都会为 createObj 变量赋值，有效覆盖了原有的函数。最后一步就是调用新赋的函数并返回。以后再调用 createObj() 的时候，就会直接调用被分配的函数，无需再次执行 if 语句。第二种惰性载入的方式是在声明函数时就指定适当的函数，这样，在第一次调用函数时就不会损失性能了，而在代码首次加载时会损失一点性能。。例如按照如下方式改写上例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var createObj = (function() &#123;</span><br><span class=\"line\">  if (IE) &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return IEObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (Chrome) &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return ChromeObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return otherObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h4><p>　　函数柯里化用于创建已经设置好了一个或多个参数的函数。一个熟悉的应用场景是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"external\">Function.prototype.bind()</a>，MDN 上对该函数的定义是：bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，<em>在调用新函数时，在任何提供之前提供一个给定的参数序列</em>。这句话中的斜体部分，就是使用的函数柯里化的思想。以下是 bind 函数的一种实现方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bind(fn, context) &#123;</span><br><span class=\"line\">  var args = Array.prototype.slice.call(arguments, 2); //提取第三个及以后的参数</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    var innerArgs = Array.prototype.slice.call(arguments); //该匿名函数的参数</span><br><span class=\"line\">    var finalArgs = args.concat(innerArgs); //外层参数和内层参数连接</span><br><span class=\"line\">    return fn.apply(context, finalArgs); //将 fn 上下文设置为 context，并传入 finalArgs 参数</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"防篡改对象\"><a href=\"#防篡改对象\" class=\"headerlink\" title=\"防篡改对象\"></a>防篡改对象</h3><ul>\n<li>不可扩展对象：不能给对象添加新成员。涉及的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\" target=\"_blank\" rel=\"external\">Object.preventExtensions()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\" target=\"_blank\" rel=\"external\">Object.isExtensible()</a></li>\n<li>密封的对象：只能改变可写属性的值。涉及的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"external\">Object.seal()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\" target=\"_blank\" rel=\"external\">Object.isSealed()</a></li>\n<li>冻结的对象：该对象永远不可变。涉及的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"external\">Object.freeze()</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\" target=\"_blank\" rel=\"external\">Object.isFrozen()</a></li>\n</ul>\n<h3 id=\"高级定时器\"><a href=\"#高级定时器\" class=\"headerlink\" title=\"高级定时器\"></a>高级定时器</h3><p>　　我们常常使用 <code>setTimeout()</code> 和 <code>setInterval()</code> 函数来创建定时器，但是不难发现，假如你设定了 setInterval 的间隔时间是 1s，但是函数的执行间隔好像并不是 1s，这是很普遍的现象，它的原因主要在于：在 JavaScript 中没有任何代码是立刻执行的，但一旦线程空闲则尽快执行。由于 JavaScript 是单线程的，看似好像与它的异步机制有所冲突，实则没有。异步的本质实际上是计划代码在未来的某个时间执行，具体在哪个时间执行取决于它前面有多少任务需要执行，这是一种队列的机制。定时器对队列的工作方式是，当特定时间过去后将代码插入，等待执行。根据以下的代码想象一个场景：该例中的 onclick 事件处理程序执行了 300ms，那么定时器的代码至少要在定时器设置之后的 300ms 后才会被执行，见下图。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;my-btn&apos;);</span><br><span class=\"line\">btn.onclick = function() &#123;</span><br><span class=\"line\">  setTimeout(function() &#123;</span><br><span class=\"line\">    //一些操作</span><br><span class=\"line\">  &#125;, 250);</span><br><span class=\"line\">  //其它代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhet819cnj20be05474l.jpg\" alt=\"\"><br>　　如图，尽管在 255ms 处添加了定时器代码，但这时候 JS 线程不空闲，onclick 事件处理程序还在运行。所以定时器代码最早能执行的时机是 300ms 处。</p>\n<h4 id=\"重复的定时器\"><a href=\"#重复的定时器\" class=\"headerlink\" title=\"重复的定时器\"></a>重复的定时器</h4><p>　　setInterval 定时器确保代码能够规则地插入队列中。但是该方式的问题在于，定时器代码在再次被添加到队列之前还没有完成执行，结果导致定时器代码连续运行好几次而之间没有任何停顿。幸好，JS 引擎够聪明，能避免这个问题：在使用 setInterval 时，仅当队列中没有该定时器的其它任何代码实例时，才将定时器代码添加到队列中，这确保了定时器代码加入到队列中的最小时间间隔为指定间隔。<br>　　这种定时器规则有两个问题：1)某些间隔会被跳过；2)多个定时器的代码执行之间间隔可能会比预期的小。我们改写上例代码为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&apos;my-btn&apos;);</span><br><span class=\"line\">btn.onclick = function() &#123;</span><br><span class=\"line\">  setInterval(function() &#123;</span><br><span class=\"line\">    //一些操作</span><br><span class=\"line\">  &#125;, 200);</span><br><span class=\"line\">  //其它代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　设想场景：事件处理程序花了 300ms 多一点的时间完成，同时定时器也花了差不多的时间，就会同时出现跳过间隔且连续运行定时器代码的情况。参见下图：<br><img src=\"https://wx3.sinaimg.cn/mw690/79b5b053gy1fnhf6iw7fmj20e905jq3f.jpg\" alt=\"\"><br>　　205ms 时，第一个定时器代码被添加到队列中，到 300ms 处时才能执行。在执行过程中，405ms 时又给队列添加了定时器代码。在下个间隔，即 605ms 处，由于队列中存在一个定时器代码的实例，因而这个时间点的定时器代码不会被添加到队列中。当第一个定时器代码执行完之后，紧接着就执行第二个定时器代码。为了避免以上提到的两个缺点，可以采取以下方案代替 setInterval：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">  //一些操作</span><br><span class=\"line\">  setTimeout(arguments.callee, interval);</span><br><span class=\"line\">&#125;, interval)</span><br></pre></td></tr></table></figure></p>\n<p>　　这样做的好处时，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，这样不会跳过间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。</p>\n<h4 id=\"数组分块\"><a href=\"#数组分块\" class=\"headerlink\" title=\"数组分块\"></a>数组分块</h4><p>　　当代码中存在进行大量处理的循环时，会导致脚本的长时间运行。如果该循环无需同步完成，也不必按顺序完成时，我们可以使用定时器分割这个循环，使其可以分散在不同的时间完成。基本模式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">  var item = array.shift();</span><br><span class=\"line\">  process(item);</span><br><span class=\"line\">  if (array.length) &#123;</span><br><span class=\"line\">    setTimeout(arguments.callee, 100);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, 100);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>　　先来看个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onresize = function() &#123;</span><br><span class=\"line\">  var div = document.getElementById(&apos;myDiv&apos;);</span><br><span class=\"line\">  div.style.height = div.offsetWidth + &apos;px&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　就问你吓不吓人。当你改变 window 的大小的时候，浏览器连续不断地去执行上面的代码，可想而知会有多慢。为了解决这个问题，可以用定时器对该函数进行节流。函数节流背后的思想是指，某些代码不可以在没有间断的情况下连续重复运行。也就是说，在一段时间内，一段代码函数只能执行一次，这段代码就是被节流的代码。以下是函数节流的一种应用场景：<br>　　假设调用方式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;resize&apos;, throttle(func, 100));</span><br></pre></td></tr></table></figure></p>\n<p>　　那么对应的函数节流形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isRun = true;</span><br><span class=\"line\">function throttle(func, duration) &#123;</span><br><span class=\"line\">  let me = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    if (!isRun) &#123;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let args = arguments;</span><br><span class=\"line\">    isRun = false;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">      isRun = true;</span><br><span class=\"line\">      func.apply(me, arguments);</span><br><span class=\"line\">    &#125;, duration);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　上面的这段代码有效的控制了 resize 函数的执行频率，使其保持为 1 / duration。<em>函数节流的要点是声明一个变量作为标志位，记录当前代码是否在执行</em>。</p>\n<h4 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h4><p>　　有点类似于函数节流，函数防抖也往往用来解决频繁的事件触发所造成的性能问题。但是它与函数节流的理念不同，如果说节流是进行频率控制的话，那么防抖则是进行空闲控制，只有当调用动作 n 毫秒后，才会再次执行该动作，如果这 n 毫秒内又调用此动作则将重新计算执行时间。还有一种常见的防抖场景是验证用户输入：只有当用户输入完毕后，前端才需要检查格式是否正确。以下是函数防抖的一种应用场景：<br>　　假设调用方式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;resize&apos;, debounce(func, 100));</span><br></pre></td></tr></table></figure></p>\n<p>　　那么对应的函数防抖形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timeoutId = null;</span><br><span class=\"line\">function debounce(func, duration) &#123;</span><br><span class=\"line\">  let me = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    let args = arguments;</span><br><span class=\"line\">    clearTimeout(timeoutId);</span><br><span class=\"line\">    timeoutId = setTimeout(function() &#123;</span><br><span class=\"line\">      func.apply(me, args);</span><br><span class=\"line\">    &#125;, duration);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　上面的这段代码同样有效控制了 resize 函数的执行频率，与函数节流有点不同的是，它在执行函数时，多了一个延迟时间。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.jb51.net/article/105601.htm\" target=\"_blank\" rel=\"external\">JavaScript函数节流和函数防抖之间的区别</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}